!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AC_DC_erased	Parameters_input.cu	/^int AC_DC_erased;$/;"	v
AFC	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
AF_layer_label	Parameters_input.cu	/^int AF_layer_label;$/;"	v
ALIGNmask	qvoronoi/mem.h	/^  int      ALIGNmask;         \/* worst-case alignment, must be 2^n-1 *\/$/;"	m	struct:qhmemT
ALLOWrestart	qvoronoi/libqhull.h	/^  boolT ALLOWrestart;     \/* true if qh_precision can use qh.restartexit *\/$/;"	m	struct:qhT
ALLpoints	qvoronoi/libqhull.h	/^  boolT ALLpoints;        \/* true 'Qs' if search all points for initial simplex *\/$/;"	m	struct:qhT
ALPHA	Parameters.h	13;"	d
ANGLEmerge	qvoronoi/libqhull.h	/^  boolT ANGLEmerge;       \/* true 'Qa' if sort potential merges by angle *\/$/;"	m	struct:qhT
ANGLEround	qvoronoi/libqhull.h	/^  realT ANGLEround;       \/* max round off error for angles *\/$/;"	m	struct:qhT
ANNOTATEoutput	qvoronoi/libqhull.h	/^  boolT ANNOTATEoutput;   \/* true 'Ta' if annotate output with message codes *\/$/;"	m	struct:qhT
APPROXhull	qvoronoi/libqhull.h	/^  boolT APPROXhull;       \/* true 'Wn' if MINoutside set *\/$/;"	m	struct:qhT
AREAfactor	qvoronoi/libqhull.h	/^  realT AREAfactor;       \/* 1\/(hull_dim-1)! for converting det's to area *\/$/;"	m	struct:qhT
ATinfinity	qvoronoi/libqhull.h	/^  boolT ATinfinity;       \/* true 'Qz' if point num_points-1 is "at-infinity"$/;"	m	struct:qhT
AVOIDold	qvoronoi/libqhull.h	/^  boolT AVOIDold;         \/* true 'Q4' if avoid old->new merges *\/$/;"	m	struct:qhT
Abs	clipper/clipper.cu	/^inline cInt Abs(cInt val)$/;"	f	namespace:ClipperLib
AddChild	clipper/clipper.cu	/^void PolyNode::AddChild(PolyNode& child)$/;"	f	class:ClipperLib::PolyNode
AddEdgeToSEL	clipper/clipper.cu	/^void Clipper::AddEdgeToSEL(TEdge *edge)$/;"	f	class:ClipperLib::Clipper
AddGhostJoin	clipper/clipper.cu	/^void Clipper::AddGhostJoin(OutPt *op, const IntPoint OffPt)$/;"	f	class:ClipperLib::Clipper
AddJoin	clipper/clipper.cu	/^void Clipper::AddJoin(OutPt *op1, OutPt *op2, const IntPoint OffPt)$/;"	f	class:ClipperLib::Clipper
AddLocalMaxPoly	clipper/clipper.cu	/^void Clipper::AddLocalMaxPoly(TEdge *e1, TEdge *e2, const IntPoint &Pt)$/;"	f	class:ClipperLib::Clipper
AddLocalMinPoly	clipper/clipper.cu	/^OutPt* Clipper::AddLocalMinPoly(TEdge *e1, TEdge *e2, const IntPoint &Pt)$/;"	f	class:ClipperLib::Clipper
AddOutPt	clipper/clipper.cu	/^OutPt* Clipper::AddOutPt(TEdge *e, const IntPoint &pt)$/;"	f	class:ClipperLib::Clipper
AddPath	clipper/clipper.cu	/^bool ClipperBase::AddPath(const Path &pg, PolyType PolyTyp, bool Closed)$/;"	f	class:ClipperLib::ClipperBase
AddPath	clipper/clipper.cu	/^void ClipperOffset::AddPath(const Path& path, JoinType joinType, EndType endType)$/;"	f	class:ClipperLib::ClipperOffset
AddPaths	clipper/clipper.cu	/^bool ClipperBase::AddPaths(const Paths &ppg, PolyType PolyTyp, bool Closed)$/;"	f	class:ClipperLib::ClipperBase
AddPaths	clipper/clipper.cu	/^void ClipperOffset::AddPaths(const Paths& paths, JoinType joinType, EndType endType)$/;"	f	class:ClipperLib::ClipperOffset
AddPolyNodeToPaths	clipper/clipper.cu	/^void AddPolyNodeToPaths(const PolyNode& polynode, NodeType nodetype, Paths& paths)$/;"	f	namespace:ClipperLib
Aex	Parameters.h	/^double static Aex = 1.00e-6, Ku = 4.14e7, Ms = 925.07, Ms_soft = 1400; $/;"	v
AllNodes	clipper/clipper.h	/^    PolyNodes AllNodes;$/;"	m	class:ClipperLib::PolyTree
AllocateDeviceMemory	LLG_CUDA.cu	/^bool AllocateDeviceMemory(int lx_zero_pad, int ly_zero_pad, int lz_zero_pad, int mNx, int mNy, int mNz, int DEG_FREEDOM)$/;"	f
AllocateHostMemory	LLG_CUDA.cu	/^bool AllocateHostMemory(int lx_zero_pad, int ly_zero_pad, int lz_zero_pad, int mNx, int mNy, int mNz, int DEG_FREEDOM, int TOTAL_TIME)$/;"	f
AppendPolygon	clipper/clipper.cu	/^void Clipper::AppendPolygon(TEdge *e1, TEdge *e2)$/;"	f	class:ClipperLib::Clipper
ArcTolerance	clipper/clipper.h	/^  double ArcTolerance;$/;"	m	class:ClipperLib::ClipperOffset
Area	clipper/clipper.cu	/^double Area(const OutRec &outRec)$/;"	f	namespace:ClipperLib
Area	clipper/clipper.cu	/^double Area(const Path &poly)$/;"	f	namespace:ClipperLib
BESToutside	qvoronoi/libqhull.h	/^  boolT BESToutside;      \/* true 'Qf' if partition points into best outsideset *\/$/;"	m	struct:qhT
BL12	Parameters_input.cu	/^float  L1_Hex_l, BL12, BL12_Hex_l,$/;"	v
BL12_Hex_l	Parameters_input.cu	/^float  L1_Hex_l, BL12, BL12_Hex_l,$/;"	v
BL12_Ms	Parameters_input.cu	/^	   BL12_Ms, BL23_Ms, BL34_Ms, BL45_Ms, BL56_Ms,$/;"	v
BL23	Parameters_input.cu	/^       L2_Hex_l, BL23, BL23_Hex_l,$/;"	v
BL23_Hex_l	Parameters_input.cu	/^       L2_Hex_l, BL23, BL23_Hex_l,$/;"	v
BL23_Ms	Parameters_input.cu	/^	   BL12_Ms, BL23_Ms, BL34_Ms, BL45_Ms, BL56_Ms,$/;"	v
BL34	Parameters_input.cu	/^       L3_Hex_l, BL34, BL34_Hex_l,$/;"	v
BL34_Hex_l	Parameters_input.cu	/^       L3_Hex_l, BL34, BL34_Hex_l,$/;"	v
BL34_Ms	Parameters_input.cu	/^	   BL12_Ms, BL23_Ms, BL34_Ms, BL45_Ms, BL56_Ms,$/;"	v
BL45	Parameters_input.cu	/^	   L4_Hex_l, BL45, BL45_Hex_l,$/;"	v
BL45_Hex_l	Parameters_input.cu	/^	   L4_Hex_l, BL45, BL45_Hex_l,$/;"	v
BL45_Ms	Parameters_input.cu	/^	   BL12_Ms, BL23_Ms, BL34_Ms, BL45_Ms, BL56_Ms,$/;"	v
BL56	Parameters_input.cu	/^	   L5_Hex_l, BL56, BL56_Hex_l,$/;"	v
BL56_Hex_l	Parameters_input.cu	/^	   L5_Hex_l, BL56, BL56_Hex_l,$/;"	v
BL56_Ms	Parameters_input.cu	/^	   BL12_Ms, BL23_Ms, BL34_Ms, BL45_Ms, BL56_Ms,$/;"	v
BLK_SZ_Z	Parameters_input.cu	/^int BLOCK_SIZE_X, BLOCK_SIZE_Y, BLOCK_SIZE_Z, BLK_SZ_Z;$/;"	v
BLOCK_SIZE_X	Parameters_input.cu	/^int BLOCK_SIZE_X, BLOCK_SIZE_Y, BLOCK_SIZE_Z, BLK_SZ_Z;$/;"	v
BLOCK_SIZE_Y	Parameters_input.cu	/^int BLOCK_SIZE_X, BLOCK_SIZE_Y, BLOCK_SIZE_Z, BLK_SZ_Z;$/;"	v
BLOCK_SIZE_Z	Parameters_input.cu	/^int BLOCK_SIZE_X, BLOCK_SIZE_Y, BLOCK_SIZE_Z, BLK_SZ_Z;$/;"	v
BUFinit	qvoronoi/mem.h	/^  int      BUFinit;           \/* initial size of memory allocation buffer *\/$/;"	m	struct:qhmemT
BUFsize	qvoronoi/mem.h	/^  int      BUFsize;           \/* size of memory allocation buffer *\/$/;"	m	struct:qhmemT
Bot	clipper/clipper.cu	/^  IntPoint Bot;$/;"	m	struct:ClipperLib::TEdge	file:
BottomPt	clipper/clipper.cu	/^  OutPt    *BottomPt;$/;"	m	struct:ClipperLib::OutRec	file:
BuildIntersectList	clipper/clipper.cu	/^void Clipper::BuildIntersectList(const cInt topY)$/;"	f	class:ClipperLib::Clipper
BuildResult	clipper/clipper.cu	/^void Clipper::BuildResult(Paths &polys)$/;"	f	class:ClipperLib::Clipper
BuildResult2	clipper/clipper.cu	/^void Clipper::BuildResult2(PolyTree& polytree)$/;"	f	class:ClipperLib::Clipper
CDDinput	qvoronoi/libqhull.h	/^  boolT CDDinput;         \/* true 'Pc' if input uses CDD format (1.0\/offset first) *\/$/;"	m	struct:qhT
CDDoutput	qvoronoi/libqhull.h	/^  boolT CDDoutput;        \/* true 'PC' if print normals in CDD format (offset first) *\/$/;"	m	struct:qhT
CENTERtype	qvoronoi/libqhull.h	/^  qh_CENTER CENTERtype;   \/* current type of facet->center, qh_CENTER *\/$/;"	m	struct:qhT
CGC_DEF	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
CGC_label	Parameters_input.cu	/^int CGC_label;$/;"	v
CHECKfrequently	qvoronoi/libqhull.h	/^  boolT CHECKfrequently;  \/* true 'Tc' if checking frequently *\/$/;"	m	struct:qhT
CLIPPER_VERSION	clipper/clipper.h	37;"	d
CT_Analysis_Head	Moving_Head.h	/^bool CT_Analysis_Head(int t){$/;"	f
CT_Rec_Analysis	Parameters_input.cu	/^int DT_Rec_Analysis, CT_Rec_Analysis;$/;"	v
CT_x0	Parameters_input.cu	/^int DT_x0, DT_y0, CT_x0, CT_y0;$/;"	v
CT_y0	Parameters_input.cu	/^int DT_x0, DT_y0, CT_x0, CT_y0;$/;"	v
CalcMagLayerAve	MiscFunctions.cu	/^bool CalcMagLayerAve(long int tt, int count, double* Mz_CGC, vector<vector<coor2d_t> >& grain_coor, int NumOfGrains){$/;"	f
ChildCount	clipper/clipper.cu	/^int PolyNode::ChildCount() const$/;"	f	class:ClipperLib::PolyNode
Childs	clipper/clipper.h	/^    PolyNodes Childs;$/;"	m	class:ClipperLib::PolyNode
CleanPolygon	clipper/clipper.cu	/^void CleanPolygon(Path& poly, double distance)$/;"	f	namespace:ClipperLib
CleanPolygon	clipper/clipper.cu	/^void CleanPolygon(const Path& in_poly, Path& out_poly, double distance)$/;"	f	namespace:ClipperLib
CleanPolygons	clipper/clipper.cu	/^void CleanPolygons(Paths& polys, double distance)$/;"	f	namespace:ClipperLib
CleanPolygons	clipper/clipper.cu	/^void CleanPolygons(const Paths& in_polys, Paths& out_polys, double distance)$/;"	f	namespace:ClipperLib
Clear	clipper/clipper.cu	/^void ClipperBase::Clear()$/;"	f	class:ClipperLib::ClipperBase
Clear	clipper/clipper.cu	/^void ClipperOffset::Clear()$/;"	f	class:ClipperLib::ClipperOffset
Clear	clipper/clipper.cu	/^void PolyTree::Clear()$/;"	f	class:ClipperLib::PolyTree
ClearGhostJoins	clipper/clipper.cu	/^void Clipper::ClearGhostJoins()$/;"	f	class:ClipperLib::Clipper
ClearJoins	clipper/clipper.cu	/^void Clipper::ClearJoins()$/;"	f	class:ClipperLib::Clipper
ClipType	clipper/clipper.h	/^enum ClipType { ctIntersection, ctUnion, ctDifference, ctXor };$/;"	g	namespace:ClipperLib
Clipper	clipper/clipper.cu	/^Clipper::Clipper(int initOptions) : ClipperBase() \/\/constructor$/;"	f	class:ClipperLib::Clipper
Clipper	clipper/clipper.h	/^class Clipper : public virtual ClipperBase$/;"	c	namespace:ClipperLib
ClipperBase	clipper/clipper.cu	/^ClipperBase::ClipperBase() \/\/constructor$/;"	f	class:ClipperLib::ClipperBase
ClipperBase	clipper/clipper.h	/^class ClipperBase$/;"	c	namespace:ClipperLib
ClipperLib	clipper/clipper.cu	/^namespace ClipperLib {$/;"	n	file:
ClipperLib	clipper/clipper.h	/^namespace ClipperLib {$/;"	n
ClipperOffset	clipper/clipper.cu	/^ClipperOffset::ClipperOffset(double miterLimit, double arcTolerance)$/;"	f	class:ClipperLib::ClipperOffset
ClipperOffset	clipper/clipper.h	/^class ClipperOffset $/;"	c	namespace:ClipperLib
ClosedPathsFromPolyTree	clipper/clipper.cu	/^void ClosedPathsFromPolyTree(const PolyTree& polytree, Paths& paths)$/;"	f	namespace:ClipperLib
ComplexMul	LLG_kernel.cu	/^__device__ __host__ static cufftComplex ComplexMul(cufftComplex* a, cufftComplex* b, int i, int j, int k, int pitch_x, int pitch_y)$/;"	f	file:
Contour	clipper/clipper.h	/^    Path Contour;$/;"	m	class:ClipperLib::PolyNode
CopyAELToSEL	clipper/clipper.cu	/^void Clipper::CopyAELToSEL()$/;"	f	class:ClipperLib::Clipper
CreateOutRec	clipper/clipper.cu	/^OutRec* Clipper::CreateOutRec()$/;"	f	class:ClipperLib::Clipper
Curr	clipper/clipper.cu	/^  IntPoint Curr;$/;"	m	struct:ClipperLib::TEdge	file:
D	Parameters.h	/^static double  *T = NULL, *D = NULL;$/;"	v
DEFqhstatT	qvoronoi/libqhull.h	202;"	d
DEFqhstatT	qvoronoi/stat.h	484;"	d
DEFsetT	qvoronoi/libqhull.h	197;"	d
DEFsetT	qvoronoi/mem.h	109;"	d
DEFsetT	qvoronoi/qset.h	32;"	d
DEG_FREEDOM	Parameters_input.cu	/^int DEG_FREEDOM;$/;"	v
DELAUNAY	qvoronoi/libqhull.h	/^  boolT DELAUNAY;         \/* true 'd' if computing DELAUNAY triangulation *\/$/;"	m	struct:qhT
DEL_Aex	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
DEL_Hk	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
DEL_Tc	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
DEMAG	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
DISTround	qvoronoi/libqhull.h	/^  realT DISTround;        \/* max round off error for distances, 'E' overrides *\/$/;"	m	struct:qhT
DOcheckmax	qvoronoi/libqhull.h	/^  boolT DOcheckmax;       \/* true if calling qh_check_maxout (qh_initqhull_globals) *\/$/;"	m	struct:qhT
DOintersections	qvoronoi/libqhull.h	/^  boolT DOintersections;  \/* true 'Gh' if print hyperplane intersections *\/$/;"	m	struct:qhT
DROPdim	qvoronoi/libqhull.h	/^  int   DROPdim;          \/* drops dim 'GDn' for 4-d -> 3-d output *\/$/;"	m	struct:qhT
DT_Analysis_Head	Moving_Head.h	/^bool DT_Analysis_Head(int t){$/;"	f
DT_Rec_Analysis	Parameters_input.cu	/^int DT_Rec_Analysis, CT_Rec_Analysis;$/;"	v
DT_x0	Parameters_input.cu	/^int DT_x0, DT_y0, CT_x0, CT_y0;$/;"	v
DT_y0	Parameters_input.cu	/^int DT_x0, DT_y0, CT_x0, CT_y0;$/;"	v
DeleteFromAEL	clipper/clipper.cu	/^void Clipper::DeleteFromAEL(TEdge *e)$/;"	f	class:ClipperLib::Clipper
DeleteFromSEL	clipper/clipper.cu	/^void Clipper::DeleteFromSEL(TEdge *e)$/;"	f	class:ClipperLib::Clipper
Delta	clipper/clipper.cu	/^  IntPoint Delta;$/;"	m	struct:ClipperLib::TEdge	file:
Direction	clipper/clipper.cu	/^enum Direction { dRightToLeft, dLeftToRight };$/;"	g	namespace:ClipperLib	file:
DisposeAllOutRecs	clipper/clipper.cu	/^void Clipper::DisposeAllOutRecs(){$/;"	f	class:ClipperLib::Clipper
DisposeIntersectNodes	clipper/clipper.cu	/^void Clipper::DisposeIntersectNodes()$/;"	f	class:ClipperLib::Clipper
DisposeLocalMinimaList	clipper/clipper.cu	/^void ClipperBase::DisposeLocalMinimaList()$/;"	f	class:ClipperLib::ClipperBase
DisposeOutPts	clipper/clipper.cu	/^void DisposeOutPts(OutPt*& pp)$/;"	f	namespace:ClipperLib
DisposeOutRec	clipper/clipper.cu	/^void Clipper::DisposeOutRec(PolyOutList::size_type index)$/;"	f	class:ClipperLib::Clipper
DistanceFromLineSqrd	clipper/clipper.cu	/^double DistanceFromLineSqrd($/;"	f	namespace:ClipperLib
DistanceSqrd	clipper/clipper.cu	/^inline double DistanceSqrd(const IntPoint& pt1, const IntPoint& pt2)$/;"	f	namespace:ClipperLib
DmagFAC	Parameters_input.cu	/^double DmagFAC;$/;"	v
DmagINT	Parameters_input.cu	/^int DmagINT;$/;"	v
DoMaxima	clipper/clipper.cu	/^void Clipper::DoMaxima(TEdge *e)$/;"	f	class:ClipperLib::Clipper
DoMiter	clipper/clipper.cu	/^void ClipperOffset::DoMiter(int j, int k, double r)$/;"	f	class:ClipperLib::ClipperOffset
DoOffset	clipper/clipper.cu	/^void ClipperOffset::DoOffset(double delta)$/;"	f	class:ClipperLib::ClipperOffset
DoRound	clipper/clipper.cu	/^void ClipperOffset::DoRound(int j, int k)$/;"	f	class:ClipperLib::ClipperOffset
DoSimplePolygons	clipper/clipper.cu	/^void Clipper::DoSimplePolygons()$/;"	f	class:ClipperLib::Clipper
DoSquare	clipper/clipper.cu	/^void ClipperOffset::DoSquare(int j, int k)$/;"	f	class:ClipperLib::ClipperOffset
DoublePoint	clipper/clipper.h	/^  DoublePoint(IntPoint ip) : X((double)ip.X), Y((double)ip.Y) {}$/;"	f	struct:ClipperLib::DoublePoint
DoublePoint	clipper/clipper.h	/^  DoublePoint(double x = 0, double y = 0) : X(x), Y(y) {}$/;"	f	struct:ClipperLib::DoublePoint
DoublePoint	clipper/clipper.h	/^struct DoublePoint$/;"	s	namespace:ClipperLib
DupOutPt	clipper/clipper.cu	/^OutPt* DupOutPt(OutPt* outPt, bool InsertAfter)$/;"	f	namespace:ClipperLib
Dx	clipper/clipper.cu	/^  double Dx;$/;"	m	struct:ClipperLib::TEdge	file:
E2InsertsBeforeE1	clipper/clipper.cu	/^inline bool E2InsertsBeforeE1(TEdge &e1, TEdge &e2)$/;"	f	namespace:ClipperLib
ENDmrg	qvoronoi/merge.h	/^  ENDmrg$/;"	e	enum:__anon5
EQUI_START_TIME	Parameters_input.cu	/^long int TOTAL_TIME, EQUI_START_TIME;$/;"	v
ERREXITcalled	qvoronoi/libqhull.h	/^  boolT ERREXITcalled;    \/* true during qh_errexit (prevents duplicate calls *\/$/;"	m	struct:qhT
EXT_FP_PROFILE	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
Edge1	clipper/clipper.cu	/^  TEdge          *Edge1;$/;"	m	struct:ClipperLib::IntersectNode	file:
Edge2	clipper/clipper.cu	/^  TEdge          *Edge2;$/;"	m	struct:ClipperLib::IntersectNode	file:
EdgeList	clipper/clipper.h	/^typedef std::vector < TEdge* > EdgeList;$/;"	t	namespace:ClipperLib
EdgeSide	clipper/clipper.h	/^enum EdgeSide { esLeft = 1, esRight = 2};$/;"	g	namespace:ClipperLib
EdgesAdjacent	clipper/clipper.cu	/^inline bool EdgesAdjacent(const IntersectNode &inode)$/;"	f	namespace:ClipperLib
EndType	clipper/clipper.h	/^enum EndType {etClosedPolygon, etClosedLine, etOpenButt, etOpenSquare, etOpenRound};$/;"	g	namespace:ClipperLib
ExcludeOp	clipper/clipper.cu	/^OutPt* ExcludeOp(OutPt* op)$/;"	f	namespace:ClipperLib
Execute	clipper/clipper.cu	/^bool Clipper::Execute(ClipType clipType, Paths &solution,$/;"	f	class:ClipperLib::Clipper
Execute	clipper/clipper.cu	/^bool Clipper::Execute(ClipType clipType, PolyTree& polytree,$/;"	f	class:ClipperLib::Clipper
Execute	clipper/clipper.cu	/^void ClipperOffset::Execute(Paths& solution, double delta)$/;"	f	class:ClipperLib::ClipperOffset
Execute	clipper/clipper.cu	/^void ClipperOffset::Execute(PolyTree& solution, double delta)$/;"	f	class:ClipperLib::ClipperOffset
ExecuteInternal	clipper/clipper.cu	/^bool Clipper::ExecuteInternal()$/;"	f	class:ClipperLib::Clipper
External_HeadField	MiscFunctions.cu	/^bool External_HeadField(int EXT_FP_PROFILE){$/;"	f
ExtractField_from_FP	Moving_Head.h	/^static void ExtractField_from_FP(int mNz_i, int mNz_f, int f_x00){$/;"	f
FORALLfacet_	qvoronoi/poly.h	77;"	d
FORALLfacets	qvoronoi/libqhull.h	802;"	d
FORALLnew_facets	qvoronoi/poly.h	89;"	d
FORALLpoint_	qvoronoi/libqhull.h	824;"	d
FORALLpoints	qvoronoi/libqhull.h	813;"	d
FORALLsame_	qvoronoi/poly.h	125;"	d
FORALLsame_cycle_	qvoronoi/poly.h	137;"	d
FORALLvertex_	qvoronoi/poly.h	101;"	d
FORALLvertices	qvoronoi/libqhull.h	839;"	d
FORALLvisible_facets	qvoronoi/poly.h	113;"	d
FORCEoutput	qvoronoi/libqhull.h	/^  boolT FORCEoutput;      \/* true 'Po' if forcing output despite degeneracies *\/$/;"	m	struct:qhT
FOREACHelem_	qvoronoi/qset.h	264;"	d
FOREACHfacet_	qvoronoi/libqhull.h	853;"	d
FOREACHfacet_i_	qvoronoi/libqhull.h	927;"	d
FOREACHmerge_	qvoronoi/merge.h	112;"	d
FOREACHneighborA_	qvoronoi/poly.h	156;"	d
FOREACHneighbor_	qvoronoi/libqhull.h	870;"	d
FOREACHneighbor_i_	qvoronoi/libqhull.h	945;"	d
FOREACHnewfacet_	qvoronoi/poly.h	180;"	d
FOREACHpoint_	qvoronoi/libqhull.h	884;"	d
FOREACHpoint_i_	qvoronoi/libqhull.h	960;"	d
FOREACHridge_	qvoronoi/libqhull.h	898;"	d
FOREACHridge_i_	qvoronoi/libqhull.h	975;"	d
FOREACHset_	qvoronoi/qset.h	291;"	d
FOREACHsetelement_	qvoronoi/qset.h	135;"	d
FOREACHsetelement_i_	qvoronoi/qset.h	168;"	d
FOREACHsetelementreverse12_	qvoronoi/qset.h	232;"	d
FOREACHsetelementreverse_	qvoronoi/qset.h	201;"	d
FOREACHvertexA_	qvoronoi/poly.h	192;"	d
FOREACHvertex_	qvoronoi/libqhull.h	912;"	d
FOREACHvertex_i_	qvoronoi/libqhull.h	990;"	d
FOREACHvertexreverse12_	qvoronoi/poly.h	205;"	d
FOREACHvisible_	qvoronoi/poly.h	168;"	d
FP	LLG_CUDA.cu	/^double *FP_inp[3], *FP_trail[3], *FP[3];$/;"	v
FP_inp	LLG_CUDA.cu	/^double *FP_inp[3], *FP_trail[3], *FP[3];$/;"	v
FP_inp_theta_n_Magnitude	MiscFunctions.cu	/^bool FP_inp_theta_n_Magnitude(){$/;"	f
FP_mag	LLG_CUDA.cu	/^	   *FP_theta = NULL, *FP_mag = NULL;$/;"	v
FP_theta	LLG_CUDA.cu	/^	   *FP_theta = NULL, *FP_mag = NULL;$/;"	v
FP_trail	LLG_CUDA.cu	/^double *FP_inp[3], *FP_trail[3], *FP[3];$/;"	v
FULL_REC	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
False	qvoronoi/libqhull.h	104;"	d
False	qvoronoi/libqhull.h	109;"	d
FieldInching	Moving_Head.h	/^static void FieldInching(int mNz_i, int mNz_f){$/;"	f
FieldSweepTimeStep	Parameters_input.cu	/^int FieldSweepTimeStep; $/;"	v
FindNextLocMin	clipper/clipper.cu	/^TEdge* FindNextLocMin(TEdge* E)$/;"	f	namespace:ClipperLib
FirstIsBottomPt	clipper/clipper.cu	/^bool FirstIsBottomPt(const OutPt* btmPt1, const OutPt* btmPt2)$/;"	f	namespace:ClipperLib
FirstLeft	clipper/clipper.cu	/^  OutRec   *FirstLeft;  \/\/see comments in clipper.pas$/;"	m	struct:ClipperLib::OutRec	file:
FixHoleLinkage	clipper/clipper.cu	/^void Clipper::FixHoleLinkage(OutRec &outrec)$/;"	f	class:ClipperLib::Clipper
FixOrientations	clipper/clipper.cu	/^void ClipperOffset::FixOrientations()$/;"	f	class:ClipperLib::ClipperOffset
FixupFirstLefts1	clipper/clipper.cu	/^void Clipper::FixupFirstLefts1(OutRec* OldOutRec, OutRec* NewOutRec)$/;"	f	class:ClipperLib::Clipper
FixupFirstLefts2	clipper/clipper.cu	/^void Clipper::FixupFirstLefts2(OutRec* OldOutRec, OutRec* NewOutRec)$/;"	f	class:ClipperLib::Clipper
FixupIntersectionOrder	clipper/clipper.cu	/^bool Clipper::FixupIntersectionOrder()$/;"	f	class:ClipperLib::Clipper
FixupOutPolygon	clipper/clipper.cu	/^void Clipper::FixupOutPolygon(OutRec &outrec)$/;"	f	class:ClipperLib::Clipper
GAMMA	Parameters.h	14;"	d
GETarea	qvoronoi/libqhull.h	/^  boolT GETarea;          \/* true 'Fa', 'FA', 'FS', 'PAn', 'PFn' if compute facet area\/Voronoi volume in io.c *\/$/;"	m	struct:qhT
GOODclosest	qvoronoi/libqhull.h	/^  facetT *GOODclosest;    \/* closest facet to GOODthreshold in qh_findgood *\/$/;"	m	struct:qhT
GOODpoint	qvoronoi/libqhull.h	/^  int   GOODpoint;        \/* 1+n for 'QGn', good facet if visible\/not(-) from point n*\/$/;"	m	struct:qhT
GOODpointp	qvoronoi/libqhull.h	/^  pointT *GOODpointp;     \/*   the actual point *\/$/;"	m	struct:qhT
GOODthreshold	qvoronoi/libqhull.h	/^  boolT GOODthreshold;    \/* true if qh lower_threshold\/upper_threshold defined$/;"	m	struct:qhT
GOODvertex	qvoronoi/libqhull.h	/^  int   GOODvertex;       \/* 1+n, good facet if vertex for point n *\/$/;"	m	struct:qhT
GOODvertexp	qvoronoi/libqhull.h	/^  pointT *GOODvertexp;     \/*   the actual point *\/$/;"	m	struct:qhT
G_matrix	FFT_Function_Set.cu	/^static bool G_matrix(int lx_zero_pad, int ly_zero_pad, int lz_zero_pad)$/;"	f	file:
G_tensor	FFT_Function_Set.cu	/^int G_tensor(int lx_zero_pad, int ly_zero_pad, int lz_zero_pad)$/;"	f
GetBottomPt	clipper/clipper.cu	/^OutPt* GetBottomPt(OutPt *pp)$/;"	f	namespace:ClipperLib
GetBounds	clipper/clipper.cu	/^IntRect ClipperBase::GetBounds()$/;"	f	class:ClipperLib::ClipperBase
GetDx	clipper/clipper.cu	/^inline double GetDx(const IntPoint pt1, const IntPoint pt2)$/;"	f	namespace:ClipperLib
GetElement	LLG_kernel.cu	/^__device__ __host__ static double GetElement(double* pData, int i, int j, int k, int pitch_x, int pitch_y)$/;"	f	file:
GetElement_Complex	LLG_kernel.cu	/^__device__ __host__ static cufftComplex GetElement_Complex(cufftComplex* pData, int i, int j, int k, int pitch_x, int pitch_y)$/;"	f	file:
GetElement_Int	LLG_kernel.cu	/^__device__ __host__ static int GetElement_Int(int* pData, int i, int j, int k, int pitch_x, int pitch_y)$/;"	f	file:
GetFirst	clipper/clipper.cu	/^PolyNode* PolyTree::GetFirst() const$/;"	f	class:ClipperLib::PolyTree
GetHorzDirection	clipper/clipper.cu	/^void GetHorzDirection(TEdge& HorzEdge, Direction& Dir, cInt& Left, cInt& Right)$/;"	f	namespace:ClipperLib
GetLowermostRec	clipper/clipper.cu	/^OutRec* GetLowermostRec(OutRec *outRec1, OutRec *outRec2)$/;"	f	namespace:ClipperLib
GetMaximaPair	clipper/clipper.cu	/^TEdge *GetMaximaPair(TEdge *e)$/;"	f	namespace:ClipperLib
GetNext	clipper/clipper.cu	/^PolyNode* PolyNode::GetNext() const$/;"	f	class:ClipperLib::PolyNode
GetNextInAEL	clipper/clipper.cu	/^TEdge* GetNextInAEL(TEdge *e, Direction dir)$/;"	f	namespace:ClipperLib
GetNextSiblingUp	clipper/clipper.cu	/^PolyNode* PolyNode::GetNextSiblingUp() const$/;"	f	class:ClipperLib::PolyNode
GetOutRec	clipper/clipper.cu	/^OutRec* Clipper::GetOutRec(int Idx)$/;"	f	class:ClipperLib::Clipper
GetOverlap	clipper/clipper.cu	/^bool GetOverlap(const cInt a1, const cInt a2, const cInt b1, const cInt b2, $/;"	f	namespace:ClipperLib
GetOverlapSegment	clipper/clipper.cu	/^bool GetOverlapSegment(IntPoint pt1a, IntPoint pt1b, IntPoint pt2a,$/;"	f	namespace:ClipperLib
GetUnitNormal	clipper/clipper.cu	/^DoublePoint GetUnitNormal(const IntPoint &pt1, const IntPoint &pt2)$/;"	f	namespace:ClipperLib
GrainDx	Parameters_input.cu	/^double GrainDx, GrainDy, delta_x, delta_y, delta_z, delta_t, Temperature,$/;"	v
GrainDy	Parameters_input.cu	/^double GrainDx, GrainDy, delta_x, delta_y, delta_z, delta_t, Temperature,$/;"	v
GrainsIndicator	GrainsIndicator.cu	/^bool GrainsIndicator(){$/;"	f
Gxx_1d_cmplx	LLG_CUDA.cu	/^complex<float> *Gxx_1d_cmplx = NULL,  *Gxy_1d_cmplx = NULL,  *Gxz_1d_cmplx = NULL, $/;"	v
Gxy_1d_cmplx	LLG_CUDA.cu	/^complex<float> *Gxx_1d_cmplx = NULL,  *Gxy_1d_cmplx = NULL,  *Gxz_1d_cmplx = NULL, $/;"	v
Gxz_1d_cmplx	LLG_CUDA.cu	/^complex<float> *Gxx_1d_cmplx = NULL,  *Gxy_1d_cmplx = NULL,  *Gxz_1d_cmplx = NULL, $/;"	v
Gyx_1d_cmplx	LLG_CUDA.cu	/^               *Gyx_1d_cmplx = NULL,  *Gyy_1d_cmplx = NULL,  *Gyz_1d_cmplx = NULL, $/;"	v
Gyy_1d_cmplx	LLG_CUDA.cu	/^               *Gyx_1d_cmplx = NULL,  *Gyy_1d_cmplx = NULL,  *Gyz_1d_cmplx = NULL, $/;"	v
Gyz_1d_cmplx	LLG_CUDA.cu	/^               *Gyx_1d_cmplx = NULL,  *Gyy_1d_cmplx = NULL,  *Gyz_1d_cmplx = NULL, $/;"	v
Gzx_1d_cmplx	LLG_CUDA.cu	/^               *Gzx_1d_cmplx = NULL,  *Gzy_1d_cmplx = NULL,  *Gzz_1d_cmplx = NULL;$/;"	v
Gzy_1d_cmplx	LLG_CUDA.cu	/^               *Gzx_1d_cmplx = NULL,  *Gzy_1d_cmplx = NULL,  *Gzz_1d_cmplx = NULL;$/;"	v
Gzz_1d_cmplx	LLG_CUDA.cu	/^               *Gzx_1d_cmplx = NULL,  *Gzy_1d_cmplx = NULL,  *Gzz_1d_cmplx = NULL;$/;"	v
HALFspace	qvoronoi/libqhull.h	/^  boolT HALFspace;        \/* true 'Hn,n,n' if halfspace intersection *\/$/;"	m	struct:qhT
HORIZONTAL	clipper/clipper.cu	62;"	d	file:
Ha_field	Ha_field.h	/^bool Ha_field(double hh, double* dev_x_theta, double* dev_x_phi, dim3 grids1, dim3 blocks1)$/;"	f
Happl	Parameters.h	/^static double  Happl;$/;"	v
Happl_x	LLG_CUDA.cu	/^	   *Happl_x = NULL, *Happl_y = NULL, *Happl_z = NULL,$/;"	v
Happl_x_temp	LLG_CUDA.cu	/^       *Happl_x_temp = NULL, *Happl_y_temp = NULL, *Happl_z_temp = NULL,$/;"	v
Happl_y	LLG_CUDA.cu	/^	   *Happl_x = NULL, *Happl_y = NULL, *Happl_z = NULL,$/;"	v
Happl_y_temp	LLG_CUDA.cu	/^       *Happl_x_temp = NULL, *Happl_y_temp = NULL, *Happl_z_temp = NULL,$/;"	v
Happl_z	LLG_CUDA.cu	/^	   *Happl_x = NULL, *Happl_y = NULL, *Happl_z = NULL,$/;"	v
Happl_z_temp	LLG_CUDA.cu	/^       *Happl_x_temp = NULL, *Happl_y_temp = NULL, *Happl_z_temp = NULL,$/;"	v
Hd_x_1d	LLG_CUDA.cu	/^double *Hd_x_1d = NULL, *Hd_y_1d = NULL, *Hd_z_1d = NULL;$/;"	v
Hd_x_1d_cmplx	LLG_CUDA.cu	/^complex<float> *Hd_x_1d_cmplx = NULL, *Hd_y_1d_cmplx = NULL, *Hd_z_1d_cmplx = NULL;$/;"	v
Hd_x_1d_shift	LLG_CUDA.cu	/^double *Hd_x_1d_shift = NULL, *Hd_y_1d_shift = NULL, *Hd_z_1d_shift = NULL;$/;"	v
Hd_y_1d	LLG_CUDA.cu	/^double *Hd_x_1d = NULL, *Hd_y_1d = NULL, *Hd_z_1d = NULL;$/;"	v
Hd_y_1d_cmplx	LLG_CUDA.cu	/^complex<float> *Hd_x_1d_cmplx = NULL, *Hd_y_1d_cmplx = NULL, *Hd_z_1d_cmplx = NULL;$/;"	v
Hd_y_1d_shift	LLG_CUDA.cu	/^double *Hd_x_1d_shift = NULL, *Hd_y_1d_shift = NULL, *Hd_z_1d_shift = NULL;$/;"	v
Hd_z_1d	LLG_CUDA.cu	/^double *Hd_x_1d = NULL, *Hd_y_1d = NULL, *Hd_z_1d = NULL;$/;"	v
Hd_z_1d_cmplx	LLG_CUDA.cu	/^complex<float> *Hd_x_1d_cmplx = NULL, *Hd_y_1d_cmplx = NULL, *Hd_z_1d_cmplx = NULL;$/;"	v
Hd_z_1d_shift	LLG_CUDA.cu	/^double *Hd_x_1d_shift = NULL, *Hd_y_1d_shift = NULL, *Hd_z_1d_shift = NULL;$/;"	v
HeadDist	Parameters.h	/^static int HeadDist = -1, NextBit = 0;    $/;"	v
Hint12_x_SingleGrain	Parameters.h	/^			   *Hint12_x_SingleGrain = NULL, *Hint12_y_SingleGrain = NULL, *Hint12_z_SingleGrain = NULL;$/;"	v
Hint12_y_SingleGrain	Parameters.h	/^			   *Hint12_x_SingleGrain = NULL, *Hint12_y_SingleGrain = NULL, *Hint12_z_SingleGrain = NULL;$/;"	v
Hint12_z_SingleGrain	Parameters.h	/^			   *Hint12_x_SingleGrain = NULL, *Hint12_y_SingleGrain = NULL, *Hint12_z_SingleGrain = NULL;$/;"	v
Hint_x	Parameters.h	/^static double  *Hint_x = NULL, *Hint_y = NULL, *Hint_z = NULL; $/;"	v
Hint_y	Parameters.h	/^static double  *Hint_x = NULL, *Hint_y = NULL, *Hint_z = NULL; $/;"	v
Hint_z	Parameters.h	/^static double  *Hint_x = NULL, *Hint_y = NULL, *Hint_z = NULL; $/;"	v
Hms	FFT_Function_Set.cu	/^int Hms(int lx_zero_pad, int ly_zero_pad, int lz_zero_pad,$/;"	f
HorzSegmentsOverlap	clipper/clipper.cu	/^bool HorzSegmentsOverlap(cInt seg1a, cInt seg1b, cInt seg2a, cInt seg2b)$/;"	f	namespace:ClipperLib
IStracing	qvoronoi/libqhull.h	/^  int   IStracing;        \/* trace execution, 0=none, 1=least, 4=most, -1=events *\/$/;"	m	struct:qhT
IStracing	qvoronoi/mem.h	/^  int      IStracing;         \/* =5 if tracing memory allocations *\/$/;"	m	struct:qhmemT
Idx	clipper/clipper.cu	/^  int       Idx;$/;"	m	struct:ClipperLib::OutPt	file:
Idx	clipper/clipper.cu	/^  int       Idx;$/;"	m	struct:ClipperLib::OutRec	file:
Index	clipper/clipper.h	/^    unsigned Index; \/\/node index in Parent.Childs$/;"	m	class:ClipperLib::PolyNode
IniScalFact	Parameters_input.cu	/^			  IniScalFact;$/;"	v
Ini_THETA_Down	Parameters.h	17;"	d
Ini_THETA_Up	Parameters.h	16;"	d
InitEdge	clipper/clipper.cu	/^inline void InitEdge(TEdge* e, TEdge* eNext, TEdge* ePrev, const IntPoint& Pt)$/;"	f	namespace:ClipperLib
InitEdge2	clipper/clipper.cu	/^void InitEdge2(TEdge& e, PolyType Pt)$/;"	f	namespace:ClipperLib
InitOptions	clipper/clipper.h	/^enum InitOptions {ioReverseSolution = 1, ioStrictlySimple = 2, ioPreserveCollinear = 4};$/;"	g	namespace:ClipperLib
Input	Parameters_input.cu	/^int Input(void)$/;"	f
Input_FieldProfile	Parameters_input.cu	/^int Input_FieldProfile(int EXT_FP_PROFILE){$/;"	f
Input_FieldSeq	Parameters_input.cu	/^int Input_FieldSeq(int EXT_FP_PROFILE){$/;"	f
Input_Float_1D_Format_1col	Outputs.cu	/^bool Input_Float_1D_Format_1col(int mNx, int mNy, int mNz, double *varArray1, char filename[]){$/;"	f
Input_Indicator_1D_Format	Outputs.cu	/^bool Input_Indicator_1D_Format(int mNx, int mNy, int mNz, int *varArray1, int *varArray2, int *varArray3, double *varArray4, double *varArray5, double *varArray6, int *varArray7, char filename[]){$/;"	f
Input_Mag0	Parameters_input.cu	/^int Input_Mag0(int PRE_DEFINED_PATTERN){$/;"	f
InsertEdgeIntoAEL	clipper/clipper.cu	/^void Clipper::InsertEdgeIntoAEL(TEdge *edge, TEdge* startEdge)$/;"	f	class:ClipperLib::Clipper
InsertLocalMinimaIntoAEL	clipper/clipper.cu	/^void Clipper::InsertLocalMinimaIntoAEL(const cInt botY)$/;"	f	class:ClipperLib::Clipper
InsertScanbeam	clipper/clipper.cu	/^void Clipper::InsertScanbeam(const cInt Y)$/;"	f	class:ClipperLib::Clipper
Int128	clipper/clipper.cu	/^    Int128(const Int128 &val): lo(val.lo), hi(val.hi){}$/;"	f	class:ClipperLib::Int128
Int128	clipper/clipper.cu	/^    Int128(const long64& _hi, const ulong64& _lo): lo(_lo), hi(_hi){}$/;"	f	class:ClipperLib::Int128
Int128	clipper/clipper.cu	/^    Int128(long64 _lo = 0)$/;"	f	class:ClipperLib::Int128
Int128	clipper/clipper.cu	/^class Int128$/;"	c	namespace:ClipperLib	file:
Int128Mul	clipper/clipper.cu	/^Int128 Int128Mul (long64 lhs, long64 rhs)$/;"	f	namespace:ClipperLib
IntPoint	clipper/clipper.h	/^  IntPoint(cInt x = 0, cInt y = 0): X(x), Y(y) {};$/;"	f	struct:ClipperLib::IntPoint
IntPoint	clipper/clipper.h	/^  IntPoint(cInt x = 0, cInt y = 0, cInt z = 0): X(x), Y(y), Z(z) {};$/;"	f	struct:ClipperLib::IntPoint
IntPoint	clipper/clipper.h	/^struct IntPoint {$/;"	s	namespace:ClipperLib
IntRect	clipper/clipper.h	/^struct IntRect { cInt left; cInt top; cInt right; cInt bottom; };$/;"	s	namespace:ClipperLib
IntersectEdges	clipper/clipper.cu	/^void Clipper::IntersectEdges(TEdge *e1, TEdge *e2, IntPoint &Pt)$/;"	f	class:ClipperLib::Clipper
IntersectList	clipper/clipper.h	/^typedef std::vector < IntersectNode* > IntersectList;$/;"	t	namespace:ClipperLib
IntersectListSort	clipper/clipper.cu	/^bool IntersectListSort(IntersectNode* node1, IntersectNode* node2)$/;"	f	namespace:ClipperLib
IntersectNode	clipper/clipper.cu	/^struct IntersectNode {$/;"	s	namespace:ClipperLib	file:
IntersectPoint	clipper/clipper.cu	/^void IntersectPoint(TEdge &Edge1, TEdge &Edge2, IntPoint &ip)$/;"	f	namespace:ClipperLib
IsContributing	clipper/clipper.cu	/^bool Clipper::IsContributing(const TEdge& edge) const$/;"	f	class:ClipperLib::Clipper
IsEvenOddAltFillType	clipper/clipper.cu	/^bool Clipper::IsEvenOddAltFillType(const TEdge& edge) const$/;"	f	class:ClipperLib::Clipper
IsEvenOddFillType	clipper/clipper.cu	/^bool Clipper::IsEvenOddFillType(const TEdge& edge) const$/;"	f	class:ClipperLib::Clipper
IsHole	clipper/clipper.cu	/^  bool      IsHole;$/;"	m	struct:ClipperLib::OutRec	file:
IsHole	clipper/clipper.cu	/^bool PolyNode::IsHole() const$/;"	f	class:ClipperLib::PolyNode
IsHorizontal	clipper/clipper.cu	/^inline bool IsHorizontal(TEdge &e)$/;"	f	namespace:ClipperLib
IsIntermediate	clipper/clipper.cu	/^inline bool IsIntermediate(TEdge *e, const cInt Y)$/;"	f	namespace:ClipperLib
IsMaxima	clipper/clipper.cu	/^inline bool IsMaxima(TEdge *e, const cInt Y)$/;"	f	namespace:ClipperLib
IsMinima	clipper/clipper.cu	/^inline bool IsMinima(TEdge *e)$/;"	f	namespace:ClipperLib
IsOpen	clipper/clipper.cu	/^  bool      IsOpen;$/;"	m	struct:ClipperLib::OutRec	file:
IsOpen	clipper/clipper.cu	/^bool PolyNode::IsOpen() const$/;"	f	class:ClipperLib::PolyNode
JOGGLEmax	qvoronoi/libqhull.h	/^  realT JOGGLEmax;        \/* set 'QJn' if randomly joggle input *\/$/;"	m	struct:qhT
Jitter_Calc	MiscFunctions.cu	/^bool Jitter_Calc(){$/;"	f
Join	clipper/clipper.cu	/^struct Join {$/;"	s	namespace:ClipperLib	file:
JoinCommonEdges	clipper/clipper.cu	/^void Clipper::JoinCommonEdges()$/;"	f	class:ClipperLib::Clipper
JoinHorz	clipper/clipper.cu	/^bool JoinHorz(OutPt* op1, OutPt* op1b, OutPt* op2, OutPt* op2b,$/;"	f	namespace:ClipperLib
JoinList	clipper/clipper.h	/^typedef std::vector < Join* > JoinList;$/;"	t	namespace:ClipperLib
JoinPoints	clipper/clipper.cu	/^bool Clipper::JoinPoints(Join *j, OutRec* outRec1, OutRec* outRec2)$/;"	f	class:ClipperLib::Clipper
JoinType	clipper/clipper.h	/^enum JoinType {jtSquare, jtRound, jtMiter};$/;"	g	namespace:ClipperLib
KEEParea	qvoronoi/libqhull.h	/^  int   KEEParea;         \/* 'PAn' number of largest facets to keep *\/$/;"	m	struct:qhT
KEEPcoplanar	qvoronoi/libqhull.h	/^  boolT KEEPcoplanar;     \/* true 'Qc' if keeping nearest facet for coplanar points *\/$/;"	m	struct:qhT
KEEPinside	qvoronoi/libqhull.h	/^  boolT KEEPinside;       \/* true 'Qi' if keeping nearest facet for inside points$/;"	m	struct:qhT
KEEPmerge	qvoronoi/libqhull.h	/^  int   KEEPmerge;        \/* 'PMn' number of facets to keep with most merges *\/$/;"	m	struct:qhT
KEEPminArea	qvoronoi/libqhull.h	/^  realT KEEPminArea;      \/* 'PFn' minimum facet area to keep *\/$/;"	m	struct:qhT
KEEPnearinside	qvoronoi/libqhull.h	/^  boolT KEEPnearinside;   \/* true if near-inside points in coplanarset *\/$/;"	m	struct:qhT
Kernel_CUFFT_M_times_G	LLG_kernel.cu	/^__global__ static void Kernel_CUFFT_M_times_G(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int BLK_SZ_Z, int lx_zero_pad, int ly_zero_pad,$/;"	f	file:
Kernel_Ha_with_Left	LLG_kernel.cu	/^__global__ static void Kernel_Ha_with_Left(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_Ha_with_apron	LLG_kernel.cu	/^__global__ static void Kernel_Ha_with_apron(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_Ha_with_att	LLG_kernel.cu	/^__global__ static void Kernel_Ha_with_att(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_Ha_with_down	LLG_kernel.cu	/^__global__ static void Kernel_Ha_with_down(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_Ha_with_right	LLG_kernel.cu	/^__global__ static void Kernel_Ha_with_right(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_Ha_with_up	LLG_kernel.cu	/^__global__ static void Kernel_Ha_with_up(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_Hint_field	LLG_kernel.cu	/^__global__ static void Kernel_Hint_field(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy, $/;"	f	file:
Kernel_Hk_field	LLG_kernel.cu	/^__global__ static void Kernel_Hk_field(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_Hth_field	LLG_kernel.cu	/^__global__ static void Kernel_Hth_field(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_Ini_indicator_temp	LLG_kernel.cu	/^__global__ static void Kernel_Ini_indicator_temp(int BLK_SIZE_X, int BLK_SIZE_Y, int BLK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_Initialization	LLG_kernel.cu	/^__global__ static void Kernel_Initialization(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_Initialization_AFC	LLG_kernel.cu	/^__global__ static void Kernel_Initialization_AFC(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_Initialization_Cplx	LLG_kernel.cu	/^__global__ static void Kernel_Initialization_Cplx(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_M_A_with_apron	LLG_kernel.cu	/^__global__ static void Kernel_M_A_with_apron(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy, int mNz,$/;"	f	file:
Kernel_a_theta_phi	LLG_kernel.cu	/^__global__ static void Kernel_a_theta_phi(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_b_theta_phi	LLG_kernel.cu	/^__global__ static void Kernel_b_theta_phi(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_c_theta_phi	LLG_kernel.cu	/^__global__ static void Kernel_c_theta_phi(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_d_theta_phi	LLG_kernel.cu	/^__global__ static void Kernel_d_theta_phi(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_d_theta_phi_d_t	LLG_kernel.cu	/^__global__ static void Kernel_d_theta_phi_d_t(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Kernel_dev_indicator_with_apron	LLG_kernel.cu	/^__global__ static void Kernel_dev_indicator_with_apron(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy, int mNz,$/;"	f	file:
Kernel_initiate_dev_M_temp	LLG_kernel.cu	/^__global__ static void Kernel_initiate_dev_M_temp(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy, int mNz,$/;"	f	file:
Kernel_time_increment	LLG_kernel.cu	/^__global__ static void Kernel_time_increment(int BLOCK_SIZE_X, int BLOCK_SIZE_Y, int BLOCK_SIZE_Z, int mNx, int mNy,$/;"	f	file:
Ku	Parameters.h	/^double static Aex = 1.00e-6, Ku = 4.14e7, Ms = 925.07, Ms_soft = 1400; $/;"	v
L1_Aex	Parameters_input.cu	/^double L1_Ms, L1_Hk, L1_Ku,  L1_Aex, L1_alpha, L1_Hex_L, $/;"	v
L1_Hex_L	Parameters_input.cu	/^double L1_Ms, L1_Hk, L1_Ku,  L1_Aex, L1_alpha, L1_Hex_L, $/;"	v
L1_Hex_l	Parameters_input.cu	/^float  L1_Hex_l, BL12, BL12_Hex_l,$/;"	v
L1_Hk	Parameters_input.cu	/^double L1_Ms, L1_Hk, L1_Ku,  L1_Aex, L1_alpha, L1_Hex_L, $/;"	v
L1_Ku	Parameters_input.cu	/^double L1_Ms, L1_Hk, L1_Ku,  L1_Aex, L1_alpha, L1_Hex_L, $/;"	v
L1_Ms	Parameters_input.cu	/^double L1_Ms, L1_Hk, L1_Ku,  L1_Aex, L1_alpha, L1_Hex_L, $/;"	v
L1_alpha	Parameters_input.cu	/^double L1_Ms, L1_Hk, L1_Ku,  L1_Aex, L1_alpha, L1_Hex_L, $/;"	v
L2_Aex	Parameters_input.cu	/^       L2_Ms, L2_Hk, L2_Ku,  L2_Aex, L2_alpha, L2_Hex_L,$/;"	v
L2_Hex_L	Parameters_input.cu	/^       L2_Ms, L2_Hk, L2_Ku,  L2_Aex, L2_alpha, L2_Hex_L,$/;"	v
L2_Hex_l	Parameters_input.cu	/^       L2_Hex_l, BL23, BL23_Hex_l,$/;"	v
L2_Hk	Parameters_input.cu	/^       L2_Ms, L2_Hk, L2_Ku,  L2_Aex, L2_alpha, L2_Hex_L,$/;"	v
L2_Ku	Parameters_input.cu	/^       L2_Ms, L2_Hk, L2_Ku,  L2_Aex, L2_alpha, L2_Hex_L,$/;"	v
L2_Ms	Parameters_input.cu	/^       L2_Ms, L2_Hk, L2_Ku,  L2_Aex, L2_alpha, L2_Hex_L,$/;"	v
L2_alpha	Parameters_input.cu	/^       L2_Ms, L2_Hk, L2_Ku,  L2_Aex, L2_alpha, L2_Hex_L,$/;"	v
L3_Aex	Parameters_input.cu	/^       L3_Ms, L3_Hk, L3_Ku,  L3_Aex, L3_alpha, L3_Hex_L,$/;"	v
L3_Hex_L	Parameters_input.cu	/^       L3_Ms, L3_Hk, L3_Ku,  L3_Aex, L3_alpha, L3_Hex_L,$/;"	v
L3_Hex_l	Parameters_input.cu	/^       L3_Hex_l, BL34, BL34_Hex_l,$/;"	v
L3_Hk	Parameters_input.cu	/^       L3_Ms, L3_Hk, L3_Ku,  L3_Aex, L3_alpha, L3_Hex_L,$/;"	v
L3_Ku	Parameters_input.cu	/^       L3_Ms, L3_Hk, L3_Ku,  L3_Aex, L3_alpha, L3_Hex_L,$/;"	v
L3_Ms	Parameters_input.cu	/^       L3_Ms, L3_Hk, L3_Ku,  L3_Aex, L3_alpha, L3_Hex_L,$/;"	v
L3_alpha	Parameters_input.cu	/^       L3_Ms, L3_Hk, L3_Ku,  L3_Aex, L3_alpha, L3_Hex_L,$/;"	v
L4_Aex	Parameters_input.cu	/^	   L4_Ms, L4_Hk, L4_Ku,  L4_Aex, L4_alpha, L4_Hex_L,$/;"	v
L4_Hex_L	Parameters_input.cu	/^	   L4_Ms, L4_Hk, L4_Ku,  L4_Aex, L4_alpha, L4_Hex_L,$/;"	v
L4_Hex_l	Parameters_input.cu	/^	   L4_Hex_l, BL45, BL45_Hex_l,$/;"	v
L4_Hk	Parameters_input.cu	/^	   L4_Ms, L4_Hk, L4_Ku,  L4_Aex, L4_alpha, L4_Hex_L,$/;"	v
L4_Ku	Parameters_input.cu	/^	   L4_Ms, L4_Hk, L4_Ku,  L4_Aex, L4_alpha, L4_Hex_L,$/;"	v
L4_Ms	Parameters_input.cu	/^	   L4_Ms, L4_Hk, L4_Ku,  L4_Aex, L4_alpha, L4_Hex_L,$/;"	v
L4_alpha	Parameters_input.cu	/^	   L4_Ms, L4_Hk, L4_Ku,  L4_Aex, L4_alpha, L4_Hex_L,$/;"	v
L5_Aex	Parameters_input.cu	/^	   L5_Ms, L5_Hk, L5_Ku,  L5_Aex, L5_alpha, L5_Hex_L,$/;"	v
L5_Hex_L	Parameters_input.cu	/^	   L5_Ms, L5_Hk, L5_Ku,  L5_Aex, L5_alpha, L5_Hex_L,$/;"	v
L5_Hex_l	Parameters_input.cu	/^	   L5_Hex_l, BL56, BL56_Hex_l,$/;"	v
L5_Hk	Parameters_input.cu	/^	   L5_Ms, L5_Hk, L5_Ku,  L5_Aex, L5_alpha, L5_Hex_L,$/;"	v
L5_Ku	Parameters_input.cu	/^	   L5_Ms, L5_Hk, L5_Ku,  L5_Aex, L5_alpha, L5_Hex_L,$/;"	v
L5_Ms	Parameters_input.cu	/^	   L5_Ms, L5_Hk, L5_Ku,  L5_Aex, L5_alpha, L5_Hex_L,$/;"	v
L5_alpha	Parameters_input.cu	/^	   L5_Ms, L5_Hk, L5_Ku,  L5_Aex, L5_alpha, L5_Hex_L,$/;"	v
L6_Aex	Parameters_input.cu	/^	   L6_Ms, L6_Hk, L6_Ku,  L6_Aex, L6_alpha, L6_Hex_L,$/;"	v
L6_Hex_L	Parameters_input.cu	/^	   L6_Ms, L6_Hk, L6_Ku,  L6_Aex, L6_alpha, L6_Hex_L,$/;"	v
L6_Hex_l	Parameters_input.cu	/^	   L6_Hex_l;$/;"	v
L6_Hk	Parameters_input.cu	/^	   L6_Ms, L6_Hk, L6_Ku,  L6_Aex, L6_alpha, L6_Hex_L,$/;"	v
L6_Ku	Parameters_input.cu	/^	   L6_Ms, L6_Hk, L6_Ku,  L6_Aex, L6_alpha, L6_Hex_L,$/;"	v
L6_Ms	Parameters_input.cu	/^	   L6_Ms, L6_Hk, L6_Ku,  L6_Aex, L6_alpha, L6_Hex_L,$/;"	v
L6_alpha	Parameters_input.cu	/^	   L6_Ms, L6_Hk, L6_Ku,  L6_Aex, L6_alpha, L6_Hex_L,$/;"	v
LASTsize	qvoronoi/mem.h	/^  int      LASTsize;          \/* last size in free list table *\/$/;"	m	struct:qhmemT
LeftBound	clipper/clipper.cu	/^  TEdge        *LeftBound;$/;"	m	struct:ClipperLib::LocalMinimum	file:
LocMinSorter	clipper/clipper.cu	/^struct LocMinSorter$/;"	s	namespace:ClipperLib	file:
LocalMinimum	clipper/clipper.cu	/^struct LocalMinimum {$/;"	s	namespace:ClipperLib	file:
M1_z_SingleGrain	Parameters.h	/^			   *Mz_LayerLayer = NULL, *M1_z_SingleGrain = NULL, $/;"	v
MAX_CHAR_SZ	Parameters_input.h	11;"	d
MAX_vdim	qvoronoi/libqhull.h	389;"	d
MAXabs_coord	qvoronoi/libqhull.h	/^  realT MAXabs_coord;     \/* max absolute coordinate *\/$/;"	m	struct:qhT
MAXcoplanar	qvoronoi/libqhull.h	/^  realT MAXcoplanar;      \/* 'Un' max distance below a facet to be coplanar*\/$/;"	m	struct:qhT
MAXdim	qvoronoi/rboxlib.cu	32;"	d	file:
MAXlastcoord	qvoronoi/libqhull.h	/^  realT MAXlastcoord;     \/* max last coordinate for qh_scalelast *\/$/;"	m	struct:qhT
MAXsumcoord	qvoronoi/libqhull.h	/^  realT MAXsumcoord;      \/* max sum of coordinates *\/$/;"	m	struct:qhT
MAXwidth	qvoronoi/libqhull.h	/^  realT MAXwidth;         \/* max rectilinear width of point coordinates *\/$/;"	m	struct:qhT
MAYdebugx	qvoronoi/stat.h	355;"	d
MERGEexact	qvoronoi/libqhull.h	/^  boolT MERGEexact;       \/* true 'Qx' if exact merges (coplanar, degen, dupridge, flipped) *\/$/;"	m	struct:qhT
MERGEindependent	qvoronoi/libqhull.h	/^  boolT MERGEindependent; \/* true 'Q2' if merging independent sets *\/$/;"	m	struct:qhT
MERGEvertices	qvoronoi/libqhull.h	/^  boolT MERGEvertices;    \/* true 'Q3' if merging redundant vertices *\/$/;"	m	struct:qhT
MERGING	qvoronoi/libqhull.h	/^  boolT MERGING;          \/* true if exact-, pre- or post-merging, with angle and centrum tests *\/$/;"	m	struct:qhT
MH_LOOP	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
MINdenom	qvoronoi/libqhull.h	/^  realT MINdenom;         \/*    use divzero if denominator < MINdenom *\/$/;"	m	struct:qhT
MINdenom_1	qvoronoi/libqhull.h	/^  realT MINdenom_1;       \/* min. abs. value for 1\/x *\/$/;"	m	struct:qhT
MINdenom_1_2	qvoronoi/libqhull.h	/^  realT MINdenom_1_2;     \/* min. abs. val for 1\/x that allows normalization *\/$/;"	m	struct:qhT
MINdenom_2	qvoronoi/libqhull.h	/^  realT MINdenom_2;       \/*    use divzero if denominator < MINdenom_2 *\/$/;"	m	struct:qhT
MINlastcoord	qvoronoi/libqhull.h	/^  realT MINlastcoord;     \/* min. last coordinate for qh_scalelast *\/$/;"	m	struct:qhT
MINoutside	qvoronoi/libqhull.h	/^  realT   MINoutside;     \/*   'Wn' min. distance for an outside point *\/$/;"	m	struct:qhT
MINvisible	qvoronoi/libqhull.h	/^  realT MINvisible;       \/* 'Vn' min. distance for a facet to be visible *\/$/;"	m	struct:qhT
MODEL	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
MRGanglecoplanar	qvoronoi/merge.h	/^  MRGanglecoplanar,     \/* angle coplanar *\/$/;"	e	enum:__anon5
MRGconcave	qvoronoi/merge.h	/^  MRGconcave,           \/* concave ridge *\/$/;"	e	enum:__anon5
MRGcoplanar	qvoronoi/merge.h	/^  MRGcoplanar,          \/* centrum coplanar *\/$/;"	e	enum:__anon5
MRGdegen	qvoronoi/merge.h	/^  MRGdegen,             \/* degenerate facet (!enough neighbors) facet1 == facet2 *\/$/;"	e	enum:__anon5
MRGflip	qvoronoi/merge.h	/^  MRGflip,              \/* flipped facet. facet1 == facet2 *\/$/;"	e	enum:__anon5
MRGmirror	qvoronoi/merge.h	/^  MRGmirror,            \/* mirror facet from qh_triangulate *\/$/;"	e	enum:__anon5
MRGnone	qvoronoi/merge.h	/^  MRGnone= 0,$/;"	e	enum:__anon5
MRGredundant	qvoronoi/merge.h	/^  MRGredundant,         \/* redundant facet (vertex subset) *\/$/;"	e	enum:__anon5
MRGridge	qvoronoi/merge.h	/^  MRGridge,             \/* duplicate ridge (qh_MERGEridge) *\/$/;"	e	enum:__anon5
MSG_ERROR	qvoronoi/user.h	64;"	d
MSG_FIXUP	qvoronoi/user.h	69;"	d
MSG_MAXLEN	qvoronoi/user.h	70;"	d
MSG_OUTPUT	qvoronoi/user.h	67;"	d
MSG_QHULL_ERROR	qvoronoi/user.h	68;"	d
MSG_STDERR	qvoronoi/user.h	66;"	d
MSG_TRACE0	qvoronoi/user.h	58;"	d
MSG_TRACE1	qvoronoi/user.h	59;"	d
MSG_TRACE2	qvoronoi/user.h	60;"	d
MSG_TRACE3	qvoronoi/user.h	61;"	d
MSG_TRACE4	qvoronoi/user.h	62;"	d
MSG_TRACE5	qvoronoi/user.h	63;"	d
MSG_WARNING	qvoronoi/user.h	65;"	d
MTRAND_H	mtrand.h	46;"	d
MTRAND_H	random/mtrand.h	3;"	d
MTRand	mtrand.h	/^  MTRand() : MTRand_int32() {}$/;"	f	class:MTRand
MTRand	mtrand.h	/^  MTRand(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand
MTRand	mtrand.h	/^  MTRand(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand
MTRand	mtrand.h	/^class MTRand : public MTRand_int32 {$/;"	c
MTRand	random/mtrand.h	/^  MTRand() : MTRand_int32() {}$/;"	f	class:MTRand
MTRand	random/mtrand.h	/^  MTRand(const uint32_t* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand
MTRand	random/mtrand.h	/^  MTRand(uint32_t seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand
MTRand	random/mtrand.h	/^class MTRand : public MTRand_int32 {$/;"	c
MTRand53	mtrand.h	/^  MTRand53() : MTRand_int32() {}$/;"	f	class:MTRand53
MTRand53	mtrand.h	/^  MTRand53(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand53
MTRand53	mtrand.h	/^  MTRand53(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand53
MTRand53	mtrand.h	/^class MTRand53 : public MTRand_int32 {$/;"	c
MTRand53	random/mtrand.h	/^  MTRand53() : MTRand_int32() {}$/;"	f	class:MTRand53
MTRand53	random/mtrand.h	/^  MTRand53(const uint32_t* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand53
MTRand53	random/mtrand.h	/^  MTRand53(uint32_t seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand53
MTRand53	random/mtrand.h	/^class MTRand53 : public MTRand_int32 {$/;"	c
MTRand_closed	mtrand.h	/^  MTRand_closed() : MTRand_int32() {}$/;"	f	class:MTRand_closed
MTRand_closed	mtrand.h	/^  MTRand_closed(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand_closed
MTRand_closed	mtrand.h	/^  MTRand_closed(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand_closed
MTRand_closed	mtrand.h	/^class MTRand_closed : public MTRand_int32 {$/;"	c
MTRand_closed	random/mtrand.h	/^  MTRand_closed() : MTRand_int32() {}$/;"	f	class:MTRand_closed
MTRand_closed	random/mtrand.h	/^  MTRand_closed(const uint32_t* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand_closed
MTRand_closed	random/mtrand.h	/^  MTRand_closed(uint32_t seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand_closed
MTRand_closed	random/mtrand.h	/^class MTRand_closed : public MTRand_int32 {$/;"	c
MTRand_int32	mtrand.h	/^  MTRand_int32() { if (!init) seed(5489UL); init = true; }$/;"	f	class:MTRand_int32
MTRand_int32	mtrand.h	/^  MTRand_int32(const unsigned long* array, int size) { seed(array, size); init = true; }$/;"	f	class:MTRand_int32
MTRand_int32	mtrand.h	/^  MTRand_int32(unsigned long s) { seed(s); init = true; }$/;"	f	class:MTRand_int32
MTRand_int32	mtrand.h	/^class MTRand_int32 { \/\/ Mersenne Twister random number generator$/;"	c
MTRand_int32	random/mtrand.h	/^  MTRand_int32() { if (!init) seed(5489UL); init = true; }$/;"	f	class:MTRand_int32
MTRand_int32	random/mtrand.h	/^  MTRand_int32(const uint32_t* array, int size) { seed(array, size); init = true; }$/;"	f	class:MTRand_int32
MTRand_int32	random/mtrand.h	/^  MTRand_int32(uint32_t s) { seed(s); init = true; }$/;"	f	class:MTRand_int32
MTRand_int32	random/mtrand.h	/^class MTRand_int32 { \/\/ Mersenne Twister random number generator$/;"	c
MTRand_open	mtrand.h	/^  MTRand_open() : MTRand_int32() {}$/;"	f	class:MTRand_open
MTRand_open	mtrand.h	/^  MTRand_open(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand_open
MTRand_open	mtrand.h	/^  MTRand_open(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand_open
MTRand_open	mtrand.h	/^class MTRand_open : public MTRand_int32 {$/;"	c
MTRand_open	random/mtrand.h	/^  MTRand_open() : MTRand_int32() {}$/;"	f	class:MTRand_open
MTRand_open	random/mtrand.h	/^  MTRand_open(const uint32_t* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand_open
MTRand_open	random/mtrand.h	/^  MTRand_open(uint32_t seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand_open
MTRand_open	random/mtrand.h	/^class MTRand_open : public MTRand_int32 {$/;"	c
M_PI	granular_media.cu	16;"	d	file:
M_PI	sro_media.cu	16;"	d	file:
M_bar	Parameters.h	/^static double  *M_bar = NULL,$/;"	v
M_bar_t	Parameters.h	/^static double M_bar_t, *Mx_bar_t, My_bar_t, Mz_bar_t;$/;"	v
Mag0	LLG_CUDA.cu	/^double *Mag0[3];$/;"	v
MinimaList	clipper/clipper.h	/^  typedef std::vector<LocalMinimum> MinimaList;$/;"	t	class:ClipperLib::ClipperBase
Minkowski	clipper/clipper.cu	/^void Minkowski(const Path& poly, const Path& path, $/;"	f	namespace:ClipperLib
MinkowskiDiff	clipper/clipper.cu	/^void MinkowskiDiff(const Path& poly1, const Path& poly2, Paths& solution)$/;"	f	namespace:ClipperLib
MinkowskiSum	clipper/clipper.cu	/^void MinkowskiSum(const Path& pattern, const Path& path, Paths& solution, bool pathIsClosed)$/;"	f	namespace:ClipperLib
MinkowskiSum	clipper/clipper.cu	/^void MinkowskiSum(const Path& pattern, const Paths& paths, Paths& solution, bool pathIsClosed)$/;"	f	namespace:ClipperLib
MiterLimit	clipper/clipper.h	/^  double MiterLimit;$/;"	m	class:ClipperLib::ClipperOffset
Moving_Head	Moving_Head.h	/^bool Moving_Head(int t)$/;"	f
Ms	Parameters.h	/^double static Aex = 1.00e-6, Ku = 4.14e7, Ms = 925.07, Ms_soft = 1400; $/;"	v
Ms_soft	Parameters.h	/^double static Aex = 1.00e-6, Ku = 4.14e7, Ms = 925.07, Ms_soft = 1400; $/;"	v
Mx	LLG_CUDA.cu	/^double  *Mx = NULL, *My = NULL, *Mz = NULL; $/;"	v
Mx_1d_cmplx	LLG_CUDA.cu	/^complex<float> *Mx_1d_cmplx = NULL,   *My_1d_cmplx = NULL,   *Mz_1d_cmplx = NULL;$/;"	v
Mx_bar	LLG_CUDA.cu	/^		*Mx_bar = NULL,  *My_bar = NULL,  *Mz_bar = NULL,$/;"	v
Mx_bar1	LLG_CUDA.cu	/^double  *Mx_bar1 = NULL, *My_bar1 = NULL, *Mz_bar1 = NULL, $/;"	v
Mx_bar2	LLG_CUDA.cu	/^        *Mx_bar2 = NULL, *My_bar2 = NULL, *Mz_bar2 = NULL,$/;"	v
Mx_bar3	LLG_CUDA.cu	/^		*Mx_bar3 = NULL, *My_bar3 = NULL, *Mz_bar3 = NULL,$/;"	v
Mx_bar4	LLG_CUDA.cu	/^		*Mx_bar4 = NULL, *My_bar4 = NULL, *Mz_bar4 = NULL,$/;"	v
Mx_bar5	LLG_CUDA.cu	/^		*Mx_bar5 = NULL, *My_bar5 = NULL, *Mz_bar5 = NULL,$/;"	v
Mx_bar6	LLG_CUDA.cu	/^		*Mx_bar6 = NULL, *My_bar6 = NULL, *Mz_bar6 = NULL,$/;"	v
Mx_bar_t	Parameters.h	/^static double M_bar_t, *Mx_bar_t, My_bar_t, Mz_bar_t;$/;"	v
Mx_float	Parameters.h	/^static float   *Mx_float = NULL, *My_float = NULL, *Mz_float = NULL;$/;"	v
Mx_t_bar	Parameters.h	/^static double  *Mx_t_bar = NULL, *My_t_bar = NULL, *Mz_t_bar = NULL;$/;"	v
My	LLG_CUDA.cu	/^double  *Mx = NULL, *My = NULL, *Mz = NULL; $/;"	v
My_1d_cmplx	LLG_CUDA.cu	/^complex<float> *Mx_1d_cmplx = NULL,   *My_1d_cmplx = NULL,   *Mz_1d_cmplx = NULL;$/;"	v
My_bar	LLG_CUDA.cu	/^		*Mx_bar = NULL,  *My_bar = NULL,  *Mz_bar = NULL,$/;"	v
My_bar1	LLG_CUDA.cu	/^double  *Mx_bar1 = NULL, *My_bar1 = NULL, *Mz_bar1 = NULL, $/;"	v
My_bar2	LLG_CUDA.cu	/^        *Mx_bar2 = NULL, *My_bar2 = NULL, *Mz_bar2 = NULL,$/;"	v
My_bar3	LLG_CUDA.cu	/^		*Mx_bar3 = NULL, *My_bar3 = NULL, *Mz_bar3 = NULL,$/;"	v
My_bar4	LLG_CUDA.cu	/^		*Mx_bar4 = NULL, *My_bar4 = NULL, *Mz_bar4 = NULL,$/;"	v
My_bar5	LLG_CUDA.cu	/^		*Mx_bar5 = NULL, *My_bar5 = NULL, *Mz_bar5 = NULL,$/;"	v
My_bar6	LLG_CUDA.cu	/^		*Mx_bar6 = NULL, *My_bar6 = NULL, *Mz_bar6 = NULL,$/;"	v
My_bar_t	Parameters.h	/^static double M_bar_t, *Mx_bar_t, My_bar_t, Mz_bar_t;$/;"	v
My_float	Parameters.h	/^static float   *Mx_float = NULL, *My_float = NULL, *Mz_float = NULL;$/;"	v
My_t_bar	Parameters.h	/^static double  *Mx_t_bar = NULL, *My_t_bar = NULL, *Mz_t_bar = NULL;$/;"	v
Mz	LLG_CUDA.cu	/^double  *Mx = NULL, *My = NULL, *Mz = NULL; $/;"	v
Mz_1d_cmplx	LLG_CUDA.cu	/^complex<float> *Mx_1d_cmplx = NULL,   *My_1d_cmplx = NULL,   *Mz_1d_cmplx = NULL;$/;"	v
Mz_CGC	LLG_CUDA.cu	/^		*Mz_CGC = NULL;$/;"	v
Mz_LayerLayer	Parameters.h	/^			   *Mz_LayerLayer = NULL, *M1_z_SingleGrain = NULL, $/;"	v
Mz_bar	LLG_CUDA.cu	/^		*Mx_bar = NULL,  *My_bar = NULL,  *Mz_bar = NULL,$/;"	v
Mz_bar1	LLG_CUDA.cu	/^double  *Mx_bar1 = NULL, *My_bar1 = NULL, *Mz_bar1 = NULL, $/;"	v
Mz_bar2	LLG_CUDA.cu	/^        *Mx_bar2 = NULL, *My_bar2 = NULL, *Mz_bar2 = NULL,$/;"	v
Mz_bar3	LLG_CUDA.cu	/^		*Mx_bar3 = NULL, *My_bar3 = NULL, *Mz_bar3 = NULL,$/;"	v
Mz_bar4	LLG_CUDA.cu	/^		*Mx_bar4 = NULL, *My_bar4 = NULL, *Mz_bar4 = NULL,$/;"	v
Mz_bar5	LLG_CUDA.cu	/^		*Mx_bar5 = NULL, *My_bar5 = NULL, *Mz_bar5 = NULL,$/;"	v
Mz_bar6	LLG_CUDA.cu	/^		*Mx_bar6 = NULL, *My_bar6 = NULL, *Mz_bar6 = NULL,$/;"	v
Mz_bar_t	Parameters.h	/^static double M_bar_t, *Mx_bar_t, My_bar_t, Mz_bar_t;$/;"	v
Mz_float	Parameters.h	/^static float   *Mx_float = NULL, *My_float = NULL, *Mz_float = NULL;$/;"	v
Mz_t_bar	Parameters.h	/^static double  *Mx_t_bar = NULL, *My_t_bar = NULL, *Mz_t_bar = NULL;$/;"	v
Mz_tt	LLG_CUDA.cu	/^double **Mz_tt;$/;"	v
NARROWhull	qvoronoi/libqhull.h	/^  boolT NARROWhull;       \/* set in qh_initialhull if angle < qh_MAXnarrow *\/$/;"	m	struct:qhT
NEAR_ZERO	clipper/clipper.cu	64;"	d	file:
NEARinside	qvoronoi/libqhull.h	/^  realT NEARinside;       \/* keep points for qh_check_maxout if close to facet *\/$/;"	m	struct:qhT
NEARzero	qvoronoi/libqhull.h	/^  realT *NEARzero;        \/* hull_dim array for near zero in gausselim *\/$/;"	m	struct:qhT
NEWfacets	qvoronoi/libqhull.h	/^  boolT NEWfacets;        \/* true while visible facets invalid due to new or merge$/;"	m	struct:qhT
NOerrexit	qvoronoi/libqhull.h	/^  boolT NOerrexit;        \/* true if qh.errexit is not available *\/$/;"	m	struct:qhT
NOnarrow	qvoronoi/libqhull.h	/^  boolT NOnarrow;         \/* true 'Q10' if no special processing for narrow distributions *\/$/;"	m	struct:qhT
NOnearinside	qvoronoi/libqhull.h	/^  boolT NOnearinside;     \/* true 'Q8' if ignore near-inside points when partitioning *\/$/;"	m	struct:qhT
NOpremerge	qvoronoi/libqhull.h	/^  boolT NOpremerge;       \/* true 'Q0' if no defaults for C-0 or Qx *\/$/;"	m	struct:qhT
NULLfield	qvoronoi/stat.cu	635;"	d	file:
NUMsizes	qvoronoi/mem.h	/^  int      NUMsizes;          \/* maximum number of sizes in free list table *\/$/;"	m	struct:qhmemT
Next	clipper/clipper.cu	/^  OutPt    *Next;$/;"	m	struct:ClipperLib::OutPt	file:
Next	clipper/clipper.cu	/^  TEdge *Next;$/;"	m	struct:ClipperLib::TEdge	file:
NextBit	Parameters.h	/^static int HeadDist = -1, NextBit = 0;    $/;"	v
NextInAEL	clipper/clipper.cu	/^  TEdge *NextInAEL;$/;"	m	struct:ClipperLib::TEdge	file:
NextInLML	clipper/clipper.cu	/^  TEdge *NextInLML;$/;"	m	struct:ClipperLib::TEdge	file:
NextInSEL	clipper/clipper.cu	/^  TEdge *NextInSEL;$/;"	m	struct:ClipperLib::TEdge	file:
NodeType	clipper/clipper.cu	/^enum NodeType {ntAny, ntOpen, ntClosed};$/;"	g	namespace:ClipperLib	file:
NonMoving_Head	Moving_Head.h	/^bool NonMoving_Head(int t, double SweepFieldStep1){$/;"	f
ONEmerge	qvoronoi/libqhull.h	/^  realT ONEmerge;         \/* max distance for merging simplicial facets *\/$/;"	m	struct:qhT
ONLYgood	qvoronoi/libqhull.h	/^  boolT ONLYgood;         \/* true 'Qg' if process points with good visible or horizon facets *\/$/;"	m	struct:qhT
ONLYmax	qvoronoi/libqhull.h	/^  boolT ONLYmax;          \/* true 'Qm' if only process points that increase max_outside *\/$/;"	m	struct:qhT
OffPt	clipper/clipper.cu	/^  IntPoint  OffPt;$/;"	m	struct:ClipperLib::Join	file:
OffsetPoint	clipper/clipper.cu	/^void ClipperOffset::OffsetPoint(int j, int& k, JoinType jointype)$/;"	f	class:ClipperLib::ClipperOffset
OpenPathsFromPolyTree	clipper/clipper.cu	/^void OpenPathsFromPolyTree(PolyTree& polytree, Paths& paths)$/;"	f	namespace:ClipperLib
Orientation	clipper/clipper.cu	/^bool Orientation(const Path &poly)$/;"	f	namespace:ClipperLib
OutIdx	clipper/clipper.cu	/^  int OutIdx;$/;"	m	struct:ClipperLib::TEdge	file:
OutPt	clipper/clipper.cu	/^struct OutPt {$/;"	s	namespace:ClipperLib	file:
OutPt1	clipper/clipper.cu	/^  OutPt    *OutPt1;$/;"	m	struct:ClipperLib::Join	file:
OutPt2	clipper/clipper.cu	/^  OutPt    *OutPt2;$/;"	m	struct:ClipperLib::Join	file:
OutRec	clipper/clipper.cu	/^struct OutRec {$/;"	s	namespace:ClipperLib	file:
Output_Float_1D_Format_1col	Outputs.cu	/^bool Output_Float_1D_Format_1col(int Nx, int Ny, int Nz, double *varArray1, char filename[]){$/;"	f
Output_Float_1D_Format_6col	Outputs.cu	/^bool Output_Float_1D_Format_6col(int Nx, int Ny, int Nz, double *varArray1, double *varArray2, double *varArray3, char filename[]){$/;"	f
Output_Float_3D_Format	Outputs.cu	/^bool Output_Float_3D_Format(int Nx, int Ny, int Nz, double *varArray, char filename[]){$/;"	f
Output_Int_1D_Format_1col	Outputs.cu	/^bool Output_Int_1D_Format_1col(int Nx, int Ny, int Nz, int *varArray1, char filename[]){$/;"	f
Output_Int_3D_Format	Outputs.cu	/^bool Output_Int_3D_Format(int Nx, int Ny, int Nz, int *varArray, char filename[]){$/;"	f
PARAM_R	random.cu	108;"	d	file:
PARAM_R	random/random.cu	84;"	d	file:
PI	Parameters.h	12;"	d
PI	qvoronoi/rboxlib.cu	33;"	d	file:
PICKfurthest	qvoronoi/libqhull.h	/^  boolT PICKfurthest;     \/* true 'Q9' if process furthest of furthest points*\/$/;"	m	struct:qhT
POINTSmalloc	qvoronoi/libqhull.h	/^  boolT POINTSmalloc;     \/*   true if qh first_point\/num_points allocated *\/$/;"	m	struct:qhT
POSTmerge	qvoronoi/libqhull.h	/^  boolT POSTmerge;        \/* true if merging after buildhull (Cn or An) *\/$/;"	m	struct:qhT
POSTmerging	qvoronoi/libqhull.h	/^  boolT POSTmerging;      \/* true when post merging *\/$/;"	m	struct:qhT
PRE_DEFINED_PATTERN	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
PREmerge	qvoronoi/libqhull.h	/^  boolT PREmerge;         \/* true if merging during buildhull (C-n or A-n) *\/$/;"	m	struct:qhT
PRINTcentrums	qvoronoi/libqhull.h	/^  boolT PRINTcentrums;    \/* true 'Gc' if printing centrums *\/$/;"	m	struct:qhT
PRINTcoplanar	qvoronoi/libqhull.h	/^  boolT PRINTcoplanar;    \/* true 'Gp' if printing coplanar points *\/$/;"	m	struct:qhT
PRINTcradius	qvoronoi/libqhull.h	/^  realT PRINTcradius;     \/* radius for printing centrums *\/$/;"	m	struct:qhT
PRINTdim	qvoronoi/libqhull.h	/^  int   PRINTdim;         \/* print dimension for Geomview output *\/$/;"	m	struct:qhT
PRINTdots	qvoronoi/libqhull.h	/^  boolT PRINTdots;        \/* true 'Ga' if printing all points as dots *\/$/;"	m	struct:qhT
PRINTgood	qvoronoi/libqhull.h	/^  boolT PRINTgood;        \/* true 'Pg' if printing good facets *\/$/;"	m	struct:qhT
PRINTinner	qvoronoi/libqhull.h	/^  boolT PRINTinner;       \/* true 'Gi' if printing inner planes *\/$/;"	m	struct:qhT
PRINTneighbors	qvoronoi/libqhull.h	/^  boolT PRINTneighbors;   \/* true 'PG' if printing neighbors of good facets *\/$/;"	m	struct:qhT
PRINTnoplanes	qvoronoi/libqhull.h	/^  boolT PRINTnoplanes;    \/* true 'Gn' if printing no planes *\/$/;"	m	struct:qhT
PRINToptions1st	qvoronoi/libqhull.h	/^  boolT PRINToptions1st;  \/* true 'FO' if printing options to stderr *\/$/;"	m	struct:qhT
PRINTout	qvoronoi/libqhull.h	/^  qh_PRINT PRINTout[qh_PRINTEND]; \/* list of output formats to print *\/$/;"	m	struct:qhT
PRINTouter	qvoronoi/libqhull.h	/^  boolT PRINTouter;       \/* true 'Go' if printing outer planes *\/$/;"	m	struct:qhT
PRINTprecision	qvoronoi/libqhull.h	/^  boolT PRINTprecision;   \/* false 'Pp' if not reporting precision problems *\/$/;"	m	struct:qhT
PRINTradius	qvoronoi/libqhull.h	/^  realT PRINTradius;      \/* radius for printing vertex spheres and points *\/$/;"	m	struct:qhT
PRINTridges	qvoronoi/libqhull.h	/^  boolT PRINTridges;      \/* true 'Gr' if print ridges *\/$/;"	m	struct:qhT
PRINTspheres	qvoronoi/libqhull.h	/^  boolT PRINTspheres;     \/* true 'Gv' if print vertices as spheres *\/$/;"	m	struct:qhT
PRINTstatistics	qvoronoi/libqhull.h	/^  boolT PRINTstatistics;  \/* true 'Ts' if printing statistics to stderr *\/$/;"	m	struct:qhT
PRINTsummary	qvoronoi/libqhull.h	/^  boolT PRINTsummary;     \/* true 's' if printing summary to stderr *\/$/;"	m	struct:qhT
PRINTtransparent	qvoronoi/libqhull.h	/^  boolT PRINTtransparent; \/* true 'Gt' if print transparent outer ridges *\/$/;"	m	struct:qhT
PROJECTdelaunay	qvoronoi/libqhull.h	/^  boolT PROJECTdelaunay;  \/* true if DELAUNAY, no readpoints() and$/;"	m	struct:qhT
PROJECTinput	qvoronoi/libqhull.h	/^  int   PROJECTinput;     \/* number of projected dimensions 'bn:0Bn:0' *\/$/;"	m	struct:qhT
Param1RightOfParam2	clipper/clipper.cu	/^bool Param1RightOfParam2(OutRec* outRec1, OutRec* outRec2)$/;"	f	namespace:ClipperLib
Parent	clipper/clipper.h	/^    PolyNode* Parent;$/;"	m	class:ClipperLib::PolyNode
ParseFirstLeft	clipper/clipper.cu	/^static OutRec* ParseFirstLeft(OutRec* FirstLeft)$/;"	f	namespace:ClipperLib
Path	clipper/clipper.h	/^typedef std::vector< IntPoint > Path;$/;"	t	namespace:ClipperLib
Paths	clipper/clipper.h	/^typedef std::vector< Path > Paths;$/;"	t	namespace:ClipperLib
PointCount	clipper/clipper.cu	/^int PointCount(OutPt *Pts)$/;"	f	namespace:ClipperLib
PointInPolygon	clipper/clipper.cu	/^int PointInPolygon (const IntPoint &pt, OutPt *op)$/;"	f	namespace:ClipperLib
PointInPolygon	clipper/clipper.cu	/^int PointInPolygon (const IntPoint &pt, const Path &path)$/;"	f	namespace:ClipperLib
PointIsVertex	clipper/clipper.cu	/^bool PointIsVertex(const IntPoint &Pt, OutPt *pp)$/;"	f	namespace:ClipperLib
PointsAreClose	clipper/clipper.cu	/^bool PointsAreClose(IntPoint pt1, IntPoint pt2, double distSqrd)$/;"	f	namespace:ClipperLib
Poly2ContainsPoly1	clipper/clipper.cu	/^bool Poly2ContainsPoly1(OutPt *OutPt1, OutPt *OutPt2)$/;"	f	namespace:ClipperLib
PolyFillType	clipper/clipper.h	/^enum PolyFillType { pftEvenOdd, pftNonZero, pftPositive, pftNegative };$/;"	g	namespace:ClipperLib
PolyNd	clipper/clipper.cu	/^  PolyNode *PolyNd;$/;"	m	struct:ClipperLib::OutRec	file:
PolyNode	clipper/clipper.cu	/^PolyNode::PolyNode(): Childs(), Parent(0), Index(0), m_IsOpen(false)$/;"	f	class:ClipperLib::PolyNode
PolyNode	clipper/clipper.h	/^class PolyNode $/;"	c	namespace:ClipperLib
PolyNodes	clipper/clipper.h	/^typedef std::vector< PolyNode* > PolyNodes;$/;"	t	namespace:ClipperLib
PolyOutList	clipper/clipper.h	/^typedef std::vector < OutRec* > PolyOutList;$/;"	t	namespace:ClipperLib
PolyTree	clipper/clipper.h	/^class PolyTree: public PolyNode$/;"	c	namespace:ClipperLib
PolyTreeToPaths	clipper/clipper.cu	/^void PolyTreeToPaths(const PolyTree& polytree, Paths& paths)$/;"	f	namespace:ClipperLib
PolyTyp	clipper/clipper.cu	/^  PolyType PolyTyp;$/;"	m	struct:ClipperLib::TEdge	file:
PolyType	clipper/clipper.h	/^enum PolyType { ptSubject, ptClip };$/;"	g	namespace:ClipperLib
PopLocalMinima	clipper/clipper.cu	/^void ClipperBase::PopLocalMinima()$/;"	f	class:ClipperLib::ClipperBase
PopScanbeam	clipper/clipper.cu	/^cInt Clipper::PopScanbeam()$/;"	f	class:ClipperLib::Clipper
PreserveCollinear	clipper/clipper.h	/^  bool PreserveCollinear() {return m_PreserveCollinear;};$/;"	f	class:ClipperLib::ClipperBase
PreserveCollinear	clipper/clipper.h	/^  void PreserveCollinear(bool value) {m_PreserveCollinear = value;};$/;"	f	class:ClipperLib::ClipperBase
Prev	clipper/clipper.cu	/^  OutPt    *Prev;$/;"	m	struct:ClipperLib::OutPt	file:
Prev	clipper/clipper.cu	/^  TEdge *Prev;$/;"	m	struct:ClipperLib::TEdge	file:
PrevInAEL	clipper/clipper.cu	/^  TEdge *PrevInAEL;$/;"	m	struct:ClipperLib::TEdge	file:
PrevInSEL	clipper/clipper.cu	/^  TEdge *PrevInSEL;$/;"	m	struct:ClipperLib::TEdge	file:
ProcessBound	clipper/clipper.cu	/^TEdge* ClipperBase::ProcessBound(TEdge* E, bool NextIsForward)$/;"	f	class:ClipperLib::ClipperBase
ProcessEdgesAtTopOfScanbeam	clipper/clipper.cu	/^void Clipper::ProcessEdgesAtTopOfScanbeam(const cInt topY)$/;"	f	class:ClipperLib::Clipper
ProcessHorizontal	clipper/clipper.cu	/^void Clipper::ProcessHorizontal(TEdge *horzEdge, bool isTopOfScanbeam)$/;"	f	class:ClipperLib::Clipper
ProcessHorizontals	clipper/clipper.cu	/^void Clipper::ProcessHorizontals(bool IsTopOfScanbeam)$/;"	f	class:ClipperLib::Clipper
ProcessIntersectList	clipper/clipper.cu	/^void Clipper::ProcessIntersectList()$/;"	f	class:ClipperLib::Clipper
ProcessIntersections	clipper/clipper.cu	/^bool Clipper::ProcessIntersections(const cInt topY)$/;"	f	class:ClipperLib::Clipper
Pt	clipper/clipper.cu	/^  IntPoint        Pt;$/;"	m	struct:ClipperLib::IntersectNode	file:
Pt	clipper/clipper.cu	/^  IntPoint  Pt;$/;"	m	struct:ClipperLib::OutPt	file:
Pt2IsBetweenPt1AndPt3	clipper/clipper.cu	/^bool Pt2IsBetweenPt1AndPt3(const IntPoint pt1,$/;"	f	namespace:ClipperLib
Pts	clipper/clipper.cu	/^  OutPt    *Pts;$/;"	m	struct:ClipperLib::OutRec	file:
QHULL_OS_WIN	qvoronoi/qhull_a.h	101;"	d
QHULL_OS_WIN	qvoronoi/qhull_a.h	103;"	d
QHULL_UNUSED	qvoronoi/qhull_a.h	108;"	d
QHULL_UNUSED	qvoronoi/qhull_a.h	110;"	d
QHULLfinished	qvoronoi/libqhull.h	/^  boolT QHULLfinished;    \/* True after qhull() is finished *\/$/;"	m	struct:qhT
QUICKhelp	qvoronoi/libqhull.h	/^  boolT QUICKhelp;        \/* true if quick help message for degen input *\/$/;"	m	struct:qhT
QVORONOI	qvoronoi/qvoronoi.h	6;"	d
RANDOM_H_	random.h	26;"	d
RANDOM_H_	random/random.h	4;"	d
RANDOMa	qvoronoi/libqhull.h	/^  realT RANDOMa;          \/*    qh_randomfactor is randr * RANDOMa + RANDOMb *\/$/;"	m	struct:qhT
RANDOMb	qvoronoi/libqhull.h	/^  realT RANDOMb;$/;"	m	struct:qhT
RANDOMdist	qvoronoi/libqhull.h	/^  boolT RANDOMdist;       \/* true if randomly change distplane and setfacetplane *\/$/;"	m	struct:qhT
RANDOMfactor	qvoronoi/libqhull.h	/^  realT RANDOMfactor;     \/*    maximum random perturbation *\/$/;"	m	struct:qhT
RANDOMoutside	qvoronoi/libqhull.h	/^  boolT RANDOMoutside;    \/* true if select a random outside point *\/$/;"	m	struct:qhT
REALepsilon	qvoronoi/user.h	137;"	d
REALepsilon	qvoronoi/user.h	147;"	d
REALfloat	qvoronoi/user.h	131;"	d
REALmax	qvoronoi/user.h	135;"	d
REALmax	qvoronoi/user.h	145;"	d
REALmin	qvoronoi/user.h	136;"	d
REALmin	qvoronoi/user.h	146;"	d
REPORTfreq	qvoronoi/libqhull.h	/^  int   REPORTfreq;       \/* buildtracing reports every n facets *\/$/;"	m	struct:qhT
REPORTfreq2	qvoronoi/libqhull.h	/^  int   REPORTfreq2;      \/* tracemerging reports every REPORTfreq\/2 facets *\/$/;"	m	struct:qhT
RERUN	qvoronoi/libqhull.h	/^  int   RERUN;            \/* 'TRn' rerun qhull n times (qh.build_cnt) *\/$/;"	m	struct:qhT
ROTATErandom	qvoronoi/libqhull.h	/^  int   ROTATErandom;     \/* 'QRn' seed, 0 time, >= rotate input *\/$/;"	m	struct:qhT
RangeTest	clipper/clipper.cu	/^void RangeTest(const IntPoint& Pt, bool& useFullRange)$/;"	f	namespace:ClipperLib
ReleaseMemory	LLG_CUDA.cu	/^void ReleaseMemory(void)$/;"	f
RemoveEdge	clipper/clipper.cu	/^TEdge* RemoveEdge(TEdge* e)$/;"	f	namespace:ClipperLib
Reset	clipper/clipper.cu	/^void Clipper::Reset()$/;"	f	class:ClipperLib::Clipper
Reset	clipper/clipper.cu	/^void ClipperBase::Reset()$/;"	f	class:ClipperLib::ClipperBase
Reset_Happl	MiscFunctions.cu	/^bool Reset_Happl(){$/;"	f
ReverseHorizontal	clipper/clipper.cu	/^inline void ReverseHorizontal(TEdge &e)$/;"	f	namespace:ClipperLib
ReversePath	clipper/clipper.cu	/^void ReversePath(Path& p)$/;"	f	namespace:ClipperLib
ReversePaths	clipper/clipper.cu	/^void ReversePaths(Paths& p)$/;"	f	namespace:ClipperLib
ReversePolyPtLinks	clipper/clipper.cu	/^void ReversePolyPtLinks(OutPt *pp)$/;"	f	namespace:ClipperLib
ReverseSolution	clipper/clipper.h	/^  bool ReverseSolution() {return m_ReverseOutput;};$/;"	f	class:ClipperLib::Clipper
ReverseSolution	clipper/clipper.h	/^  void ReverseSolution(bool value) {m_ReverseOutput = value;};$/;"	f	class:ClipperLib::Clipper
RightBound	clipper/clipper.cu	/^  TEdge        *RightBound;$/;"	m	struct:ClipperLib::LocalMinimum	file:
Rnd_upto_pow2	utilities.cu	/^int Rnd_upto_pow2(int v){$/;"	f
Round	clipper/clipper.cu	/^inline cInt Round(double val)$/;"	f	namespace:ClipperLib
SCALEinput	qvoronoi/libqhull.h	/^  boolT SCALEinput;       \/* true 'Qbk' if scaling input *\/$/;"	m	struct:qhT
SCALElast	qvoronoi/libqhull.h	/^  boolT SCALElast;        \/* true 'Qbb' if scale last coord to max prev coord *\/$/;"	m	struct:qhT
SETaddr_	qvoronoi/qset.h	394;"	d
SETelem_	qvoronoi/qset.h	329;"	d
SETelemaddr_	qvoronoi/qset.h	351;"	d
SETelemsize	qvoronoi/qset.h	98;"	d
SETelemt_	qvoronoi/qset.h	340;"	d
SETempty_	qvoronoi/qset.h	417;"	d
SETfirst_	qvoronoi/qset.h	360;"	d
SETfirstt_	qvoronoi/qset.h	369;"	d
SETindex_	qvoronoi/qset.h	306;"	d
SETref_	qvoronoi/qset.h	317;"	d
SETreturnsize_	qvoronoi/qset.h	406;"	d
SETroundoff	qvoronoi/libqhull.h	/^  boolT SETroundoff;      \/* true 'E' if qh DISTround is predefined *\/$/;"	m	struct:qhT
SETsecond_	qvoronoi/qset.h	378;"	d
SETsecondt_	qvoronoi/qset.h	386;"	d
SETsizeaddr_	qvoronoi/qset.h	431;"	d
SETtruncate_	qvoronoi/qset.h	443;"	d
SKIPcheckmax	qvoronoi/libqhull.h	/^  boolT SKIPcheckmax;     \/* true 'Q5' if skip qh_check_maxout *\/$/;"	m	struct:qhT
SKIPconvex	qvoronoi/libqhull.h	/^  boolT SKIPconvex;       \/* true 'Q6' if skip convexity testing during pre-merge *\/$/;"	m	struct:qhT
SPLITthresholds	qvoronoi/libqhull.h	/^  boolT SPLITthresholds;  \/* true if upper_\/lower_threshold defines a region$/;"	m	struct:qhT
STOPcone	qvoronoi/libqhull.h	/^  int   STOPcone;         \/* 'TCn' 1+n for stopping after cone for point n *\/$/;"	m	struct:qhT
STOPpoint	qvoronoi/libqhull.h	/^  int   STOPpoint;        \/* 'TVn' 'TV-n' 1+n for stopping after\/before(-)$/;"	m	struct:qhT
ScalFactFieldStep	Parameters_input.cu	/^double ScalFactFieldStep;$/;"	v
ScanbeamList	clipper/clipper.h	/^  typedef std::priority_queue<cInt> ScanbeamList;$/;"	t	class:ClipperLib::Clipper
Seq_f	LLG_CUDA.cu	/^int    *Seq_f = NULL;$/;"	v
SetDx	clipper/clipper.cu	/^inline void SetDx(TEdge &e)$/;"	f	namespace:ClipperLib
SetElement	LLG_kernel.cu	/^__device__ __host__ static void SetElement(double* pData, int i, int j, int k, int pitch_x, int pitch_y, double value)$/;"	f	file:
SetElement_Complex	LLG_kernel.cu	/^__device__ __host__ static void SetElement_Complex(cufftComplex* pData, int i, int j, int k, int pitch_x, int pitch_y, cufftComplex value)$/;"	f	file:
SetElement_Int	LLG_kernel.cu	/^__device__ __host__ static void SetElement_Int(int* pData, int i, int j, int k, int pitch_x, int pitch_y, int value)$/;"	f	file:
SetHoleState	clipper/clipper.cu	/^void Clipper::SetHoleState(TEdge *e, OutRec *outrec)$/;"	f	class:ClipperLib::Clipper
SetWindingCount	clipper/clipper.cu	/^void Clipper::SetWindingCount(TEdge &edge)$/;"	f	class:ClipperLib::Clipper
SetZ	clipper/clipper.cu	/^void Clipper::SetZ(IntPoint& pt, TEdge& e1, TEdge& e2)$/;"	f	class:ClipperLib::Clipper
Set_Happl_CT	MiscFunctions.cu	/^bool Set_Happl_CT(){$/;"	f
Set_Happl_DT	MiscFunctions.cu	/^bool Set_Happl_DT(){$/;"	f
Set_delta_K_Aex_Tc	MiscFunctions.cu	/^bool Set_delta_K_Aex_Tc(double *std_Ku, double *std_Aex, double *std_Tc, double *indicator4, double *indicator5, double *indicator6){$/;"	f
Set_devMxyz	MiscFunctions.cu	/^bool Set_devMxyz(double* host_Ms, double* dev_theta, double* dev_phi, double* dev_Mx, double* dev_My, double* dev_Mz){$/;"	f
Side	clipper/clipper.cu	/^  EdgeSide Side;$/;"	m	struct:ClipperLib::TEdge	file:
SimplifyPolygon	clipper/clipper.cu	/^void SimplifyPolygon(const Path &in_poly, Paths &out_polys, PolyFillType fillType)$/;"	f	namespace:ClipperLib
SimplifyPolygons	clipper/clipper.cu	/^void SimplifyPolygons(Paths &polys, PolyFillType fillType)$/;"	f	namespace:ClipperLib
SimplifyPolygons	clipper/clipper.cu	/^void SimplifyPolygons(const Paths &in_polys, Paths &out_polys, PolyFillType fillType)$/;"	f	namespace:ClipperLib
Skip	clipper/clipper.cu	/^static int const Skip = -2;        \/\/edge that would otherwise close a path$/;"	m	namespace:ClipperLib	file:
SlopesEqual	clipper/clipper.cu	/^bool SlopesEqual(const IntPoint pt1, const IntPoint pt2,$/;"	f	namespace:ClipperLib
SlopesEqual	clipper/clipper.cu	/^bool SlopesEqual(const TEdge &e1, const TEdge &e2, bool UseFullInt64Range)$/;"	f	namespace:ClipperLib
SlopesNearCollinear	clipper/clipper.cu	/^bool SlopesNearCollinear(const IntPoint& pt1, $/;"	f	namespace:ClipperLib
StrictlySimple	clipper/clipper.h	/^  bool StrictlySimple() {return m_StrictSimple;};$/;"	f	class:ClipperLib::Clipper
StrictlySimple	clipper/clipper.h	/^  void StrictlySimple(bool value) {m_StrictSimple = value;};$/;"	f	class:ClipperLib::Clipper
Swap	clipper/clipper.cu	/^void Swap(cInt& val1, cInt& val2)$/;"	f	namespace:ClipperLib
SwapIntersectNodes	clipper/clipper.cu	/^void SwapIntersectNodes(IntersectNode &int1, IntersectNode &int2)$/;"	f	namespace:ClipperLib
SwapPoints	clipper/clipper.cu	/^void SwapPoints(IntPoint &pt1, IntPoint &pt2)$/;"	f	namespace:ClipperLib
SwapPolyIndexes	clipper/clipper.cu	/^inline void SwapPolyIndexes(TEdge &Edge1, TEdge &Edge2)$/;"	f	namespace:ClipperLib
SwapPositionsInAEL	clipper/clipper.cu	/^void Clipper::SwapPositionsInAEL(TEdge *Edge1, TEdge *Edge2)$/;"	f	class:ClipperLib::Clipper
SwapPositionsInSEL	clipper/clipper.cu	/^void Clipper::SwapPositionsInSEL(TEdge *Edge1, TEdge *Edge2)$/;"	f	class:ClipperLib::Clipper
SwapSides	clipper/clipper.cu	/^inline void SwapSides(TEdge &Edge1, TEdge &Edge2)$/;"	f	namespace:ClipperLib
SweepFieldStep	Parameters_input.cu	/^double SweepFieldStep;$/;"	v
T	Parameters.h	/^static double  *T = NULL, *D = NULL;$/;"	v
TABLEsize	qvoronoi/mem.h	/^  int      TABLEsize;         \/* actual number of sizes in free list table *\/$/;"	m	struct:qhmemT
TEMPsize	qvoronoi/libqhull.h	/^  int   TEMPsize;         \/* size for small, temporary sets (in quick mem) *\/$/;"	m	struct:qhT
TESTpoints	qvoronoi/libqhull.h	/^  int   TESTpoints;       \/* 'QTn' num of test points after qh.num_points.  Test points always coplanar. *\/$/;"	m	struct:qhT
TESTvneighbors	qvoronoi/libqhull.h	/^  boolT TESTvneighbors;   \/*  true 'Qv' if test vertex neighbors at end *\/$/;"	m	struct:qhT
TEdge	clipper/clipper.cu	/^struct TEdge {$/;"	s	namespace:ClipperLib	file:
THERMAL	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
TOLERANCE	clipper/clipper.cu	63;"	d	file:
TOTAL_TIME	Parameters_input.cu	/^long int TOTAL_TIME, EQUI_START_TIME;$/;"	v
TRACEdist	qvoronoi/libqhull.h	/^  realT TRACEdist;        \/* 'TWn' start tracing when merge distance too big *\/$/;"	m	struct:qhT
TRACElastrun	qvoronoi/libqhull.h	/^  int   TRACElastrun;     \/*  qh.TRACElevel applies to last qh.RERUN *\/$/;"	m	struct:qhT
TRACElevel	qvoronoi/libqhull.h	/^  int   TRACElevel;       \/* 'Tn' conditional IStracing level *\/$/;"	m	struct:qhT
TRACEmerge	qvoronoi/libqhull.h	/^  int   TRACEmerge;       \/* 'TMn' start tracing before this merge *\/$/;"	m	struct:qhT
TRACEpoint	qvoronoi/libqhull.h	/^  int   TRACEpoint;       \/* 'TPn' start tracing when point n is a vertex *\/$/;"	m	struct:qhT
TRIangulate	qvoronoi/libqhull.h	/^  boolT TRIangulate;      \/* true 'Qt' if triangulate non-simplicial facets *\/$/;"	m	struct:qhT
TRInormals	qvoronoi/libqhull.h	/^  boolT TRInormals;       \/* true 'Q11' if triangulate duplicates normals (sets Qt) *\/$/;"	m	struct:qhT
Temperature	Parameters_input.cu	/^double GrainDx, GrainDy, delta_x, delta_y, delta_z, delta_t, Temperature,$/;"	v
Top	clipper/clipper.cu	/^  IntPoint Top;$/;"	m	struct:ClipperLib::TEdge	file:
TopX	clipper/clipper.cu	/^inline cInt TopX(TEdge &edge, const cInt currentY)$/;"	f	namespace:ClipperLib
Total	clipper/clipper.cu	/^int PolyTree::Total() const$/;"	f	class:ClipperLib::PolyTree
TranslatePath	clipper/clipper.cu	/^void TranslatePath(const Path& input, Path& output, IntPoint delta) $/;"	f	namespace:ClipperLib
True	qvoronoi/libqhull.h	107;"	d
True	qvoronoi/libqhull.h	110;"	d
UPPERdelaunay	qvoronoi/libqhull.h	/^  boolT UPPERdelaunay;    \/* true 'Qu' if computing furthest-site Delaunay *\/$/;"	m	struct:qhT
USEstdout	qvoronoi/libqhull.h	/^  boolT USEstdout;        \/* true 'Tz' if using stdout instead of stderr *\/$/;"	m	struct:qhT
Unassigned	clipper/clipper.cu	/^static int const Unassigned = -1;  \/\/edge not currently 'owning' a solution$/;"	m	namespace:ClipperLib	file:
UpdateEdgeIntoAEL	clipper/clipper.cu	/^void Clipper::UpdateEdgeIntoAEL(TEdge *&e)$/;"	f	class:ClipperLib::Clipper
UpdateOutPtIdxs	clipper/clipper.cu	/^inline void UpdateOutPtIdxs(OutRec& outrec)$/;"	f	namespace:ClipperLib
VERIFYoutput	qvoronoi/libqhull.h	/^  boolT VERIFYoutput;     \/* true 'Tv' if verify output at end of qhull *\/$/;"	m	struct:qhT
VERTEXneighbors	qvoronoi/libqhull.h	/^  boolT VERTEXneighbors;  \/* true if maintaining vertex neighbors *\/$/;"	m	struct:qhT
VIRTUALmemory	qvoronoi/libqhull.h	/^  boolT VIRTUALmemory;    \/* true 'Q7' if depth-first processing in buildhull *\/$/;"	m	struct:qhT
VORONOI	qvoronoi/libqhull.h	/^  boolT VORONOI;          \/* true 'v' if computing Voronoi diagram *\/$/;"	m	struct:qhT
VORO_GRAIN	Parameters_input.cu	/^int MODEL, DEMAG, THERMAL, DEL_Hk, DEL_Aex, DEL_Tc, VORO_GRAIN, CGC_DEF, MH_LOOP, AFC, EXT_FP_PROFILE, PRE_DEFINED_PATTERN, FULL_REC;$/;"	v
WAScoplanar	qvoronoi/libqhull.h	/^  boolT WAScoplanar;      \/* True if qh_partitioncoplanar (qh_check_maxout) *\/$/;"	m	struct:qhT
WIDEfacet	qvoronoi/libqhull.h	/^  realT WIDEfacet;        \/* size of wide facet for skipping ridge in$/;"	m	struct:qhT
WPE_Calc	MiscFunctions.cu	/^bool WPE_Calc(){$/;"	f
Wacoplanarmax	qvoronoi/stat.h	/^    Wacoplanarmax,$/;"	e	enum:statistics
Wacoplanartot	qvoronoi/stat.h	/^    Wacoplanartot,$/;"	e	enum:statistics
Wangle	qvoronoi/stat.h	/^    Wangle,$/;"	e	enum:statistics
Wanglemax	qvoronoi/stat.h	/^    Wanglemax,$/;"	e	enum:statistics
Wanglemin	qvoronoi/stat.h	/^    Wanglemin,$/;"	e	enum:statistics
Wareamax	qvoronoi/stat.h	/^    Wareamax,$/;"	e	enum:statistics
Wareamin	qvoronoi/stat.h	/^    Wareamin,$/;"	e	enum:statistics
Wareatot	qvoronoi/stat.h	/^    Wareatot,$/;"	e	enum:statistics
Wavoidoldmax	qvoronoi/stat.h	/^    Wavoidoldmax,$/;"	e	enum:statistics
Wavoidoldtot	qvoronoi/stat.h	/^    Wavoidoldtot,$/;"	e	enum:statistics
Wconcavemax	qvoronoi/stat.h	/^    Wconcavemax,$/;"	e	enum:statistics
Wconcavetot	qvoronoi/stat.h	/^    Wconcavetot,$/;"	e	enum:statistics
Wcoplanarmax	qvoronoi/stat.h	/^    Wcoplanarmax,$/;"	e	enum:statistics
Wcoplanartot	qvoronoi/stat.h	/^    Wcoplanartot,$/;"	e	enum:statistics
Wcpu	qvoronoi/stat.h	/^    Wcpu,$/;"	e	enum:statistics
Wdegenmax	qvoronoi/stat.h	/^    Wdegenmax,$/;"	e	enum:statistics
Wdegentot	qvoronoi/stat.h	/^    Wdegentot,$/;"	e	enum:statistics
Wduplicatemax	qvoronoi/stat.h	/^    Wduplicatemax,$/;"	e	enum:statistics
Wduplicatetot	qvoronoi/stat.h	/^    Wduplicatetot,$/;"	e	enum:statistics
Wflippedmax	qvoronoi/stat.h	/^    Wflippedmax,$/;"	e	enum:statistics
Wflippedtot	qvoronoi/stat.h	/^    Wflippedtot,$/;"	e	enum:statistics
WindCnt	clipper/clipper.cu	/^  int WindCnt;$/;"	m	struct:ClipperLib::TEdge	file:
WindCnt2	clipper/clipper.cu	/^  int WindCnt2; \/\/winding count of the opposite polytype$/;"	m	struct:ClipperLib::TEdge	file:
WindDelta	clipper/clipper.cu	/^  int WindDelta; \/\/1 or -1 depending on winding direction$/;"	m	struct:ClipperLib::TEdge	file:
Wmaxout	qvoronoi/stat.h	/^    Wmaxout,$/;"	e	enum:statistics
Wmaxoutside	qvoronoi/stat.h	/^    Wmaxoutside,$/;"	e	enum:statistics
Wmindenom	qvoronoi/stat.h	/^    Wmindenom,$/;"	e	enum:statistics
Wminvertex	qvoronoi/stat.h	/^    Wminvertex,$/;"	e	enum:statistics
Wnewbalance	qvoronoi/stat.h	/^    Wnewbalance,$/;"	e	enum:statistics
Wnewbalance2	qvoronoi/stat.h	/^    Wnewbalance2,$/;"	e	enum:statistics
Wnewvertex	qvoronoi/stat.h	/^    Wnewvertex,$/;"	e	enum:statistics
Wnewvertexmax	qvoronoi/stat.h	/^    Wnewvertexmax,$/;"	e	enum:statistics
Wnewvertexmax	qvoronoi/stat.h	/^  Wnewvertexmax,$/;"	e	enum:statistics
Wpbalance	qvoronoi/stat.h	/^    Wpbalance,$/;"	e	enum:statistics
Wpbalance2	qvoronoi/stat.h	/^    Wpbalance2,$/;"	e	enum:statistics
Wretrymax	qvoronoi/stat.h	/^    Wretrymax,$/;"	e	enum:statistics
Wridge	qvoronoi/stat.h	/^    Wridge,$/;"	e	enum:statistics
Wridge	qvoronoi/stat.h	/^  Wridge,$/;"	e	enum:statistics
Wridge0	qvoronoi/stat.h	/^    Wridge0,$/;"	e	enum:statistics
Wridge0	qvoronoi/stat.h	/^  Wridge0,$/;"	e	enum:statistics
Wridge0max	qvoronoi/stat.h	/^    Wridge0max,$/;"	e	enum:statistics
Wridge0max	qvoronoi/stat.h	/^  Wridge0max,$/;"	e	enum:statistics
Wridgemax	qvoronoi/stat.h	/^    Wridgemax,$/;"	e	enum:statistics
Wridgemax	qvoronoi/stat.h	/^  Wridgemax,$/;"	e	enum:statistics
Wridgemid	qvoronoi/stat.h	/^    Wridgemid,$/;"	e	enum:statistics
Wridgemid	qvoronoi/stat.h	/^  Wridgemid,$/;"	e	enum:statistics
Wridgemidmax	qvoronoi/stat.h	/^    Wridgemidmax,$/;"	e	enum:statistics
Wridgemidmax	qvoronoi/stat.h	/^  Wridgemidmax,$/;"	e	enum:statistics
Wridgeok	qvoronoi/stat.h	/^    Wridgeok,$/;"	e	enum:statistics
Wridgeok	qvoronoi/stat.h	/^  Wridgeok,$/;"	e	enum:statistics
Wridgeokmax	qvoronoi/stat.h	/^    Wridgeokmax,$/;"	e	enum:statistics
Wridgeokmax	qvoronoi/stat.h	/^  Wridgeokmax,$/;"	e	enum:statistics
Wvertexmax	qvoronoi/stat.h	/^    Wvertexmax,$/;"	e	enum:statistics
Wvertexmin	qvoronoi/stat.h	/^    Wvertexmin,$/;"	e	enum:statistics
X	clipper/clipper.h	/^  cInt X;$/;"	m	struct:ClipperLib::IntPoint
X	clipper/clipper.h	/^  double X;$/;"	m	struct:ClipperLib::DoublePoint
Y	clipper/clipper.cu	/^  cInt          Y;$/;"	m	struct:ClipperLib::LocalMinimum	file:
Y	clipper/clipper.h	/^  cInt Y;$/;"	m	struct:ClipperLib::IntPoint
Y	clipper/clipper.h	/^  double Y;$/;"	m	struct:ClipperLib::DoublePoint
Z	clipper/clipper.h	/^  cInt Z;$/;"	m	struct:ClipperLib::IntPoint
ZEND	qvoronoi/stat.h	/^    ZEND};$/;"	e	enum:statistics
ZERO	Parameters.h	15;"	d
ZEROall_ok	qvoronoi/libqhull.h	/^  boolT ZEROall_ok;       \/* True if qh_checkzero always succeeds *\/$/;"	m	struct:qhT
ZEROcentrum	qvoronoi/libqhull.h	/^  boolT ZEROcentrum;      \/* true if 'C-0' or 'C-0 Qx'.  sets ZEROall_ok *\/$/;"	m	struct:qhT
ZFillCallback	clipper/clipper.h	/^typedef void (*ZFillCallback)(IntPoint& e1bot, IntPoint& e1top, IntPoint& e2bot, IntPoint& e2top, IntPoint& pt);$/;"	t	namespace:ClipperLib
ZFillFunction	clipper/clipper.cu	/^void Clipper::ZFillFunction(ZFillCallback zFillFunc)$/;"	f	class:ClipperLib::Clipper
ZTYPEend	qvoronoi/stat.h	/^enum ztypes {zdoc,zinc,zadd,zmax,zmin,ZTYPEreal,wadd,wmax,wmin,ZTYPEend};$/;"	e	enum:ztypes
ZTYPEreal	qvoronoi/stat.h	/^enum ztypes {zdoc,zinc,zadd,zmax,zmin,ZTYPEreal,wadd,wmax,wmin,ZTYPEend};$/;"	e	enum:ztypes
Zacoplanar	qvoronoi/stat.h	/^    Zacoplanar,$/;"	e	enum:statistics
Zangle	qvoronoi/stat.h	/^    Zangle,$/;"	e	enum:statistics
Zangletests	qvoronoi/stat.h	/^    Zangletests,$/;"	e	enum:statistics
Zavoidold	qvoronoi/stat.h	/^    Zavoidold,$/;"	e	enum:statistics
Zback0	qvoronoi/stat.h	/^    Zback0,$/;"	e	enum:statistics
Zback0	qvoronoi/stat.h	/^  Zback0,$/;"	e	enum:statistics
Zbestcentrum	qvoronoi/stat.h	/^    Zbestcentrum,$/;"	e	enum:statistics
Zbestdist	qvoronoi/stat.h	/^    Zbestdist,$/;"	e	enum:statistics
Zbestdist	qvoronoi/stat.h	/^  Zbestdist,$/;"	e	enum:statistics
Zbestlower	qvoronoi/stat.h	/^    Zbestlower,$/;"	e	enum:statistics
Zbestlowerv	qvoronoi/stat.h	/^    Zbestlowerv,$/;"	e	enum:statistics
Zcentrumtests	qvoronoi/stat.h	/^    Zcentrumtests,$/;"	e	enum:statistics
Zcentrumtests	qvoronoi/stat.h	/^  Zcentrumtests,$/;"	e	enum:statistics
Zcheckpart	qvoronoi/stat.h	/^    Zcheckpart,$/;"	e	enum:statistics
Zcheckpart	qvoronoi/stat.h	/^  Zcheckpart,$/;"	e	enum:statistics
Zcomputefurthest	qvoronoi/stat.h	/^    Zcomputefurthest,$/;"	e	enum:statistics
Zconcave	qvoronoi/stat.h	/^    Zconcave,$/;"	e	enum:statistics
Zconcaveridge	qvoronoi/stat.h	/^    Zconcaveridge,$/;"	e	enum:statistics
Zconcaveridges	qvoronoi/stat.h	/^    Zconcaveridges,$/;"	e	enum:statistics
Zconcaveridges	qvoronoi/stat.h	/^  Zconcaveridges,$/;"	e	enum:statistics
Zcoplanar	qvoronoi/stat.h	/^    Zcoplanar,$/;"	e	enum:statistics
Zcoplanarangle	qvoronoi/stat.h	/^    Zcoplanarangle,$/;"	e	enum:statistics
Zcoplanarcentrum	qvoronoi/stat.h	/^    Zcoplanarcentrum,$/;"	e	enum:statistics
Zcoplanarhorizon	qvoronoi/stat.h	/^    Zcoplanarhorizon,$/;"	e	enum:statistics
Zcoplanarhorizon	qvoronoi/stat.h	/^  Zcoplanarhorizon,$/;"	e	enum:statistics
Zcoplanarinside	qvoronoi/stat.h	/^    Zcoplanarinside,$/;"	e	enum:statistics
Zcoplanarpart	qvoronoi/stat.h	/^    Zcoplanarpart,$/;"	e	enum:statistics
Zcoplanarpart	qvoronoi/stat.h	/^  Zcoplanarpart,$/;"	e	enum:statistics
Zcoplanarridges	qvoronoi/stat.h	/^    Zcoplanarridges,$/;"	e	enum:statistics
Zcoplanarridges	qvoronoi/stat.h	/^  Zcoplanarridges,$/;"	e	enum:statistics
Zcyclefacetmax	qvoronoi/stat.h	/^    Zcyclefacetmax,$/;"	e	enum:statistics
Zcyclefacettot	qvoronoi/stat.h	/^    Zcyclefacettot,$/;"	e	enum:statistics
Zcyclefacettot	qvoronoi/stat.h	/^  Zcyclefacettot,$/;"	e	enum:statistics
Zcyclehorizon	qvoronoi/stat.h	/^    Zcyclehorizon,$/;"	e	enum:statistics
Zcyclehorizon	qvoronoi/stat.h	/^  Zcyclehorizon,$/;"	e	enum:statistics
Zcyclevertex	qvoronoi/stat.h	/^    Zcyclevertex,$/;"	e	enum:statistics
Zdegen	qvoronoi/stat.h	/^    Zdegen,$/;"	e	enum:statistics
Zdegenvertex	qvoronoi/stat.h	/^    Zdegenvertex,$/;"	e	enum:statistics
Zdelfacetdup	qvoronoi/stat.h	/^    Zdelfacetdup,$/;"	e	enum:statistics
Zdelridge	qvoronoi/stat.h	/^    Zdelridge,$/;"	e	enum:statistics
Zdelvertexmax	qvoronoi/stat.h	/^    Zdelvertexmax,$/;"	e	enum:statistics
Zdelvertextot	qvoronoi/stat.h	/^    Zdelvertextot,$/;"	e	enum:statistics
Zdelvertextot	qvoronoi/stat.h	/^  Zdelvertextot,$/;"	e	enum:statistics
Zdetsimplex	qvoronoi/stat.h	/^    Zdetsimplex,$/;"	e	enum:statistics
Zdistcheck	qvoronoi/stat.h	/^    Zdistcheck,$/;"	e	enum:statistics
Zdistcheck	qvoronoi/stat.h	/^  Zdistcheck,$/;"	e	enum:statistics
Zdistconvex	qvoronoi/stat.h	/^    Zdistconvex,$/;"	e	enum:statistics
Zdistconvex	qvoronoi/stat.h	/^  Zdistconvex,$/;"	e	enum:statistics
Zdistgood	qvoronoi/stat.h	/^    Zdistgood,$/;"	e	enum:statistics
Zdistio	qvoronoi/stat.h	/^    Zdistio,$/;"	e	enum:statistics
Zdistplane	qvoronoi/stat.h	/^    Zdistplane,$/;"	e	enum:statistics
Zdiststat	qvoronoi/stat.h	/^    Zdiststat,$/;"	e	enum:statistics
Zdistvertex	qvoronoi/stat.h	/^    Zdistvertex,$/;"	e	enum:statistics
Zdistzero	qvoronoi/stat.h	/^    Zdistzero,$/;"	e	enum:statistics
Zdistzero	qvoronoi/stat.h	/^  Zdistzero,$/;"	e	enum:statistics
Zdoc1	qvoronoi/stat.h	/^    Zdoc1,$/;"	e	enum:statistics
Zdoc1	qvoronoi/stat.h	/^  Zdoc1,$/;"	e	enum:statistics
Zdoc10	qvoronoi/stat.h	/^    Zdoc10,$/;"	e	enum:statistics
Zdoc11	qvoronoi/stat.h	/^    Zdoc11,$/;"	e	enum:statistics
Zdoc11	qvoronoi/stat.h	/^  Zdoc11,$/;"	e	enum:statistics
Zdoc12	qvoronoi/stat.h	/^    Zdoc12,$/;"	e	enum:statistics
Zdoc2	qvoronoi/stat.h	/^    Zdoc2,$/;"	e	enum:statistics
Zdoc2	qvoronoi/stat.h	/^  Zdoc2,$/;"	e	enum:statistics
Zdoc3	qvoronoi/stat.h	/^    Zdoc3,$/;"	e	enum:statistics
Zdoc3	qvoronoi/stat.h	/^  Zdoc3,$/;"	e	enum:statistics
Zdoc4	qvoronoi/stat.h	/^    Zdoc4,$/;"	e	enum:statistics
Zdoc5	qvoronoi/stat.h	/^    Zdoc5,$/;"	e	enum:statistics
Zdoc6	qvoronoi/stat.h	/^    Zdoc6,$/;"	e	enum:statistics
Zdoc7	qvoronoi/stat.h	/^    Zdoc7,$/;"	e	enum:statistics
Zdoc8	qvoronoi/stat.h	/^    Zdoc8,$/;"	e	enum:statistics
Zdoc9	qvoronoi/stat.h	/^    Zdoc9,$/;"	e	enum:statistics
Zdropdegen	qvoronoi/stat.h	/^    Zdropdegen,$/;"	e	enum:statistics
Zdropneighbor	qvoronoi/stat.h	/^    Zdropneighbor,$/;"	e	enum:statistics
Zdupflip	qvoronoi/stat.h	/^    Zdupflip,$/;"	e	enum:statistics
Zduplicate	qvoronoi/stat.h	/^    Zduplicate,$/;"	e	enum:statistics
Zdupridge	qvoronoi/stat.h	/^    Zdupridge,$/;"	e	enum:statistics
Zdupsame	qvoronoi/stat.h	/^    Zdupsame,$/;"	e	enum:statistics
Zfindbest	qvoronoi/stat.h	/^    Zfindbest,$/;"	e	enum:statistics
Zfindbestmax	qvoronoi/stat.h	/^    Zfindbestmax,$/;"	e	enum:statistics
Zfindbesttot	qvoronoi/stat.h	/^    Zfindbesttot,$/;"	e	enum:statistics
Zfindcoplanar	qvoronoi/stat.h	/^    Zfindcoplanar,$/;"	e	enum:statistics
Zfindfail	qvoronoi/stat.h	/^    Zfindfail,$/;"	e	enum:statistics
Zfindhorizon	qvoronoi/stat.h	/^    Zfindhorizon,$/;"	e	enum:statistics
Zfindhorizonmax	qvoronoi/stat.h	/^    Zfindhorizonmax,$/;"	e	enum:statistics
Zfindhorizontot	qvoronoi/stat.h	/^    Zfindhorizontot,$/;"	e	enum:statistics
Zfindjump	qvoronoi/stat.h	/^    Zfindjump,$/;"	e	enum:statistics
Zfindnew	qvoronoi/stat.h	/^    Zfindnew,$/;"	e	enum:statistics
Zfindnewjump	qvoronoi/stat.h	/^    Zfindnewjump,$/;"	e	enum:statistics
Zfindnewmax	qvoronoi/stat.h	/^    Zfindnewmax,$/;"	e	enum:statistics
Zfindnewsharp	qvoronoi/stat.h	/^    Zfindnewsharp,$/;"	e	enum:statistics
Zfindnewtot	qvoronoi/stat.h	/^    Zfindnewtot,$/;"	e	enum:statistics
Zflipped	qvoronoi/stat.h	/^    Zflipped,$/;"	e	enum:statistics
Zflippedfacets	qvoronoi/stat.h	/^    Zflippedfacets,$/;"	e	enum:statistics
Zflippedfacets	qvoronoi/stat.h	/^  Zflippedfacets,$/;"	e	enum:statistics
Zgauss0	qvoronoi/stat.h	/^    Zgauss0,$/;"	e	enum:statistics
Zgauss0	qvoronoi/stat.h	/^  Zgauss0,$/;"	e	enum:statistics
Zgoodfacet	qvoronoi/stat.h	/^    Zgoodfacet,$/;"	e	enum:statistics
Zhashlookup	qvoronoi/stat.h	/^    Zhashlookup,$/;"	e	enum:statistics
Zhashridge	qvoronoi/stat.h	/^    Zhashridge,$/;"	e	enum:statistics
Zhashridgetest	qvoronoi/stat.h	/^    Zhashridgetest,$/;"	e	enum:statistics
Zhashtests	qvoronoi/stat.h	/^    Zhashtests,$/;"	e	enum:statistics
Zinsidevisible	qvoronoi/stat.h	/^    Zinsidevisible,$/;"	e	enum:statistics
Zintersect	qvoronoi/stat.h	/^    Zintersect,$/;"	e	enum:statistics
Zintersectfail	qvoronoi/stat.h	/^    Zintersectfail,$/;"	e	enum:statistics
Zintersectmax	qvoronoi/stat.h	/^    Zintersectmax,$/;"	e	enum:statistics
Zintersectnum	qvoronoi/stat.h	/^    Zintersectnum,$/;"	e	enum:statistics
Zintersecttot	qvoronoi/stat.h	/^    Zintersecttot,$/;"	e	enum:statistics
Zmaxneighbors	qvoronoi/stat.h	/^    Zmaxneighbors,$/;"	e	enum:statistics
Zmaxridges	qvoronoi/stat.h	/^    Zmaxridges,$/;"	e	enum:statistics
Zmaxvertex	qvoronoi/stat.h	/^    Zmaxvertex,$/;"	e	enum:statistics
Zmaxvertices	qvoronoi/stat.h	/^    Zmaxvertices,$/;"	e	enum:statistics
Zmaxvneighbors	qvoronoi/stat.h	/^    Zmaxvneighbors,$/;"	e	enum:statistics
Zmemfacets	qvoronoi/stat.h	/^    Zmemfacets,$/;"	e	enum:statistics
Zmempoints	qvoronoi/stat.h	/^    Zmempoints,$/;"	e	enum:statistics
Zmemridges	qvoronoi/stat.h	/^    Zmemridges,$/;"	e	enum:statistics
Zmemvertices	qvoronoi/stat.h	/^    Zmemvertices,$/;"	e	enum:statistics
Zmergeflipdup	qvoronoi/stat.h	/^    Zmergeflipdup,$/;"	e	enum:statistics
Zmergehorizon	qvoronoi/stat.h	/^    Zmergehorizon,$/;"	e	enum:statistics
Zmergeinitmax	qvoronoi/stat.h	/^    Zmergeinitmax,$/;"	e	enum:statistics
Zmergeinittot	qvoronoi/stat.h	/^    Zmergeinittot,$/;"	e	enum:statistics
Zmergeinittot2	qvoronoi/stat.h	/^    Zmergeinittot2,$/;"	e	enum:statistics
Zmergeintohorizon	qvoronoi/stat.h	/^    Zmergeintohorizon,$/;"	e	enum:statistics
Zmergenew	qvoronoi/stat.h	/^    Zmergenew,$/;"	e	enum:statistics
Zmergesetmax	qvoronoi/stat.h	/^    Zmergesetmax,$/;"	e	enum:statistics
Zmergesettot	qvoronoi/stat.h	/^    Zmergesettot,$/;"	e	enum:statistics
Zmergesettot2	qvoronoi/stat.h	/^    Zmergesettot2,$/;"	e	enum:statistics
Zmergesimplex	qvoronoi/stat.h	/^    Zmergesimplex,$/;"	e	enum:statistics
Zmergevertex	qvoronoi/stat.h	/^    Zmergevertex,$/;"	e	enum:statistics
Zminnorm	qvoronoi/stat.h	/^    Zminnorm,$/;"	e	enum:statistics
Zminnorm	qvoronoi/stat.h	/^  Zminnorm,$/;"	e	enum:statistics
Zmultiridge	qvoronoi/stat.h	/^    Zmultiridge,$/;"	e	enum:statistics
Zmultiridge	qvoronoi/stat.h	/^  Zmultiridge,$/;"	e	enum:statistics
Znearlysingular	qvoronoi/stat.h	/^    Znearlysingular,$/;"	e	enum:statistics
Znearlysingular	qvoronoi/stat.h	/^  Znearlysingular,$/;"	e	enum:statistics
Zneighbor	qvoronoi/stat.h	/^    Zneighbor,$/;"	e	enum:statistics
Znewfacetmax	qvoronoi/stat.h	/^    Znewfacetmax,$/;"	e	enum:statistics
Znewfacettot	qvoronoi/stat.h	/^    Znewfacettot,$/;"	e	enum:statistics
Znewvertex	qvoronoi/stat.h	/^    Znewvertex,$/;"	e	enum:statistics
Znoarea	qvoronoi/stat.h	/^    Znoarea,$/;"	e	enum:statistics
Znonsimplicial	qvoronoi/stat.h	/^    Znonsimplicial,$/;"	e	enum:statistics
Znotgood	qvoronoi/stat.h	/^    Znotgood,$/;"	e	enum:statistics
Znotgoodnew	qvoronoi/stat.h	/^    Znotgoodnew,$/;"	e	enum:statistics
Znotmax	qvoronoi/stat.h	/^    Znotmax,$/;"	e	enum:statistics
Znowsimplicial	qvoronoi/stat.h	/^    Znowsimplicial,$/;"	e	enum:statistics
Znumfacets	qvoronoi/stat.h	/^    Znumfacets,$/;"	e	enum:statistics
Znummergemax	qvoronoi/stat.h	/^    Znummergemax,$/;"	e	enum:statistics
Znummergetot	qvoronoi/stat.h	/^    Znummergetot,$/;"	e	enum:statistics
Znumneighbors	qvoronoi/stat.h	/^    Znumneighbors,$/;"	e	enum:statistics
Znumridges	qvoronoi/stat.h	/^    Znumridges,$/;"	e	enum:statistics
Znumvertices	qvoronoi/stat.h	/^    Znumvertices,$/;"	e	enum:statistics
Znumvisibility	qvoronoi/stat.h	/^    Znumvisibility,$/;"	e	enum:statistics
Znumvisibility	qvoronoi/stat.h	/^  Znumvisibility,$/;"	e	enum:statistics
Znumvneighbors	qvoronoi/stat.h	/^    Znumvneighbors,$/;"	e	enum:statistics
Zonehorizon	qvoronoi/stat.h	/^    Zonehorizon,$/;"	e	enum:statistics
Zpartangle	qvoronoi/stat.h	/^    Zpartangle,$/;"	e	enum:statistics
Zpartcoplanar	qvoronoi/stat.h	/^    Zpartcoplanar,$/;"	e	enum:statistics
Zpartcoplanar	qvoronoi/stat.h	/^  Zpartcoplanar,$/;"	e	enum:statistics
Zpartflip	qvoronoi/stat.h	/^    Zpartflip,$/;"	e	enum:statistics
Zparthorizon	qvoronoi/stat.h	/^    Zparthorizon,$/;"	e	enum:statistics
Zpartinside	qvoronoi/stat.h	/^    Zpartinside,$/;"	e	enum:statistics
Zpartition	qvoronoi/stat.h	/^    Zpartition,$/;"	e	enum:statistics
Zpartition	qvoronoi/stat.h	/^  Zpartition,$/;"	e	enum:statistics
Zpartitionall	qvoronoi/stat.h	/^    Zpartitionall,$/;"	e	enum:statistics
Zpartitionall	qvoronoi/stat.h	/^  Zpartitionall,$/;"	e	enum:statistics
Zpartnear	qvoronoi/stat.h	/^    Zpartnear,$/;"	e	enum:statistics
Zpbalance	qvoronoi/stat.h	/^    Zpbalance,$/;"	e	enum:statistics
Zpostfacets	qvoronoi/stat.h	/^    Zpostfacets,$/;"	e	enum:statistics
Zpremergetot	qvoronoi/stat.h	/^    Zpremergetot,$/;"	e	enum:statistics
Zprocessed	qvoronoi/stat.h	/^    Zprocessed,$/;"	e	enum:statistics
Zprocessed	qvoronoi/stat.h	/^  Zprocessed,$/;"	e	enum:statistics
Zremvertex	qvoronoi/stat.h	/^    Zremvertex,$/;"	e	enum:statistics
Zremvertexdel	qvoronoi/stat.h	/^    Zremvertexdel,$/;"	e	enum:statistics
Zrenameall	qvoronoi/stat.h	/^    Zrenameall,$/;"	e	enum:statistics
Zrenamepinch	qvoronoi/stat.h	/^    Zrenamepinch,$/;"	e	enum:statistics
Zrenameshare	qvoronoi/stat.h	/^    Zrenameshare,$/;"	e	enum:statistics
Zretry	qvoronoi/stat.h	/^    Zretry,$/;"	e	enum:statistics
Zretry	qvoronoi/stat.h	/^  Zretry,$/;"	e	enum:statistics
Zridge	qvoronoi/stat.h	/^    Zridge,$/;"	e	enum:statistics
Zridge	qvoronoi/stat.h	/^  Zridge,$/;"	e	enum:statistics
Zridge0	qvoronoi/stat.h	/^    Zridge0,$/;"	e	enum:statistics
Zridge0	qvoronoi/stat.h	/^  Zridge0,$/;"	e	enum:statistics
Zridgemid	qvoronoi/stat.h	/^    Zridgemid,$/;"	e	enum:statistics
Zridgemid	qvoronoi/stat.h	/^  Zridgemid,$/;"	e	enum:statistics
Zridgeok	qvoronoi/stat.h	/^    Zridgeok,$/;"	e	enum:statistics
Zridgeok	qvoronoi/stat.h	/^  Zridgeok,$/;"	e	enum:statistics
Zsearchpoints	qvoronoi/stat.h	/^    Zsearchpoints,$/;"	e	enum:statistics
Zsetplane	qvoronoi/stat.h	/^    Zsetplane,$/;"	e	enum:statistics
Zsetplane	qvoronoi/stat.h	/^  Zsetplane,$/;"	e	enum:statistics
Ztestvneighbor	qvoronoi/stat.h	/^    Ztestvneighbor,$/;"	e	enum:statistics
Ztotcheck	qvoronoi/stat.h	/^    Ztotcheck,$/;"	e	enum:statistics
Ztotcheck	qvoronoi/stat.h	/^  Ztotcheck,$/;"	e	enum:statistics
Ztothorizon	qvoronoi/stat.h	/^    Ztothorizon,$/;"	e	enum:statistics
Ztotmerge	qvoronoi/stat.h	/^    Ztotmerge,$/;"	e	enum:statistics
Ztotmerge	qvoronoi/stat.h	/^  Ztotmerge,$/;"	e	enum:statistics
Ztotpartcoplanar	qvoronoi/stat.h	/^    Ztotpartcoplanar,$/;"	e	enum:statistics
Ztotpartition	qvoronoi/stat.h	/^    Ztotpartition,$/;"	e	enum:statistics
Ztotridges	qvoronoi/stat.h	/^    Ztotridges,$/;"	e	enum:statistics
Ztotvertices	qvoronoi/stat.h	/^    Ztotvertices,$/;"	e	enum:statistics
Ztotvisible	qvoronoi/stat.h	/^    Ztotvisible,$/;"	e	enum:statistics
Ztricoplanar	qvoronoi/stat.h	/^    Ztricoplanar,$/;"	e	enum:statistics
Ztricoplanarmax	qvoronoi/stat.h	/^    Ztricoplanarmax,$/;"	e	enum:statistics
Ztricoplanartot	qvoronoi/stat.h	/^    Ztricoplanartot,$/;"	e	enum:statistics
Ztridegen	qvoronoi/stat.h	/^    Ztridegen,$/;"	e	enum:statistics
Ztrimirror	qvoronoi/stat.h	/^    Ztrimirror,$/;"	e	enum:statistics
Ztrinull	qvoronoi/stat.h	/^    Ztrinull,$/;"	e	enum:statistics
Zvertexridge	qvoronoi/stat.h	/^    Zvertexridge,$/;"	e	enum:statistics
Zvertexridgemax	qvoronoi/stat.h	/^    Zvertexridgemax,$/;"	e	enum:statistics
Zvertexridgetot	qvoronoi/stat.h	/^    Zvertexridgetot,$/;"	e	enum:statistics
Zvertices	qvoronoi/stat.h	/^    Zvertices,$/;"	e	enum:statistics
Zvisfacetmax	qvoronoi/stat.h	/^    Zvisfacetmax,$/;"	e	enum:statistics
Zvisfacettot	qvoronoi/stat.h	/^    Zvisfacettot,$/;"	e	enum:statistics
Zvisit	qvoronoi/stat.h	/^    Zvisit,$/;"	e	enum:statistics
Zvisit2max	qvoronoi/stat.h	/^    Zvisit2max,$/;"	e	enum:statistics
Zvisvertexmax	qvoronoi/stat.h	/^    Zvisvertexmax,$/;"	e	enum:statistics
Zvisvertextot	qvoronoi/stat.h	/^    Zvisvertextot,$/;"	e	enum:statistics
Zvvisit	qvoronoi/stat.h	/^    Zvvisit,$/;"	e	enum:statistics
Zvvisit2max	qvoronoi/stat.h	/^    Zvvisit2max,$/;"	e	enum:statistics
Zwidefacet	qvoronoi/stat.h	/^    Zwidefacet,$/;"	e	enum:statistics
Zwidevertices	qvoronoi/stat.h	/^    Zwidevertices,$/;"	e	enum:statistics
__6_LAYER__	Parameters_input.h	4;"	d
__FFT_FUNCTION_SET__	FFT_Function_Set.h	2;"	d
__GrainsIndicator__	GrainsIndicator.h	2;"	d
__LLG_KERNEL_H__	LLG_kernel.cu	7;"	d	file:
__MiscFunctions__	MiscFunctions.h	2;"	d
__OUTPUTS__	Outputs.h	2;"	d
__PARAMETER_INPUT__	Parameters_input.h	2;"	d
__PARAMETER__	Parameters.h	2;"	d
angle	qvoronoi/merge.h	/^  realT   angle;        \/* angle between normals of facet1 and facet2 *\/$/;"	m	struct:mergeT
angle1	Parameters_input.cu	/^			  angle1, angle2, angle3, angle4, angle5, angle6,$/;"	v
angle12	Parameters_input.cu	/^			  angle12, angle23, angle34, angle45, angle56,$/;"	v
angle2	Parameters_input.cu	/^			  angle1, angle2, angle3, angle4, angle5, angle6,$/;"	v
angle23	Parameters_input.cu	/^			  angle12, angle23, angle34, angle45, angle56,$/;"	v
angle3	Parameters_input.cu	/^			  angle1, angle2, angle3, angle4, angle5, angle6,$/;"	v
angle34	Parameters_input.cu	/^			  angle12, angle23, angle34, angle45, angle56,$/;"	v
angle4	Parameters_input.cu	/^			  angle1, angle2, angle3, angle4, angle5, angle6,$/;"	v
angle45	Parameters_input.cu	/^			  angle12, angle23, angle34, angle45, angle56,$/;"	v
angle5	Parameters_input.cu	/^			  angle1, angle2, angle3, angle4, angle5, angle6,$/;"	v
angle56	Parameters_input.cu	/^			  angle12, angle23, angle34, angle45, angle56,$/;"	v
angle6	Parameters_input.cu	/^			  angle1, angle2, angle3, angle4, angle5, angle6,$/;"	v
area	qvoronoi/libqhull.h	/^   realT   area;        \/* area of facet, only in io.c if  ->isarea *\/$/;"	m	union:facetT::__anon3
boolT	qvoronoi/libqhull.h	102;"	d
bottom	clipper/clipper.h	/^struct IntRect { cInt left; cInt top; cInt right; cInt bottom; };$/;"	m	struct:ClipperLib::IntRect
bottom	qvoronoi/libqhull.h	/^  facetT  *bottom;      \/* bottom facet this ridge is part of *\/$/;"	m	struct:ridgeT
build_cnt	qvoronoi/libqhull.h	/^  int   build_cnt;        \/* number of calls to qh_initbuild *\/$/;"	m	struct:qhT
cInt	clipper/clipper.h	/^  typedef int cInt;$/;"	t	namespace:ClipperLib
cInt	clipper/clipper.h	/^  typedef signed long long cInt;$/;"	t	namespace:ClipperLib
center	qvoronoi/libqhull.h	/^  coordT  *center;      \/*  centrum for convexity, qh CENTERtype == qh_AScentrum *\/$/;"	m	struct:facetT
center_size	qvoronoi/libqhull.h	/^  int center_size;     \/* size in bytes for Voronoi centers *\/$/;"	m	struct:qhT
centrum_radius	qvoronoi/libqhull.h	/^  realT centrum_radius;   \/* max centrum radius for convexity (roundoff added) *\/$/;"	m	struct:qhT
clipperException	clipper/clipper.h	/^    clipperException(const char* description): m_descr(description) {}$/;"	f	class:ClipperLib::clipperException
clipperException	clipper/clipper.h	/^class clipperException : public std::exception$/;"	c	namespace:ClipperLib
clipper_h	clipper/clipper.h	35;"	d
cntlarger	qvoronoi/mem.h	/^  int      cntlarger;         \/* count of setlarger's *\/$/;"	m	struct:qhmemT
cntlong	qvoronoi/mem.h	/^  int      cntlong;           \/* count of long allocations *\/$/;"	m	struct:qhmemT
cntquick	qvoronoi/mem.h	/^  int      cntquick;          \/* count of quick allocations *\/$/;"	m	struct:qhmemT
cntshort	qvoronoi/mem.h	/^  int      cntshort;          \/* count of short allocations *\/$/;"	m	struct:qhmemT
coor2d_t	MiscFunctions.h	/^struct coor2d_t{$/;"	s
coordT	qvoronoi/libqhull.h	74;"	d
coplanar	qvoronoi/libqhull.h	/^  flagT    coplanar:1;  \/* True if horizon facet is coplanar at last use *\/$/;"	m	struct:facetT
coplanarfacetset	qvoronoi/libqhull.h	/^  setT *coplanarfacetset;  \/* set of coplanar facets for searching qh_findbesthorizon() *\/$/;"	m	struct:qhT
coplanarset	qvoronoi/libqhull.h	/^  setT    *coplanarset; \/* set of points coplanar with this facet$/;"	m	struct:facetT
cos_max	qvoronoi/libqhull.h	/^  realT cos_max;          \/* max cosine for convexity (roundoff added) *\/$/;"	m	struct:qhT
count	qvoronoi/stat.h	/^  short int  count[ZEND];     \/* -1 if none, else index of count to use *\/$/;"	m	struct:qhstatT
ctDifference	clipper/clipper.h	/^enum ClipType { ctIntersection, ctUnion, ctDifference, ctXor };$/;"	e	enum:ClipperLib::ClipType
ctIntersection	clipper/clipper.h	/^enum ClipType { ctIntersection, ctUnion, ctDifference, ctXor };$/;"	e	enum:ClipperLib::ClipType
ctUnion	clipper/clipper.h	/^enum ClipType { ctIntersection, ctUnion, ctDifference, ctXor };$/;"	e	enum:ClipperLib::ClipType
ctXor	clipper/clipper.h	/^enum ClipType { ctIntersection, ctUnion, ctDifference, ctXor };$/;"	e	enum:ClipperLib::ClipType
curbuffer	qvoronoi/mem.h	/^  void    *curbuffer;         \/* current buffer, linked by offset 0 *\/$/;"	m	struct:qhmemT
currentDateTime	LLG_CUDA.cu	/^const std::string currentDateTime(){$/;"	f
cycledone	qvoronoi/libqhull.h	/^  flagT     cycledone:1;\/* True if mergecycle_all already done *\/$/;"	m	struct:facetT
dHk1_scale	Parameters_input.cu	/^	   dHk1_scale, dHk2_scale, dHk3_scale, dHk4_scale, dHk5_scale, dHk6_scale;$/;"	v
dHk2_scale	Parameters_input.cu	/^	   dHk1_scale, dHk2_scale, dHk3_scale, dHk4_scale, dHk5_scale, dHk6_scale;$/;"	v
dHk3_scale	Parameters_input.cu	/^	   dHk1_scale, dHk2_scale, dHk3_scale, dHk4_scale, dHk5_scale, dHk6_scale;$/;"	v
dHk4_scale	Parameters_input.cu	/^	   dHk1_scale, dHk2_scale, dHk3_scale, dHk4_scale, dHk5_scale, dHk6_scale;$/;"	v
dHk5_scale	Parameters_input.cu	/^	   dHk1_scale, dHk2_scale, dHk3_scale, dHk4_scale, dHk5_scale, dHk6_scale;$/;"	v
dHk6_scale	Parameters_input.cu	/^	   dHk1_scale, dHk2_scale, dHk3_scale, dHk4_scale, dHk5_scale, dHk6_scale;$/;"	v
dLeftToRight	clipper/clipper.cu	/^enum Direction { dRightToLeft, dLeftToRight };$/;"	e	enum:ClipperLib::Direction	file:
dRightToLeft	clipper/clipper.cu	/^enum Direction { dRightToLeft, dLeftToRight };$/;"	e	enum:ClipperLib::Direction	file:
dW	qvoronoi/geom.h	97;"	d
dX	qvoronoi/geom.h	94;"	d
dY	qvoronoi/geom.h	95;"	d
dZ	qvoronoi/geom.h	96;"	d
def_arc_tolerance	clipper/clipper.cu	/^static double const def_arc_tolerance = 0.25;$/;"	m	namespace:ClipperLib	file:
def_perc	Parameters_input.cu	/^double def_perc;$/;"	v
degen_mergeset	qvoronoi/libqhull.h	/^  setT *degen_mergeset;   \/* temporary set of degenerate and redundant merges *\/$/;"	m	struct:qhT
degenerate	qvoronoi/libqhull.h	/^  flagT    degenerate:1; \/* True if facet is degenerate (degen_mergeset or ->tricoplanar) *\/$/;"	m	struct:facetT
del_vertices	qvoronoi/libqhull.h	/^  setT *del_vertices;     \/* vertices to partition and delete with visible$/;"	m	struct:qhT
deleted	qvoronoi/libqhull.h	/^  flagT    deleted:1;   \/* true if vertex on qh del_vertices *\/$/;"	m	struct:vertexT
delridge	qvoronoi/libqhull.h	/^  flagT    delridge:1;  \/* vertex was part of a deleted ridge *\/$/;"	m	struct:vertexT
delta_t	Parameters_input.cu	/^double GrainDx, GrainDy, delta_x, delta_y, delta_z, delta_t, Temperature,$/;"	v
delta_x	Parameters_input.cu	/^double GrainDx, GrainDy, delta_x, delta_y, delta_z, delta_t, Temperature,$/;"	v
delta_y	Parameters_input.cu	/^double GrainDx, GrainDy, delta_x, delta_y, delta_z, delta_t, Temperature,$/;"	v
delta_z	Parameters_input.cu	/^double GrainDx, GrainDy, delta_x, delta_y, delta_z, delta_t, Temperature,$/;"	v
det2_	qvoronoi/geom.h	69;"	d
det3_	qvoronoi/geom.h	80;"	d
dev_Aex	Parameters.h	/^static double *dev_Aex = NULL, *dev_Ku = NULL, *dev_Ms = NULL, *dev_alpha = NULL, *dev_gamma = NULL;$/;"	v
dev_Aex_XM	Parameters.h	/^static double *dev_Aex_XP = NULL, *dev_Aex_XM = NULL, *dev_Aex_YP = NULL, *dev_Aex_YM = NULL, *dev_Aex_ZP = NULL, *dev_Aex_ZM = NULL;  \/\/zyliu$/;"	v
dev_Aex_XP	Parameters.h	/^static double *dev_Aex_XP = NULL, *dev_Aex_XM = NULL, *dev_Aex_YP = NULL, *dev_Aex_YM = NULL, *dev_Aex_ZP = NULL, *dev_Aex_ZM = NULL;  \/\/zyliu$/;"	v
dev_Aex_YM	Parameters.h	/^static double *dev_Aex_XP = NULL, *dev_Aex_XM = NULL, *dev_Aex_YP = NULL, *dev_Aex_YM = NULL, *dev_Aex_ZP = NULL, *dev_Aex_ZM = NULL;  \/\/zyliu$/;"	v
dev_Aex_YP	Parameters.h	/^static double *dev_Aex_XP = NULL, *dev_Aex_XM = NULL, *dev_Aex_YP = NULL, *dev_Aex_YM = NULL, *dev_Aex_ZP = NULL, *dev_Aex_ZM = NULL;  \/\/zyliu$/;"	v
dev_Aex_ZM	Parameters.h	/^static double *dev_Aex_XP = NULL, *dev_Aex_XM = NULL, *dev_Aex_YP = NULL, *dev_Aex_YM = NULL, *dev_Aex_ZP = NULL, *dev_Aex_ZM = NULL;  \/\/zyliu$/;"	v
dev_Aex_ZP	Parameters.h	/^static double *dev_Aex_XP = NULL, *dev_Aex_XM = NULL, *dev_Aex_YP = NULL, *dev_Aex_YM = NULL, *dev_Aex_ZP = NULL, *dev_Aex_ZM = NULL;  \/\/zyliu$/;"	v
dev_Aex_temp	Parameters.h	/^static double *dev_Aex_temp = NULL, *dev_Ku_temp = NULL, *dev_Ms_temp = NULL, *dev_alpha_temp = NULL;$/;"	v
dev_D	Parameters.h	/^static double *dev_D = NULL, *dev_T = NULL;$/;"	v
dev_GasArray	Parameters.h	/^static double *dev_GasArray = NULL;$/;"	v
dev_Gxx_cufft	LLG_CUDA.cu	/^cufftComplex *dev_Gxx_cufft = NULL,  *dev_Gxy_cufft = NULL,  *dev_Gxz_cufft = NULL,$/;"	v
dev_Gxy_cufft	LLG_CUDA.cu	/^cufftComplex *dev_Gxx_cufft = NULL,  *dev_Gxy_cufft = NULL,  *dev_Gxz_cufft = NULL,$/;"	v
dev_Gxz_cufft	LLG_CUDA.cu	/^cufftComplex *dev_Gxx_cufft = NULL,  *dev_Gxy_cufft = NULL,  *dev_Gxz_cufft = NULL,$/;"	v
dev_Gyx_cufft	LLG_CUDA.cu	/^             *dev_Gyx_cufft = NULL,  *dev_Gyy_cufft = NULL,  *dev_Gyz_cufft = NULL,$/;"	v
dev_Gyy_cufft	LLG_CUDA.cu	/^             *dev_Gyx_cufft = NULL,  *dev_Gyy_cufft = NULL,  *dev_Gyz_cufft = NULL,$/;"	v
dev_Gyz_cufft	LLG_CUDA.cu	/^             *dev_Gyx_cufft = NULL,  *dev_Gyy_cufft = NULL,  *dev_Gyz_cufft = NULL,$/;"	v
dev_Gzx_cufft	LLG_CUDA.cu	/^             *dev_Gzx_cufft = NULL,  *dev_Gzy_cufft = NULL,  *dev_Gzz_cufft = NULL;$/;"	v
dev_Gzy_cufft	LLG_CUDA.cu	/^             *dev_Gzx_cufft = NULL,  *dev_Gzy_cufft = NULL,  *dev_Gzz_cufft = NULL;$/;"	v
dev_Gzz_cufft	LLG_CUDA.cu	/^             *dev_Gzx_cufft = NULL,  *dev_Gzy_cufft = NULL,  *dev_Gzz_cufft = NULL;$/;"	v
dev_H1_x	Parameters.h	/^static double *dev_H1_x = NULL, *dev_H1_y = NULL, *dev_H1_z = NULL, *dev_H2_x = NULL, *dev_H2_y = NULL, *dev_H2_z = NULL, \/\/zyliu$/;"	v
dev_H1_y	Parameters.h	/^static double *dev_H1_x = NULL, *dev_H1_y = NULL, *dev_H1_z = NULL, *dev_H2_x = NULL, *dev_H2_y = NULL, *dev_H2_z = NULL, \/\/zyliu$/;"	v
dev_H1_z	Parameters.h	/^static double *dev_H1_x = NULL, *dev_H1_y = NULL, *dev_H1_z = NULL, *dev_H2_x = NULL, *dev_H2_y = NULL, *dev_H2_z = NULL, \/\/zyliu$/;"	v
dev_H2_x	Parameters.h	/^static double *dev_H1_x = NULL, *dev_H1_y = NULL, *dev_H1_z = NULL, *dev_H2_x = NULL, *dev_H2_y = NULL, *dev_H2_z = NULL, \/\/zyliu$/;"	v
dev_H2_y	Parameters.h	/^static double *dev_H1_x = NULL, *dev_H1_y = NULL, *dev_H1_z = NULL, *dev_H2_x = NULL, *dev_H2_y = NULL, *dev_H2_z = NULL, \/\/zyliu$/;"	v
dev_H2_z	Parameters.h	/^static double *dev_H1_x = NULL, *dev_H1_y = NULL, *dev_H1_z = NULL, *dev_H2_x = NULL, *dev_H2_y = NULL, *dev_H2_z = NULL, \/\/zyliu$/;"	v
dev_H3_x	Parameters.h	/^			  *dev_H3_x = NULL, *dev_H3_y = NULL, *dev_H3_z = NULL, *dev_H4_x = NULL, *dev_H4_y = NULL, *dev_H4_z = NULL; \/\/zyliu$/;"	v
dev_H3_y	Parameters.h	/^			  *dev_H3_x = NULL, *dev_H3_y = NULL, *dev_H3_z = NULL, *dev_H4_x = NULL, *dev_H4_y = NULL, *dev_H4_z = NULL; \/\/zyliu$/;"	v
dev_H3_z	Parameters.h	/^			  *dev_H3_x = NULL, *dev_H3_y = NULL, *dev_H3_z = NULL, *dev_H4_x = NULL, *dev_H4_y = NULL, *dev_H4_z = NULL; \/\/zyliu$/;"	v
dev_H4_x	Parameters.h	/^			  *dev_H3_x = NULL, *dev_H3_y = NULL, *dev_H3_z = NULL, *dev_H4_x = NULL, *dev_H4_y = NULL, *dev_H4_z = NULL; \/\/zyliu$/;"	v
dev_H4_y	Parameters.h	/^			  *dev_H3_x = NULL, *dev_H3_y = NULL, *dev_H3_z = NULL, *dev_H4_x = NULL, *dev_H4_y = NULL, *dev_H4_z = NULL; \/\/zyliu$/;"	v
dev_H4_z	Parameters.h	/^			  *dev_H3_x = NULL, *dev_H3_y = NULL, *dev_H3_z = NULL, *dev_H4_x = NULL, *dev_H4_y = NULL, *dev_H4_z = NULL; \/\/zyliu$/;"	v
dev_Ha_x	Parameters.h	/^static double *dev_Ha_x  = NULL, *dev_Ha_y  = NULL, *dev_Ha_z  = NULL;$/;"	v
dev_Ha_y	Parameters.h	/^static double *dev_Ha_x  = NULL, *dev_Ha_y  = NULL, *dev_Ha_z  = NULL;$/;"	v
dev_Ha_z	Parameters.h	/^static double *dev_Ha_x  = NULL, *dev_Ha_y  = NULL, *dev_Ha_z  = NULL;$/;"	v
dev_Hal_x	Parameters.h	/^static double *dev_Hal_x  = NULL, *dev_Hal_y  = NULL, *dev_Hal_z  = NULL;$/;"	v
dev_Hal_y	Parameters.h	/^static double *dev_Hal_x  = NULL, *dev_Hal_y  = NULL, *dev_Hal_z  = NULL;$/;"	v
dev_Hal_z	Parameters.h	/^static double *dev_Hal_x  = NULL, *dev_Hal_y  = NULL, *dev_Hal_z  = NULL;$/;"	v
dev_Happl_x	Parameters.h	/^static double *dev_Happl_x = NULL, *dev_Happl_y = NULL, *dev_Happl_z = NULL;$/;"	v
dev_Happl_y	Parameters.h	/^static double *dev_Happl_x = NULL, *dev_Happl_y = NULL, *dev_Happl_z = NULL;$/;"	v
dev_Happl_z	Parameters.h	/^static double *dev_Happl_x = NULL, *dev_Happl_y = NULL, *dev_Happl_z = NULL;$/;"	v
dev_Hd_x	Parameters.h	/^static double *dev_Hd_x  = NULL, *dev_Hd_y  = NULL, *dev_Hd_z  = NULL;$/;"	v
dev_Hd_x_cufft	LLG_CUDA.cu	/^cufftComplex *dev_Hd_x_cufft = NULL, *dev_Hd_y_cufft = NULL, *dev_Hd_z_cufft = NULL;$/;"	v
dev_Hd_y	Parameters.h	/^static double *dev_Hd_x  = NULL, *dev_Hd_y  = NULL, *dev_Hd_z  = NULL;$/;"	v
dev_Hd_y_cufft	LLG_CUDA.cu	/^cufftComplex *dev_Hd_x_cufft = NULL, *dev_Hd_y_cufft = NULL, *dev_Hd_z_cufft = NULL;$/;"	v
dev_Hd_z	Parameters.h	/^static double *dev_Hd_x  = NULL, *dev_Hd_y  = NULL, *dev_Hd_z  = NULL;$/;"	v
dev_Hd_z_cufft	LLG_CUDA.cu	/^cufftComplex *dev_Hd_x_cufft = NULL, *dev_Hd_y_cufft = NULL, *dev_Hd_z_cufft = NULL;$/;"	v
dev_Hint_x	Parameters.h	/^static double *dev_Hint_x  = NULL, *dev_Hint_y  = NULL, *dev_Hint_z  = NULL;$/;"	v
dev_Hint_y	Parameters.h	/^static double *dev_Hint_x  = NULL, *dev_Hint_y  = NULL, *dev_Hint_z  = NULL;$/;"	v
dev_Hint_z	Parameters.h	/^static double *dev_Hint_x  = NULL, *dev_Hint_y  = NULL, *dev_Hint_z  = NULL;$/;"	v
dev_Hk_x	Parameters.h	/^static double *dev_Hk_x  = NULL, *dev_Hk_y  = NULL, *dev_Hk_z  = NULL;$/;"	v
dev_Hk_y	Parameters.h	/^static double *dev_Hk_x  = NULL, *dev_Hk_y  = NULL, *dev_Hk_z  = NULL;$/;"	v
dev_Hk_z	Parameters.h	/^static double *dev_Hk_x  = NULL, *dev_Hk_y  = NULL, *dev_Hk_z  = NULL;$/;"	v
dev_Hth_x	Parameters.h	/^static double *dev_Hth_x = NULL, *dev_Hth_y = NULL, *dev_Hth_z = NULL;$/;"	v
dev_Hth_y	Parameters.h	/^static double *dev_Hth_x = NULL, *dev_Hth_y = NULL, *dev_Hth_z = NULL;$/;"	v
dev_Hth_z	Parameters.h	/^static double *dev_Hth_x = NULL, *dev_Hth_y = NULL, *dev_Hth_z = NULL;$/;"	v
dev_Ku	Parameters.h	/^static double *dev_Aex = NULL, *dev_Ku = NULL, *dev_Ms = NULL, *dev_alpha = NULL, *dev_gamma = NULL;$/;"	v
dev_Ku_temp	Parameters.h	/^static double *dev_Aex_temp = NULL, *dev_Ku_temp = NULL, *dev_Ms_temp = NULL, *dev_alpha_temp = NULL;$/;"	v
dev_M_temp_x	Parameters.h	/^static double *dev_M_temp_x = NULL, *dev_M_temp_y = NULL, *dev_M_temp_z = NULL;$/;"	v
dev_M_temp_y	Parameters.h	/^static double *dev_M_temp_x = NULL, *dev_M_temp_y = NULL, *dev_M_temp_z = NULL;$/;"	v
dev_M_temp_z	Parameters.h	/^static double *dev_M_temp_x = NULL, *dev_M_temp_y = NULL, *dev_M_temp_z = NULL;$/;"	v
dev_Mag0_z	Parameters.h	/^static double *dev_Mag0_z = NULL;$/;"	v
dev_Ms	Parameters.h	/^static double *dev_Aex = NULL, *dev_Ku = NULL, *dev_Ms = NULL, *dev_alpha = NULL, *dev_gamma = NULL;$/;"	v
dev_Ms_XM	Parameters.h	/^static double *dev_Ms_XP = NULL, *dev_Ms_XM = NULL, *dev_Ms_YP = NULL, *dev_Ms_YM = NULL, *dev_Ms_ZP = NULL, *dev_Ms_ZM = NULL; \/\/zyliu$/;"	v
dev_Ms_XP	Parameters.h	/^static double *dev_Ms_XP = NULL, *dev_Ms_XM = NULL, *dev_Ms_YP = NULL, *dev_Ms_YM = NULL, *dev_Ms_ZP = NULL, *dev_Ms_ZM = NULL; \/\/zyliu$/;"	v
dev_Ms_YM	Parameters.h	/^static double *dev_Ms_XP = NULL, *dev_Ms_XM = NULL, *dev_Ms_YP = NULL, *dev_Ms_YM = NULL, *dev_Ms_ZP = NULL, *dev_Ms_ZM = NULL; \/\/zyliu$/;"	v
dev_Ms_YP	Parameters.h	/^static double *dev_Ms_XP = NULL, *dev_Ms_XM = NULL, *dev_Ms_YP = NULL, *dev_Ms_YM = NULL, *dev_Ms_ZP = NULL, *dev_Ms_ZM = NULL; \/\/zyliu$/;"	v
dev_Ms_ZM	Parameters.h	/^static double *dev_Ms_XP = NULL, *dev_Ms_XM = NULL, *dev_Ms_YP = NULL, *dev_Ms_YM = NULL, *dev_Ms_ZP = NULL, *dev_Ms_ZM = NULL; \/\/zyliu$/;"	v
dev_Ms_ZP	Parameters.h	/^static double *dev_Ms_XP = NULL, *dev_Ms_XM = NULL, *dev_Ms_YP = NULL, *dev_Ms_YM = NULL, *dev_Ms_ZP = NULL, *dev_Ms_ZM = NULL; \/\/zyliu$/;"	v
dev_Ms_temp	Parameters.h	/^static double *dev_Aex_temp = NULL, *dev_Ku_temp = NULL, *dev_Ms_temp = NULL, *dev_alpha_temp = NULL;$/;"	v
dev_Mx	Parameters.h	/^static double *dev_Mx = NULL, *dev_My = NULL, *dev_Mz = NULL;$/;"	v
dev_Mx_cufft	LLG_CUDA.cu	/^cufftComplex *dev_Mx_cufft = NULL,   *dev_My_cufft = NULL,   *dev_Mz_cufft = NULL;$/;"	v
dev_My	Parameters.h	/^static double *dev_Mx = NULL, *dev_My = NULL, *dev_Mz = NULL;$/;"	v
dev_My_cufft	LLG_CUDA.cu	/^cufftComplex *dev_Mx_cufft = NULL,   *dev_My_cufft = NULL,   *dev_Mz_cufft = NULL;$/;"	v
dev_Mz	Parameters.h	/^static double *dev_Mx = NULL, *dev_My = NULL, *dev_Mz = NULL;$/;"	v
dev_Mz_cufft	LLG_CUDA.cu	/^cufftComplex *dev_Mx_cufft = NULL,   *dev_My_cufft = NULL,   *dev_Mz_cufft = NULL;$/;"	v
dev_T	Parameters.h	/^static double *dev_D = NULL, *dev_T = NULL;$/;"	v
dev_a_phi	Parameters.h	/^			  *dev_a_phi = NULL, *dev_b_phi = NULL, *dev_c_phi = NULL, *dev_d_phi = NULL;$/;"	v
dev_a_theta	Parameters.h	/^static double *dev_a_theta = NULL, *dev_b_theta = NULL, *dev_c_theta = NULL, *dev_d_theta = NULL,$/;"	v
dev_alpha	Parameters.h	/^static double *dev_Aex = NULL, *dev_Ku = NULL, *dev_Ms = NULL, *dev_alpha = NULL, *dev_gamma = NULL;$/;"	v
dev_alpha_temp	Parameters.h	/^static double *dev_Aex_temp = NULL, *dev_Ku_temp = NULL, *dev_Ms_temp = NULL, *dev_alpha_temp = NULL;$/;"	v
dev_b_phi	Parameters.h	/^			  *dev_a_phi = NULL, *dev_b_phi = NULL, *dev_c_phi = NULL, *dev_d_phi = NULL;$/;"	v
dev_b_theta	Parameters.h	/^static double *dev_a_theta = NULL, *dev_b_theta = NULL, *dev_c_theta = NULL, *dev_d_theta = NULL,$/;"	v
dev_c_phi	Parameters.h	/^			  *dev_a_phi = NULL, *dev_b_phi = NULL, *dev_c_phi = NULL, *dev_d_phi = NULL;$/;"	v
dev_c_theta	Parameters.h	/^static double *dev_a_theta = NULL, *dev_b_theta = NULL, *dev_c_theta = NULL, *dev_d_theta = NULL,$/;"	v
dev_d_phi	Parameters.h	/^			  *dev_a_phi = NULL, *dev_b_phi = NULL, *dev_c_phi = NULL, *dev_d_phi = NULL;$/;"	v
dev_d_phi_d_t	Parameters.h	/^static double *dev_d_theta_d_t = NULL, *dev_d_phi_d_t = NULL;$/;"	v
dev_d_theta	Parameters.h	/^static double *dev_a_theta = NULL, *dev_b_theta = NULL, *dev_c_theta = NULL, *dev_d_theta = NULL,$/;"	v
dev_d_theta_d_t	Parameters.h	/^static double *dev_d_theta_d_t = NULL, *dev_d_phi_d_t = NULL;$/;"	v
dev_gamma	Parameters.h	/^static double *dev_Aex = NULL, *dev_Ku = NULL, *dev_Ms = NULL, *dev_alpha = NULL, *dev_gamma = NULL;$/;"	v
dev_indicator1	Parameters.h	/^static int    *dev_indicator1 = NULL, *dev_indicator1_temp = NULL, $/;"	v
dev_indicator1_temp	Parameters.h	/^static int    *dev_indicator1 = NULL, *dev_indicator1_temp = NULL, $/;"	v
dev_indicator2	Parameters.h	/^			  *dev_indicator2 = NULL, *dev_indicator2_temp = NULL,  \/\/ Voronoi-cell inner point indicator $/;"	v
dev_indicator2_temp	Parameters.h	/^			  *dev_indicator2 = NULL, *dev_indicator2_temp = NULL,  \/\/ Voronoi-cell inner point indicator $/;"	v
dev_indicator3	Parameters.h	/^              *dev_indicator3 = NULL;$/;"	v
dev_phi	Parameters.h	/^static double *dev_theta = NULL, *dev_phi = NULL;$/;"	v
dev_theta	Parameters.h	/^static double *dev_theta = NULL, *dev_phi = NULL;$/;"	v
dev_watch2	Parameters.h	/^static double *dev_watch2 = NULL;$/;"	v
deviceID	Parameters_input.cu	/^int deviceID;$/;"	v
dfacet	qvoronoi/io.cu	/^void dfacet(unsigned id) {$/;"	f
dim	qvoronoi/libqhull.h	/^  unsigned dim:4;       \/* dimension of point if non-zero, used by cpp *\/$/;"	m	struct:vertexT
doc	qvoronoi/stat.h	/^  const char *doc[ZEND];       \/* array of documentation strings *\/$/;"	m	struct:qhstatT
domain_bnd_qfactor	Parameters_input.cu	/^double domain_bnd_qfactor;$/;"	v
dphi_dt	LLG_kernel.cu	/^__device__ static double dphi_dt(int mNx, int mNy,$/;"	f	file:
dtheta_dt	LLG_kernel.cu	/^__device__ static double dtheta_dt(int mNx, int mNy,$/;"	f	file:
dupridge	qvoronoi/libqhull.h	/^  flagT    dupridge:1;  \/* True if duplicate ridge in facet *\/$/;"	m	struct:facetT
dvertex	qvoronoi/io.cu	/^void dvertex(unsigned id) {$/;"	f
dx	FFT_Function_Set.h	21;"	d
dxNt	Parameters_input.cu	/^int dxNt;  \/\/ Number of time steps for head to travel a distance delta_x at head speed v (dxNt, derived)$/;"	v
dy	FFT_Function_Set.h	22;"	d
dz	FFT_Function_Set.h	23;"	d
e	qvoronoi/qset.h	/^  setelemT e[1];        \/* array of pointers, tail is NULL *\/$/;"	m	struct:setT
errexit	qvoronoi/libqhull.h	/^  jmp_buf errexit;        \/* exit label for qh_errexit, defined by setjmp() *\/$/;"	m	struct:qhT
errexit	qvoronoi/rboxlib.cu	/^  jmp_buf errexit;        \/* exit label for rboxpoints, defined by setjmp(), called by qh_errexit_rbox() *\/$/;"	m	struct:rboxT	file:
esLeft	clipper/clipper.h	/^enum EdgeSide { esLeft = 1, esRight = 2};$/;"	e	enum:ClipperLib::EdgeSide
esRight	clipper/clipper.h	/^enum EdgeSide { esLeft = 1, esRight = 2};$/;"	e	enum:ClipperLib::EdgeSide
etClosedLine	clipper/clipper.h	/^enum EndType {etClosedPolygon, etClosedLine, etOpenButt, etOpenSquare, etOpenRound};$/;"	e	enum:ClipperLib::EndType
etClosedPolygon	clipper/clipper.h	/^enum EndType {etClosedPolygon, etClosedLine, etOpenButt, etOpenSquare, etOpenRound};$/;"	e	enum:ClipperLib::EndType
etOpenButt	clipper/clipper.h	/^enum EndType {etClosedPolygon, etClosedLine, etOpenButt, etOpenSquare, etOpenRound};$/;"	e	enum:ClipperLib::EndType
etOpenRound	clipper/clipper.h	/^enum EndType {etClosedPolygon, etClosedLine, etOpenButt, etOpenSquare, etOpenRound};$/;"	e	enum:ClipperLib::EndType
etOpenSquare	clipper/clipper.h	/^enum EndType {etClosedPolygon, etClosedLine, etOpenButt, etOpenSquare, etOpenRound};$/;"	e	enum:ClipperLib::EndType
f	qvoronoi/libqhull.h	/^  }f;$/;"	m	struct:facetT	typeref:union:facetT::__anon3
fGrid	LLG_CUDA.cu	/^double *fGrid[3];$/;"	v
fNx	Parameters_input.cu	/^int fNx, fNy, fNz, fNx0, fNy0, fNz0, f_x0; \/\/head field profile dimensions$/;"	v
fNx0	Parameters_input.cu	/^int fNx, fNy, fNz, fNx0, fNy0, fNz0, f_x0; \/\/head field profile dimensions$/;"	v
fNy	Parameters_input.cu	/^int fNx, fNy, fNz, fNx0, fNy0, fNz0, f_x0; \/\/head field profile dimensions$/;"	v
fNy0	Parameters_input.cu	/^int fNx, fNy, fNz, fNx0, fNy0, fNz0, f_x0; \/\/head field profile dimensions$/;"	v
fNz	Parameters_input.cu	/^int fNx, fNy, fNz, fNx0, fNy0, fNz0, f_x0; \/\/head field profile dimensions$/;"	v
fNz0	Parameters_input.cu	/^int fNx, fNy, fNz, fNx0, fNy0, fNz0, f_x0; \/\/head field profile dimensions$/;"	v
fSeq	LLG_CUDA.cu	/^double *fSeq = NULL;$/;"	v
f_x0	Parameters_input.cu	/^int fNx, fNy, fNz, fNx0, fNy0, fNz0, f_x0; \/\/head field profile dimensions$/;"	v
fabs_	qvoronoi/geom.h	27;"	d
facet1	qvoronoi/merge.h	/^  facetT *facet1;       \/* will merge facet1 into facet2 *\/$/;"	m	struct:mergeT
facet2	qvoronoi/merge.h	/^  facetT *facet2;$/;"	m	struct:mergeT
facetT	qvoronoi/libqhull.h	/^struct facetT {$/;"	s
facetT	qvoronoi/libqhull.h	/^typedef struct facetT facetT;$/;"	t	typeref:struct:facetT
facetT	qvoronoi/mem.cu	/^typedef struct facetT facetT;$/;"	t	typeref:struct:facetT	file:
facetT	qvoronoi/qset.cu	/^typedef struct facetT facetT;$/;"	t	typeref:struct:facetT	file:
facet_id	qvoronoi/libqhull.h	/^  unsigned facet_id;      \/* ID of next, new facet from newfacet() *\/$/;"	m	struct:qhT
facet_list	qvoronoi/libqhull.h	/^  facetT *facet_list;     \/* first facet *\/$/;"	m	struct:qhT
facet_mergeset	qvoronoi/libqhull.h	/^  setT *facet_mergeset;   \/* temporary set of merges to be done *\/$/;"	m	struct:qhT
facet_next	qvoronoi/libqhull.h	/^  facetT *facet_next;     \/* next facet for buildhull()$/;"	m	struct:qhT
facet_tail	qvoronoi/libqhull.h	/^  facetT  *facet_tail;     \/* end of facet_list (dummy facet) *\/$/;"	m	struct:qhT
feasible_point	qvoronoi/libqhull.h	/^  coordT *feasible_point;  \/*    as coordinates, both malloc'd *\/$/;"	m	struct:qhT
feasible_string	qvoronoi/libqhull.h	/^  char  *feasible_string;  \/* feasible point 'Hn,n,n' for halfspace intersection *\/$/;"	m	struct:qhT
ferr	qvoronoi/libqhull.h	/^  FILE *ferr;             \/* pointer to error file *\/$/;"	m	struct:qhT
ferr	qvoronoi/mem.h	/^  FILE    *ferr;              \/* file for reporting errors, only user is qh_fprintf() *\/$/;"	m	struct:qhmemT
ferr	qvoronoi/rboxlib.cu	/^  FILE *ferr;$/;"	m	struct:rboxT	file:
field1	Parameters_input.cu	/^	          field1, field2, field3, field4, field5, field6,$/;"	v
field12	Parameters_input.cu	/^			  field12, field23, field34, field45, field56,$/;"	v
field2	Parameters_input.cu	/^	          field1, field2, field3, field4, field5, field6,$/;"	v
field23	Parameters_input.cu	/^			  field12, field23, field34, field45, field56,$/;"	v
field3	Parameters_input.cu	/^	          field1, field2, field3, field4, field5, field6,$/;"	v
field34	Parameters_input.cu	/^			  field12, field23, field34, field45, field56,$/;"	v
field4	Parameters_input.cu	/^	          field1, field2, field3, field4, field5, field6,$/;"	v
field45	Parameters_input.cu	/^			  field12, field23, field34, field45, field56,$/;"	v
field5	Parameters_input.cu	/^	          field1, field2, field3, field4, field5, field6,$/;"	v
field56	Parameters_input.cu	/^			  field12, field23, field34, field45, field56,$/;"	v
field6	Parameters_input.cu	/^	          field1, field2, field3, field4, field5, field6,$/;"	v
fin	qvoronoi/libqhull.h	/^  FILE *fin;              \/* pointer to input file, init by qh_meminit *\/$/;"	m	struct:qhT
findbest_notsharp	qvoronoi/libqhull.h	/^  boolT findbest_notsharp; \/* true if new facets are at least 90 degrees *\/$/;"	m	struct:qhT
findbestnew	qvoronoi/libqhull.h	/^  boolT findbestnew;      \/* true if partitioning calls qh_findbestnew *\/$/;"	m	struct:qhT
first_point	qvoronoi/libqhull.h	/^  pointT *first_point;    \/* array of input points, see POINTSmalloc *\/$/;"	m	struct:qhT
firstcentrum	qvoronoi/libqhull.h	/^  boolT firstcentrum;     \/* for qh_printcentrum *\/$/;"	m	struct:qhT
flag	Parameters.h	/^int static flag = 0;$/;"	v
flagT	qvoronoi/libqhull.h	90;"	d
flipped	qvoronoi/libqhull.h	/^  flagT    flipped:1;   \/* True if facet is flipped *\/$/;"	m	struct:facetT
fmax_	qvoronoi/geom.h	35;"	d
fmin_	qvoronoi/geom.h	43;"	d
fout	qvoronoi/libqhull.h	/^  FILE *fout;             \/* pointer to output file *\/$/;"	m	struct:qhT
fout	qvoronoi/rboxlib.cu	/^  FILE *fout;$/;"	m	struct:rboxT	file:
freelists	qvoronoi/mem.h	/^  void   **freelists;          \/* free list table, linked by offset 0 *\/$/;"	m	struct:qhmemT
freelong	qvoronoi/mem.h	/^  int      freelong;          \/* count of long memfrees *\/$/;"	m	struct:qhmemT
freemem	qvoronoi/mem.h	/^  void    *freemem;           \/*   free memory in curbuffer *\/$/;"	m	struct:qhmemT
freeshort	qvoronoi/mem.h	/^  int      freeshort;         \/* count of short memfrees *\/$/;"	m	struct:qhmemT
freesize	qvoronoi/mem.h	/^  int      freesize;          \/*   size of freemem in bytes *\/$/;"	m	struct:qhmemT
furthest_id	qvoronoi/libqhull.h	/^  int   furthest_id;      \/* pointid of furthest point, for tracing *\/$/;"	m	struct:qhT
furthestdist	qvoronoi/libqhull.h	/^  coordT   furthestdist;\/* distance to furthest point of outsideset *\/$/;"	m	struct:facetT
gasarray	Parameters.h	/^static double  *gasarray = NULL;$/;"	v
gaussian	random.cu	/^double gaussian(){$/;"	f	namespace:mtrandom
gaussian	random/random.cu	/^double gaussian(){$/;"	f	namespace:mtrandom
gaussian_old	random.cu	/^double gaussian_old(){$/;"	f	namespace:mtrandom
gaussian_old	random/random.cu	/^double gaussian_old(){$/;"	f	namespace:mtrandom
gaussianc	random.cu	/^double gaussianc(MTRand& grnd){$/;"	f	namespace:mtrandom
gaussianc	random/random.cu	/^double gaussianc(MTRand& grnd){$/;"	f	namespace:mtrandom
gen_state	mtrand.cu	/^void MTRand_int32::gen_state() { \/\/ generate new state vector$/;"	f	class:MTRand_int32
gen_state	random/mtrand.cu	/^void MTRand_int32::gen_state() { \/\/ generate new state vector$/;"	f	class:MTRand_int32
get_state	random/mtrand.cu	/^int32_t MTRand_int32::get_state(std::vector<uint32_t>& iostate) {$/;"	f	class:MTRand_int32
getid_	qvoronoi/libqhull.h	785;"	d
gm_matrix	qvoronoi/libqhull.h	/^  coordT *gm_matrix;      \/* (dim+1)Xdim matrix for geom.c *\/$/;"	m	struct:qhT
gm_row	qvoronoi/libqhull.h	/^  coordT **gm_row;        \/* array of gm_matrix rows *\/$/;"	m	struct:qhT
good	qvoronoi/libqhull.h	/^  flagT    good:1;      \/* True if a facet marked good for output *\/$/;"	m	struct:facetT
grain_bnd	Parameters_input.cu	/^double grain_bnd;$/;"	v
grain_bnd_t	granular_media.cu	/^enum grain_bnd_t {same_dist=0, same_scaling=1};$/;"	g	file:
granular_media	granular_media.cu	/^void granular_media(vec2d_t media_size, int num_grains, double min_distance, double shrink_dist, double shrink_factor, std::vector<vec2d_t>& seed_array, std::vector <std::vector < vec2d_t> > &  vertex_array){$/;"	f
grnd	random.cu	/^	MTRand grnd; \/\/ single sequence of random numbers$/;"	m	namespace:mtrandom	file:
grnd	random/random.cu	/^	MTRand grnd; \/\/ single sequence of random numbers$/;"	m	namespace:mtrandom	file:
half_space	qvoronoi/libqhull.h	/^  coordT *half_space;     \/* malloc'd input array for halfspace (qh normal_size+coordT) *\/$/;"	m	struct:qhT
hasAreaVolume	qvoronoi/libqhull.h	/^  boolT hasAreaVolume;    \/* true if totarea, totvol was defined by qh_getarea *\/$/;"	m	struct:qhT
hasTriangulation	qvoronoi/libqhull.h	/^  boolT hasTriangulation; \/* true if triangulation created by qh_triangulate *\/$/;"	m	struct:qhT
hash_table	qvoronoi/libqhull.h	/^  setT *hash_table;       \/* hash table for matching ridges in qh_matchfacets$/;"	m	struct:qhT
hi	clipper/clipper.cu	/^    long64 hi;$/;"	m	class:ClipperLib::Int128	file:
hiRange	clipper/clipper.h	/^  static cInt const hiRange = 0x3FFFFFFFFFFFFFFFLL;$/;"	m	namespace:ClipperLib
hiRange	clipper/clipper.h	/^  static cInt const hiRange = 0x7FFF;$/;"	m	namespace:ClipperLib
hidden_options	qvoronoi/qvoronoi.cu	/^char hidden_options[]=" d n m v H U Qb QB Qc Qf Qg Qi Qm Qr QR Qv Qx TR E V Fa FA FC Fp FS Ft FV Pv Gt Q0 Q1 Q2 Q3 Q4 Q5 Q6 Q7 Q8 Q9 ";$/;"	v
host_Aex	Parameters.h	/^static double *host_Aex = NULL, *host_Ku = NULL, *host_Ms = NULL, *host_alpha = NULL, *host_gamma = NULL;$/;"	v
host_Ku	Parameters.h	/^static double *host_Aex = NULL, *host_Ku = NULL, *host_Ms = NULL, *host_alpha = NULL, *host_gamma = NULL;$/;"	v
host_Ms	Parameters.h	/^static double *host_Aex = NULL, *host_Ku = NULL, *host_Ms = NULL, *host_alpha = NULL, *host_gamma = NULL;$/;"	v
host_alpha	Parameters.h	/^static double *host_Aex = NULL, *host_Ku = NULL, *host_Ms = NULL, *host_alpha = NULL, *host_gamma = NULL;$/;"	v
host_gamma	Parameters.h	/^static double *host_Aex = NULL, *host_Ku = NULL, *host_Ms = NULL, *host_alpha = NULL, *host_gamma = NULL;$/;"	v
hull_dim	qvoronoi/libqhull.h	/^  int   hull_dim;         \/* dimension of hull, set by initbuffers *\/$/;"	m	struct:qhT
hulltime	qvoronoi/libqhull.h	/^  unsigned long hulltime; \/* ignore time to set up input and randomize *\/$/;"	m	struct:qhT
i	qvoronoi/qset.h	/^  int      i;         \/* integer used for e[maxSize] *\/$/;"	m	union:setelemT
i	qvoronoi/stat.h	/^    int i;$/;"	m	union:intrealT
i32	mtrand.h	/^  unsigned long i32() { return rand_int32(); }$/;"	f	class:MTRand
i32	random/mtrand.h	/^  uint32_t i32() { return rand_int32(); }$/;"	f	class:MTRand
id	qvoronoi/libqhull.h	/^  unsigned id:24;       \/* unique identifier, =>room for 8 flags, bit field matches qh.ridge_id *\/$/;"	m	struct:ridgeT
id	qvoronoi/libqhull.h	/^  unsigned id:24;       \/* unique identifier, bit field matches qh.vertex_id *\/$/;"	m	struct:vertexT
id	qvoronoi/libqhull.h	/^  unsigned id;          \/* unique identifier from qh facet_id *\/$/;"	m	struct:facetT
id	qvoronoi/stat.h	/^  unsigned   char id[ZEND+10]; \/* id's in print order *\/$/;"	m	struct:qhstatT
idum0	Parameters.h	/^long static idum0;$/;"	v
idx_f	LLG_CUDA.cu	/^int    *idx_f = NULL, *idx_t = NULL;$/;"	v
idx_t	LLG_CUDA.cu	/^int    *idx_f = NULL, *idx_t = NULL;$/;"	v
indextable	qvoronoi/mem.h	/^  int     *indextable;        \/* size->index table *\/$/;"	m	struct:qhmemT
indicator1	LLG_CUDA.cu	/^int     *indicator1 = NULL, *indicator2 = NULL, *indicator3 = NULL, *indicator7 = NULL;$/;"	v
indicator2	LLG_CUDA.cu	/^int     *indicator1 = NULL, *indicator2 = NULL, *indicator3 = NULL, *indicator7 = NULL;$/;"	v
indicator3	LLG_CUDA.cu	/^int     *indicator1 = NULL, *indicator2 = NULL, *indicator3 = NULL, *indicator7 = NULL;$/;"	v
indicator4	Parameters.h	/^static double  *indicator4 = NULL, *indicator5 = NULL, *indicator6 = NULL;$/;"	v
indicator5	Parameters.h	/^static double  *indicator4 = NULL, *indicator5 = NULL, *indicator6 = NULL;$/;"	v
indicator6	Parameters.h	/^static double  *indicator4 = NULL, *indicator5 = NULL, *indicator6 = NULL;$/;"	v
indicator7	LLG_CUDA.cu	/^int     *indicator1 = NULL, *indicator2 = NULL, *indicator3 = NULL, *indicator7 = NULL;$/;"	v
init	mtrand.cu	/^bool MTRand_int32::init = false;$/;"	m	class:MTRand_int32	file:
init	mtrand.h	/^  static bool init; \/\/ true if init function is called$/;"	m	class:MTRand_int32
init	qvoronoi/stat.h	/^  intrealT   init[ZTYPEend];  \/* initial values by types, set initstatistics *\/$/;"	m	struct:qhstatT
init	random/mtrand.cu	/^bool MTRand_int32::init = false;$/;"	m	class:MTRand_int32	file:
init	random/mtrand.h	/^  static bool init; \/\/ true if init function is called$/;"	m	class:MTRand_int32
input_dim	qvoronoi/libqhull.h	/^  int   input_dim;        \/* dimension of input, set by initbuffers *\/$/;"	m	struct:qhT
input_malloc	qvoronoi/libqhull.h	/^  boolT input_malloc;     \/* true if qh input_points malloc'd *\/$/;"	m	struct:qhT
input_points	qvoronoi/libqhull.h	/^  pointT *input_points;   \/* copy of original qh.first_point for input points for qh_joggleinput *\/$/;"	m	struct:qhT
integration_seed	random.cu	/^	int integration_seed=1234;$/;"	m	namespace:mtrandom	file:
interior_point	qvoronoi/libqhull.h	/^  pointT *interior_point; \/* center point of the initial simplex*\/$/;"	m	struct:qhT
intrealT	qvoronoi/stat.h	/^typedef union intrealT intrealT;    \/* union of int and realT *\/$/;"	t	typeref:union:intrealT
intrealT	qvoronoi/stat.h	/^union intrealT {$/;"	u
ioPreserveCollinear	clipper/clipper.h	/^enum InitOptions {ioReverseSolution = 1, ioStrictlySimple = 2, ioPreserveCollinear = 4};$/;"	e	enum:ClipperLib::InitOptions
ioReverseSolution	clipper/clipper.h	/^enum InitOptions {ioReverseSolution = 1, ioStrictlySimple = 2, ioPreserveCollinear = 4};$/;"	e	enum:ClipperLib::InitOptions
ioStrictlySimple	clipper/clipper.h	/^enum InitOptions {ioReverseSolution = 1, ioStrictlySimple = 2, ioPreserveCollinear = 4};$/;"	e	enum:ClipperLib::InitOptions
is_file_exist	Parameters_input.cu	/^int is_file_exist(const char* filename){$/;"	f
isarea	qvoronoi/libqhull.h	/^  flagT    isarea:1;    \/* True if facet->f.area is defined *\/$/;"	m	struct:facetT
isatty	qvoronoi/qvoronoi.cu	36;"	d	file:
iseed	Parameters_input.cu	/^unsigned long long int iseed;$/;"	v
isinteger	qvoronoi/rboxlib.cu	/^  int isinteger;$/;"	m	struct:rboxT	file:
jmpXtra	qvoronoi/libqhull.h	/^  char jmpXtra[40];       \/* extra bytes in case jmp_buf is defined wrong by compiler *\/$/;"	m	struct:qhT
jmpXtra2	qvoronoi/libqhull.h	/^  char jmpXtra2[40];      \/* extra bytes in case jmp_buf is defined wrong by compiler*\/$/;"	m	struct:qhT
jtMiter	clipper/clipper.h	/^enum JoinType {jtSquare, jtRound, jtMiter};$/;"	e	enum:ClipperLib::JoinType
jtRound	clipper/clipper.h	/^enum JoinType {jtSquare, jtRound, jtMiter};$/;"	e	enum:ClipperLib::JoinType
jtSquare	clipper/clipper.h	/^enum JoinType {jtSquare, jtRound, jtMiter};$/;"	e	enum:ClipperLib::JoinType
kb	Parameters.h	/^const double kb = 1.38e-16;$/;"	v
keepcentrum	qvoronoi/libqhull.h	/^  flagT    keepcentrum:1; \/* True if keep old centrum after a merge, or marks owner for ->tricoplanar *\/$/;"	m	struct:facetT
ktab	random.cu	/^static const unsigned long ktab[128] = {$/;"	m	namespace:mtrandom	file:
ktab	random/random.cu	/^static const unsigned long ktab[128] = {$/;"	m	namespace:mtrandom	file:
last_high	qvoronoi/libqhull.h	/^  realT last_high;$/;"	m	struct:qhT
last_low	qvoronoi/libqhull.h	/^  realT last_low;         \/* qh_scalelast parameters for qh_setdelaunay *\/$/;"	m	struct:qhT
last_newhigh	qvoronoi/libqhull.h	/^  realT last_newhigh;$/;"	m	struct:qhT
lastreport	qvoronoi/libqhull.h	/^  unsigned lastreport;    \/* for qh_buildtracing *\/$/;"	m	struct:qhT
left	clipper/clipper.h	/^struct IntRect { cInt left; cInt top; cInt right; cInt bottom; };$/;"	m	struct:ClipperLib::IntRect
line	qvoronoi/libqhull.h	/^  char* line;             \/* malloc'd input line of maxline+1 chars *\/$/;"	m	struct:qhT
lo	clipper/clipper.cu	/^    ulong64 lo;$/;"	m	class:ClipperLib::Int128	file:
loRange	clipper/clipper.h	/^  static cInt const loRange = 0x3FFFFFFF;$/;"	m	namespace:ClipperLib
loRange	clipper/clipper.h	/^  static cInt const loRange = 0x7FFF;$/;"	m	namespace:ClipperLib
logic	random.cu	/^	bool logic=false;$/;"	m	namespace:mtrandom	file:
logic	random/random.cu	/^	bool logic=false;$/;"	m	namespace:mtrandom	file:
long64	clipper/clipper.h	/^  typedef signed long long long64;     \/\/used by Int128 class$/;"	t	namespace:ClipperLib
lower_bound	qvoronoi/libqhull.h	/^  realT *lower_bound;     \/* scale point[k] to new lower bound$/;"	m	struct:qhT
lower_threshold	qvoronoi/libqhull.h	/^  realT *lower_threshold; \/* don't print if facet->normal[k] <=lower_threshold[k] *\/$/;"	m	struct:qhT
m	mtrand.h	/^  static const int n = 624, m = 397; \/\/ compile time constants$/;"	m	class:MTRand_int32
m	random/mtrand.h	/^  static const int n = 624, m = 397; \/\/ compile time constants$/;"	m	class:MTRand_int32
mGrid	LLG_CUDA.cu	/^double *mGrid[3];$/;"	v
mNx	Parameters_input.cu	/^int mNx, mNy, mNz;$/;"	v
mNy	Parameters_input.cu	/^int mNx, mNy, mNz;$/;"	v
mNz	Parameters_input.cu	/^int mNx, mNy, mNz;$/;"	v
mNz_1	Parameters_input.cu	/^int mNz_1, mNz_2, mNz_3, mNz_4, mNz_5, mNz_6;$/;"	v
mNz_12	Parameters_input.cu	/^int mNz_12, mNz_23, mNz_34, mNz_45, mNz_56;$/;"	v
mNz_2	Parameters_input.cu	/^int mNz_1, mNz_2, mNz_3, mNz_4, mNz_5, mNz_6;$/;"	v
mNz_23	Parameters_input.cu	/^int mNz_12, mNz_23, mNz_34, mNz_45, mNz_56;$/;"	v
mNz_3	Parameters_input.cu	/^int mNz_1, mNz_2, mNz_3, mNz_4, mNz_5, mNz_6;$/;"	v
mNz_34	Parameters_input.cu	/^int mNz_12, mNz_23, mNz_34, mNz_45, mNz_56;$/;"	v
mNz_4	Parameters_input.cu	/^int mNz_1, mNz_2, mNz_3, mNz_4, mNz_5, mNz_6;$/;"	v
mNz_45	Parameters_input.cu	/^int mNz_12, mNz_23, mNz_34, mNz_45, mNz_56;$/;"	v
mNz_5	Parameters_input.cu	/^int mNz_1, mNz_2, mNz_3, mNz_4, mNz_5, mNz_6;$/;"	v
mNz_56	Parameters_input.cu	/^int mNz_12, mNz_23, mNz_34, mNz_45, mNz_56;$/;"	v
mNz_6	Parameters_input.cu	/^int mNz_1, mNz_2, mNz_3, mNz_4, mNz_5, mNz_6;$/;"	v
m_ActiveEdges	clipper/clipper.h	/^  TEdge           *m_ActiveEdges;$/;"	m	class:ClipperLib::Clipper
m_ClipFillType	clipper/clipper.h	/^  PolyFillType     m_ClipFillType;$/;"	m	class:ClipperLib::Clipper
m_ClipType	clipper/clipper.h	/^  ClipType          m_ClipType;$/;"	m	class:ClipperLib::Clipper
m_CurrentLM	clipper/clipper.h	/^  MinimaList::iterator m_CurrentLM;$/;"	m	class:ClipperLib::ClipperBase
m_ExecuteLocked	clipper/clipper.h	/^  bool             m_ExecuteLocked;$/;"	m	class:ClipperLib::Clipper
m_GhostJoins	clipper/clipper.h	/^  JoinList          m_GhostJoins;$/;"	m	class:ClipperLib::Clipper
m_HasOpenPaths	clipper/clipper.h	/^  bool             m_HasOpenPaths;$/;"	m	class:ClipperLib::ClipperBase
m_IntersectList	clipper/clipper.h	/^  IntersectList     m_IntersectList;$/;"	m	class:ClipperLib::Clipper
m_IsOpen	clipper/clipper.h	/^    bool m_IsOpen;$/;"	m	class:ClipperLib::PolyNode
m_Joins	clipper/clipper.h	/^  JoinList          m_Joins;$/;"	m	class:ClipperLib::Clipper
m_MinimaList	clipper/clipper.h	/^  MinimaList           m_MinimaList;$/;"	m	class:ClipperLib::ClipperBase
m_PolyOuts	clipper/clipper.h	/^  PolyOutList       m_PolyOuts;$/;"	m	class:ClipperLib::Clipper
m_PreserveCollinear	clipper/clipper.h	/^  bool             m_PreserveCollinear;$/;"	m	class:ClipperLib::ClipperBase
m_ReverseOutput	clipper/clipper.h	/^  bool             m_ReverseOutput;$/;"	m	class:ClipperLib::Clipper
m_Scanbeam	clipper/clipper.h	/^  ScanbeamList      m_Scanbeam;$/;"	m	class:ClipperLib::Clipper
m_SortedEdges	clipper/clipper.h	/^  TEdge           *m_SortedEdges;$/;"	m	class:ClipperLib::Clipper
m_StepsPerRad	clipper/clipper.h	/^  double m_miterLim, m_StepsPerRad;$/;"	m	class:ClipperLib::ClipperOffset
m_StrictSimple	clipper/clipper.h	/^  bool             m_StrictSimple;$/;"	m	class:ClipperLib::Clipper
m_SubjFillType	clipper/clipper.h	/^  PolyFillType     m_SubjFillType;$/;"	m	class:ClipperLib::Clipper
m_UseFullRange	clipper/clipper.h	/^  bool              m_UseFullRange;$/;"	m	class:ClipperLib::ClipperBase
m_UsingPolyTree	clipper/clipper.h	/^  bool             m_UsingPolyTree; $/;"	m	class:ClipperLib::Clipper
m_ZFill	clipper/clipper.h	/^  ZFillCallback   m_ZFill; \/\/custom callback $/;"	m	class:ClipperLib::Clipper
m_cos	clipper/clipper.h	/^  double m_delta, m_sinA, m_sin, m_cos;$/;"	m	class:ClipperLib::ClipperOffset
m_delta	clipper/clipper.h	/^  double m_delta, m_sinA, m_sin, m_cos;$/;"	m	class:ClipperLib::ClipperOffset
m_descr	clipper/clipper.h	/^    std::string m_descr;$/;"	m	class:ClipperLib::clipperException
m_destPoly	clipper/clipper.h	/^  Path m_destPoly;$/;"	m	class:ClipperLib::ClipperOffset
m_destPolys	clipper/clipper.h	/^  Paths m_destPolys;$/;"	m	class:ClipperLib::ClipperOffset
m_edges	clipper/clipper.h	/^  EdgeList          m_edges;$/;"	m	class:ClipperLib::ClipperBase
m_endtype	clipper/clipper.h	/^    EndType m_endtype;$/;"	m	class:ClipperLib::PolyNode
m_jointype	clipper/clipper.h	/^    JoinType m_jointype;$/;"	m	class:ClipperLib::PolyNode
m_lowest	clipper/clipper.h	/^  IntPoint m_lowest;$/;"	m	class:ClipperLib::ClipperOffset
m_miterLim	clipper/clipper.h	/^  double m_miterLim, m_StepsPerRad;$/;"	m	class:ClipperLib::ClipperOffset
m_normals	clipper/clipper.h	/^  std::vector<DoublePoint> m_normals;$/;"	m	class:ClipperLib::ClipperOffset
m_polyNodes	clipper/clipper.h	/^  PolyNode m_polyNodes;$/;"	m	class:ClipperLib::ClipperOffset
m_sin	clipper/clipper.h	/^  double m_delta, m_sinA, m_sin, m_cos;$/;"	m	class:ClipperLib::ClipperOffset
m_sinA	clipper/clipper.h	/^  double m_delta, m_sinA, m_sin, m_cos;$/;"	m	class:ClipperLib::ClipperOffset
m_srcPoly	clipper/clipper.h	/^  Path m_srcPoly;$/;"	m	class:ClipperLib::ClipperOffset
main	LLG_CUDA.cu	/^int main(int argc, char* argv[])$/;"	f
max_outside	qvoronoi/libqhull.h	/^  realT max_outside;      \/* maximum distance from a point to a facet,$/;"	m	struct:qhT
max_vertex	qvoronoi/libqhull.h	/^  realT max_vertex;       \/* maximum distance (>0) from vertex to a facet,$/;"	m	struct:qhT
maximize_	qvoronoi/geom.h	51;"	d
maxline	qvoronoi/libqhull.h	/^  int maxline;$/;"	m	struct:qhT
maxlong	qvoronoi/mem.h	/^  int      maxlong;           \/*   maximum totlong *\/$/;"	m	struct:qhmemT
maxoutdone	qvoronoi/libqhull.h	/^  boolT maxoutdone;       \/* set qh_check_maxout(), cleared by qh_addpoint() *\/$/;"	m	struct:qhT
maxoutside	qvoronoi/libqhull.h	/^  coordT   maxoutside;  \/* max computed distance of point to facet$/;"	m	struct:facetT
maxsize	qvoronoi/qset.h	/^  int maxsize;          \/* maximum number of elements (except NULL) *\/$/;"	m	struct:setT
media_type	Parameters_input.cu	/^int media_type;$/;"	v
memTemp0	LLG_CUDA.cu	/^double *memTemp0 = NULL, *memTemp1 = NULL, *memTemp2 = NULL, *memTemp3 = NULL,$/;"	v
memTemp1	LLG_CUDA.cu	/^double *memTemp0 = NULL, *memTemp1 = NULL, *memTemp2 = NULL, *memTemp3 = NULL,$/;"	v
memTemp2	LLG_CUDA.cu	/^double *memTemp0 = NULL, *memTemp1 = NULL, *memTemp2 = NULL, *memTemp3 = NULL,$/;"	v
memTemp3	LLG_CUDA.cu	/^double *memTemp0 = NULL, *memTemp1 = NULL, *memTemp2 = NULL, *memTemp3 = NULL,$/;"	v
mergeT	qvoronoi/merge.h	/^struct mergeT {         \/* initialize in qh_appendmergeset *\/$/;"	s
mergeT	qvoronoi/merge.h	/^typedef struct mergeT mergeT;$/;"	t	typeref:struct:mergeT
mergeType	qvoronoi/merge.h	/^} mergeType;$/;"	t	typeref:enum:__anon5
mergehorizon	qvoronoi/libqhull.h	/^  flagT     mergehorizon:1; \/* True if will merge into horizon (->coplanar) *\/$/;"	m	struct:facetT
mergereport	qvoronoi/libqhull.h	/^  int mergereport;        \/* for qh_tracemerging *\/$/;"	m	struct:qhT
mergeridge	qvoronoi/libqhull.h	/^  flagT    mergeridge:1; \/* True if facet or neighbor contains a qh_MERGEridge$/;"	m	struct:facetT
mergeridge2	qvoronoi/libqhull.h	/^  flagT    mergeridge2:1; \/* True if neighbor contains a qh_MERGEridge (mark_dupridges *\/$/;"	m	struct:facetT
min_vertex	qvoronoi/libqhull.h	/^  realT min_vertex;       \/* minimum distance (<0) from vertex to a facet,$/;"	m	struct:qhT
minimize_	qvoronoi/geom.h	59;"	d
minimum_sdistance	Parameters_input.cu	/^double minimum_sdistance;$/;"	v
mtrandom	random.cu	/^namespace mtrandom$/;"	n	file:
mtrandom	random.h	/^namespace mtrandom$/;"	n
mtrandom	random/random.cu	/^namespace mtrandom$/;"	n	file:
mtrandom	random/random.h	/^namespace mtrandom$/;"	n
n	mtrand.h	/^  static const int n = 624, m = 397; \/\/ compile time constants$/;"	m	class:MTRand_int32
n	random/mtrand.h	/^  static const int n = 624, m = 397; \/\/ compile time constants$/;"	m	class:MTRand_int32
neighbors	qvoronoi/libqhull.h	/^  setT    *neighbors;   \/* neighboring facets of vertex, qh_vertexneighbors()$/;"	m	struct:vertexT
neighbors	qvoronoi/libqhull.h	/^  setT    *neighbors;   \/* neighbors of the facet.  If simplicial, the kth$/;"	m	struct:facetT
newcycle	qvoronoi/libqhull.h	/^   facetT *newcycle;    \/*  in horizon facet, current samecycle of new facets *\/$/;"	m	union:facetT::__anon3
newfacet	qvoronoi/libqhull.h	/^  flagT    newfacet:1;  \/* True if facet on qh newfacet_list (new or merged) *\/$/;"	m	struct:facetT
newfacet_list	qvoronoi/libqhull.h	/^  facetT *newfacet_list;  \/* list of new facets to end of facet_list *\/$/;"	m	struct:qhT
newlist	qvoronoi/libqhull.h	/^  flagT    newlist:1;   \/* true if vertex on qh newvertex_list *\/$/;"	m	struct:vertexT
newmerge	qvoronoi/libqhull.h	/^  flagT    newmerge:1;  \/* True if facet is newly merged for reducevertices *\/$/;"	m	struct:facetT
newvertex_list	qvoronoi/libqhull.h	/^  vertexT *newvertex_list; \/* list of vertices in newfacet_list, to vertex_tail$/;"	m	struct:qhT
next	qvoronoi/libqhull.h	/^  facetT  *next;        \/* next facet in the facet_list *\/$/;"	m	struct:facetT
next	qvoronoi/libqhull.h	/^  vertexT *next;        \/* next vertex in vertex_list *\/$/;"	m	struct:vertexT
next	qvoronoi/stat.h	/^  int        next;            \/* next index for zdef_ *\/$/;"	m	struct:qhstatT
nonconvex	qvoronoi/libqhull.h	/^  flagT    nonconvex:1; \/* True if getmergeset detected a non-convex neighbor$/;"	m	struct:ridgeT
normal	GrainsIndicator.cu	/^enum voronoi_t {normal=0, sro=1};$/;"	e	enum:voronoi_t	file:
normal	qvoronoi/libqhull.h	/^  coordT  *normal;      \/* normal of hyperplane, hull_dim coefficients *\/$/;"	m	struct:facetT
normal_size	qvoronoi/libqhull.h	/^  int normal_size;     \/* size in bytes for facet normals and point coords*\/$/;"	m	struct:qhT
notfurthest	qvoronoi/libqhull.h	/^  flagT    notfurthest:1; \/* True if last point of outsideset is not furthest*\/$/;"	m	struct:facetT
ntAny	clipper/clipper.cu	/^enum NodeType {ntAny, ntOpen, ntClosed};$/;"	e	enum:ClipperLib::NodeType	file:
ntClosed	clipper/clipper.cu	/^enum NodeType {ntAny, ntOpen, ntClosed};$/;"	e	enum:ClipperLib::NodeType	file:
ntOpen	clipper/clipper.cu	/^enum NodeType {ntAny, ntOpen, ntClosed};$/;"	e	enum:ClipperLib::NodeType	file:
num_facets	qvoronoi/libqhull.h	/^  int   num_facets;       \/* number of facets in facet_list$/;"	m	struct:qhT
num_good	qvoronoi/libqhull.h	/^  int   num_good;         \/* number of good facets (after findgood_all) *\/$/;"	m	struct:qhT
num_outside	qvoronoi/libqhull.h	/^  int   num_outside;      \/* number of points in outsidesets (for tracing and RANDOMoutside)$/;"	m	struct:qhT
num_points	qvoronoi/libqhull.h	/^  int   num_points;       \/* number of input points *\/$/;"	m	struct:qhT
num_vdomains	Parameters_input.cu	/^int num_vdomains;$/;"	v
num_vertices	qvoronoi/libqhull.h	/^  int   num_vertices;     \/* number of vertices in facet_list *\/$/;"	m	struct:qhT
num_vgrains	Parameters_input.cu	/^int num_vgrains;$/;"	v
num_visible	qvoronoi/libqhull.h	/^  int       num_visible;  \/* current number of visible facets *\/$/;"	m	struct:qhT
number1	random.cu	/^	double number1;$/;"	m	namespace:mtrandom	file:
number1	random/random.cu	/^	double number1;$/;"	m	namespace:mtrandom	file:
number2	random.cu	/^	double number2;$/;"	m	namespace:mtrandom	file:
number2	random/random.cu	/^	double number2;$/;"	m	namespace:mtrandom	file:
nummerge	qvoronoi/libqhull.h	/^  unsigned nummerge:9;  \/* number of merges *\/$/;"	m	struct:facetT
nz_12	Parameters_input.cu	/^int nz_12, nz_23, nz_34, nz_45, nz_56;$/;"	v
nz_23	Parameters_input.cu	/^int nz_12, nz_23, nz_34, nz_45, nz_56;$/;"	v
nz_34	Parameters_input.cu	/^int nz_12, nz_23, nz_34, nz_45, nz_56;$/;"	v
nz_45	Parameters_input.cu	/^int nz_12, nz_23, nz_34, nz_45, nz_56;$/;"	v
nz_56	Parameters_input.cu	/^int nz_12, nz_23, nz_34, nz_45, nz_56;$/;"	v
offset	qvoronoi/libqhull.h	/^  coordT   offset;      \/* exact offset of hyperplane from origin *\/$/;"	m	struct:facetT
old_qhstat	qvoronoi/libqhull.h	/^  qhstatT *old_qhstat;    \/* for saving qh_qhstat in save_qhull() and UsingLibQhull.  Free with qh_free() *\/$/;"	m	struct:qhT
old_randomdist	qvoronoi/libqhull.h	/^  boolT old_randomdist;   \/* save RANDOMdist flag during io, tracing, or statistics *\/$/;"	m	struct:qhT
old_tempstack	qvoronoi/libqhull.h	/^  setT *old_tempstack;    \/* for saving qhmem.tempstack in save_qhull *\/$/;"	m	struct:qhT
operator !=	clipper/clipper.cu	/^    bool operator != (const Int128 &val) const$/;"	f	class:ClipperLib::Int128
operator !=	clipper/clipper.h	/^  friend inline bool operator!= (const IntPoint& a, const IntPoint& b)$/;"	f	struct:ClipperLib::IntPoint
operator ()	clipper/clipper.cu	/^  inline bool operator()(const LocalMinimum& locMin1, const LocalMinimum& locMin2)$/;"	f	struct:ClipperLib::LocMinSorter
operator ()	mtrand.h	/^  double operator()() {$/;"	f	class:MTRand
operator ()	mtrand.h	/^  double operator()() {$/;"	f	class:MTRand53
operator ()	mtrand.h	/^  double operator()() {$/;"	f	class:MTRand_closed
operator ()	mtrand.h	/^  double operator()() {$/;"	f	class:MTRand_open
operator ()	mtrand.h	/^  unsigned long operator()() { return rand_int32(); }$/;"	f	class:MTRand_int32
operator ()	random/mtrand.h	/^  double operator()() {$/;"	f	class:MTRand
operator ()	random/mtrand.h	/^  double operator()() {$/;"	f	class:MTRand53
operator ()	random/mtrand.h	/^  double operator()() {$/;"	f	class:MTRand_closed
operator ()	random/mtrand.h	/^  double operator()() {$/;"	f	class:MTRand_open
operator ()	random/mtrand.h	/^  uint32_t operator()() { return rand_int32(); }$/;"	f	class:MTRand_int32
operator +	clipper/clipper.cu	/^    Int128 operator + (const Int128 &rhs) const$/;"	f	class:ClipperLib::Int128
operator +=	clipper/clipper.cu	/^    Int128& operator += (const Int128 &rhs)$/;"	f	class:ClipperLib::Int128
operator -	clipper/clipper.cu	/^    Int128 operator - (const Int128 &rhs) const$/;"	f	class:ClipperLib::Int128
operator -	clipper/clipper.cu	/^    Int128 operator-() const \/\/unary negation$/;"	f	class:ClipperLib::Int128
operator -=	clipper/clipper.cu	/^    Int128& operator -= (const Int128 &rhs)$/;"	f	class:ClipperLib::Int128
operator <	clipper/clipper.cu	/^    bool operator < (const Int128 &val) const$/;"	f	class:ClipperLib::Int128
operator <<	clipper/clipper.cu	/^std::ostream& operator <<(std::ostream &s, const IntPoint &p)$/;"	f	namespace:ClipperLib
operator <<	clipper/clipper.cu	/^std::ostream& operator <<(std::ostream &s, const Path &p)$/;"	f	namespace:ClipperLib
operator <<	clipper/clipper.cu	/^std::ostream& operator <<(std::ostream &s, const Paths &p)$/;"	f	namespace:ClipperLib
operator <<	clipper/clipper.h	/^inline Path& operator <<(Path& poly, const IntPoint& p) {poly.push_back(p); return poly;}$/;"	f	namespace:ClipperLib
operator <<	clipper/clipper.h	/^inline Paths& operator <<(Paths& polys, const Path& p) {polys.push_back(p); return polys;}$/;"	f	namespace:ClipperLib
operator <=	clipper/clipper.cu	/^    bool operator <= (const Int128 &val) const$/;"	f	class:ClipperLib::Int128
operator =	clipper/clipper.cu	/^    Int128& operator = (const long64 &val)$/;"	f	class:ClipperLib::Int128
operator ==	clipper/clipper.cu	/^    bool operator == (const Int128 &val) const$/;"	f	class:ClipperLib::Int128
operator ==	clipper/clipper.h	/^  friend inline bool operator== (const IntPoint& a, const IntPoint& b)$/;"	f	struct:ClipperLib::IntPoint
operator >	clipper/clipper.cu	/^    bool operator > (const Int128 &val) const$/;"	f	class:ClipperLib::Int128
operator >=	clipper/clipper.cu	/^    bool operator >= (const Int128 &val) const$/;"	f	class:ClipperLib::Int128
operator double	clipper/clipper.cu	/^    operator double() const$/;"	f	class:ClipperLib::Int128
other_points	qvoronoi/libqhull.h	/^  setT *other_points;     \/* additional points *\/$/;"	m	struct:qhT
otherfacet_	qvoronoi/libqhull.h	775;"	d
out1	qvoronoi/rboxlib.cu	/^void out1(double a) {$/;"	f
out2n	qvoronoi/rboxlib.cu	/^void out2n( double a, double b) {$/;"	f
out3n	qvoronoi/rboxlib.cu	/^void out3n( double a, double b, double c) {$/;"	f
out_offset	qvoronoi/rboxlib.cu	/^  double out_offset;$/;"	m	struct:rboxT	file:
outside_err	qvoronoi/libqhull.h	/^  realT outside_err;      \/* application's epsilon for coplanar points$/;"	m	struct:qhT
outsideset	qvoronoi/libqhull.h	/^  setT    *outsideset;  \/* set of points outside this facet$/;"	m	struct:facetT
p	mtrand.cu	/^int MTRand_int32::p = 0;$/;"	m	class:MTRand_int32	file:
p	mtrand.h	/^  static int p; \/\/ position in state array$/;"	m	class:MTRand_int32
p	qvoronoi/qset.h	/^  void    *p;$/;"	m	union:setelemT
p	random/mtrand.cu	/^int32_t MTRand_int32::p = 0;$/;"	m	class:MTRand_int32	file:
p	random/mtrand.h	/^  static int32_t p; \/\/ position in state array$/;"	m	class:MTRand_int32
pftEvenOdd	clipper/clipper.h	/^enum PolyFillType { pftEvenOdd, pftNonZero, pftPositive, pftNegative };$/;"	e	enum:ClipperLib::PolyFillType
pftNegative	clipper/clipper.h	/^enum PolyFillType { pftEvenOdd, pftNonZero, pftPositive, pftNegative };$/;"	e	enum:ClipperLib::PolyFillType
pftNonZero	clipper/clipper.h	/^enum PolyFillType { pftEvenOdd, pftNonZero, pftPositive, pftNegative };$/;"	e	enum:ClipperLib::PolyFillType
pftPositive	clipper/clipper.h	/^enum PolyFillType { pftEvenOdd, pftNonZero, pftPositive, pftNegative };$/;"	e	enum:ClipperLib::PolyFillType
phi	Parameters.h	/^static double theta = 0, phi = 0;$/;"	v
pi	clipper/clipper.cu	/^static double const pi = 3.141592653589793238;$/;"	m	namespace:ClipperLib	file:
pnpoly	GrainsIndicator.cu	/^int pnpoly(int nvert, double *vertx, double *verty, double testx, double testy)$/;"	f
point	qvoronoi/libqhull.h	/^  pointT  *point;       \/* hull_dim coordinates (coordT) *\/$/;"	m	struct:vertexT
pointT	qvoronoi/libqhull.h	82;"	d
point_in_polygon	point_in_polygon.cu	/^bool point_in_polygon(double x, double y, std::vector<vec2d_t>& poly){$/;"	f
polygon_area	polygon_area.cu	/^bool polygon_area(std::vector <std::vector < vec2d_t> > &  grain_vertices_array, std::vector<double> &   grain_area_array){$/;"	f
populate_vertex_points	populate_vertex_points.cu	/^void populate_vertex_points(std::vector <vec2d_t> & grain_coord_array, std::vector <std::vector < vec2d_t> > &  grain_vertices_array){$/;"	f
postmerge_centrum	qvoronoi/libqhull.h	/^  realT   postmerge_centrum; \/*   'Cn' centrum_radius when post merging.  Default is round-off *\/$/;"	m	struct:qhT
postmerge_cos	qvoronoi/libqhull.h	/^  realT postmerge_cos;    \/*   'An'    cos_max when post merging *\/$/;"	m	struct:qhT
precision	qvoronoi/stat.h	/^  int        precision;       \/* index for precision problems *\/$/;"	m	struct:qhstatT
premerge_centrum	qvoronoi/libqhull.h	/^  realT   premerge_centrum;  \/*   'C-n' centrum_radius when pre merging.  Default is round-off *\/$/;"	m	struct:qhT
premerge_cos	qvoronoi/libqhull.h	/^  realT premerge_cos;     \/*   'A-n'   cos_max when pre merging *\/$/;"	m	struct:qhT
previous	qvoronoi/libqhull.h	/^  facetT  *previous;    \/* previous facet in the facet_list *\/$/;"	m	struct:facetT
previous	qvoronoi/libqhull.h	/^  vertexT *previous;    \/* previous vertex in vertex_list *\/$/;"	m	struct:vertexT
printed	qvoronoi/stat.h	/^  char       printed[ZEND];   \/* true, if statistic has been printed *\/$/;"	m	struct:qhstatT
printoutnum	qvoronoi/libqhull.h	/^  int   printoutnum;      \/* number of facets printed *\/$/;"	m	struct:qhT
printoutvar	qvoronoi/libqhull.h	/^  int   printoutvar;      \/* temporary variable for qh_printbegin, etc. *\/$/;"	m	struct:qhT
printvridgeT	qvoronoi/io.h	/^typedef void (*printvridgeT)(FILE *fp, vertexT *vertex, vertexT *vertexA, setT *centers, boolT unbounded);$/;"	t
ptClip	clipper/clipper.h	/^enum PolyType { ptSubject, ptClip };$/;"	e	enum:ClipperLib::PolyType
ptSubject	clipper/clipper.h	/^enum PolyType { ptSubject, ptClip };$/;"	e	enum:ClipperLib::PolyType
ptr_intT	qvoronoi/mem.h	/^typedef long long ptr_intT;$/;"	t
ptr_intT	qvoronoi/mem.h	/^typedef long ptr_intT;$/;"	t
qh	qvoronoi/libqhull.h	416;"	d
qh	qvoronoi/libqhull.h	419;"	d
qh	qvoronoi/libqhull.h	422;"	d
qh	qvoronoi/libqhull.h	425;"	d
qhDEFgeom	qvoronoi/geom.h	15;"	d
qhDEFio	qvoronoi/io.h	15;"	d
qhDEFlibqhull	qvoronoi/libqhull.h	30;"	d
qhDEFmem	qvoronoi/mem.h	20;"	d
qhDEFmerge	qvoronoi/merge.h	15;"	d
qhDEFpoly	qvoronoi/poly.h	15;"	d
qhDEFqhulla	qvoronoi/qhull_a.h	25;"	d
qhDEFrandom	qvoronoi/qhrandom.h	15;"	d
qhDEFset	qvoronoi/qset.h	25;"	d
qhDEFstat	qvoronoi/stat.h	22;"	d
qhDEFuser	qvoronoi/user.h	30;"	d
qhT	qvoronoi/libqhull.h	/^struct qhT {$/;"	s
qhT	qvoronoi/libqhull.h	/^typedef struct qhT qhT;$/;"	t	typeref:struct:qhT
qh_ALGORITHMfault	qvoronoi/poly.h	27;"	d
qh_ALL	qvoronoi/libqhull.h	157;"	d
qh_ANGLEconcave	qvoronoi/merge.h	48;"	d
qh_ANGLEdegen	qvoronoi/merge.h	36;"	d
qh_ANGLEredundant	qvoronoi/merge.h	28;"	d
qh_AScentrum	qvoronoi/libqhull.h	/^    qh_ASnone = 0, qh_ASvoronoi, qh_AScentrum$/;"	e	enum:__anon1
qh_ASnone	qvoronoi/libqhull.h	/^    qh_ASnone = 0, qh_ASvoronoi, qh_AScentrum$/;"	e	enum:__anon1
qh_ASvoronoi	qvoronoi/libqhull.h	/^    qh_ASnone = 0, qh_ASvoronoi, qh_AScentrum$/;"	e	enum:__anon1
qh_BESTcentrum	qvoronoi/user.h	669;"	d
qh_BESTcentrum2	qvoronoi/user.h	670;"	d
qh_BESTnonconvex	qvoronoi/user.h	681;"	d
qh_CENTER	qvoronoi/libqhull.h	/^qh_CENTER;$/;"	t	typeref:enum:__anon1
qh_CLOCKtype	qvoronoi/user.h	184;"	d
qh_COMPUTEfurthest	qvoronoi/user.h	511;"	d
qh_COPLANARratio	qvoronoi/user.h	716;"	d
qh_CPUclock	qvoronoi/user.h	189;"	d
qh_CPUclock	qvoronoi/user.h	193;"	d
qh_CPUclock	qvoronoi/user.h	197;"	d
qh_CPUclock	qvoronoi/user.h	201;"	d
qh_CPUclock	qvoronoi/user.h	206;"	d
qh_DATAfault	qvoronoi/poly.h	35;"	d
qh_DEFAULTbox	qvoronoi/user.h	476;"	d
qh_DEFAULTzbox	qvoronoi/user.h	477;"	d
qh_DIMmergeVertex	qvoronoi/user.h	649;"	d
qh_DIMreduceBuild	qvoronoi/user.h	657;"	d
qh_DISToutside	qvoronoi/user.h	746;"	d
qh_DUPLICATEridge	qvoronoi/poly.h	46;"	d
qh_ERRinput	qvoronoi/libqhull.h	171;"	d
qh_ERRmem	qvoronoi/libqhull.h	174;"	d
qh_ERRnone	qvoronoi/libqhull.h	170;"	d
qh_ERRprec	qvoronoi/libqhull.h	173;"	d
qh_ERRqhull	qvoronoi/libqhull.h	175;"	d
qh_ERRsingular	qvoronoi/libqhull.h	172;"	d
qh_FILENAMElen	qvoronoi/user.h	43;"	d
qh_FILEstderr	qvoronoi/libqhull.h	184;"	d
qh_False	qvoronoi/libqhull.h	111;"	d
qh_GEOMepsilon	qvoronoi/io.h	44;"	d
qh_HASHfactor	qvoronoi/user.h	379;"	d
qh_INFINITE	qvoronoi/user.h	465;"	d
qh_INITIALmax	qvoronoi/user.h	410;"	d
qh_INITIALsearch	qvoronoi/user.h	398;"	d
qh_IScheckmax	qvoronoi/libqhull.h	159;"	d
qh_ISnewfacets	qvoronoi/libqhull.h	160;"	d
qh_JOGGLEagain	qvoronoi/user.h	344;"	d
qh_JOGGLEdefault	qvoronoi/user.h	314;"	d
qh_JOGGLEincrease	qvoronoi/user.h	322;"	d
qh_JOGGLEmaxincrease	qvoronoi/user.h	356;"	d
qh_JOGGLEmaxretry	qvoronoi/user.h	364;"	d
qh_JOGGLEretry	qvoronoi/user.h	333;"	d
qh_KEEPstatistics	qvoronoi/stat.h	33;"	d
qh_KEEPstatistics	qvoronoi/user.h	522;"	d
qh_MAXfirst	qvoronoi/io.h	27;"	d
qh_MAXnarrow	qvoronoi/user.h	822;"	d
qh_MAXnewcentrum	qvoronoi/user.h	705;"	d
qh_MAXnewmerges	qvoronoi/user.h	692;"	d
qh_MAXnummerge	qvoronoi/libqhull.h	289;"	d
qh_MAXoutside	qvoronoi/user.h	535;"	d
qh_MEMalign	qvoronoi/user.h	435;"	d
qh_MEMbufsize	qvoronoi/user.h	446;"	d
qh_MEMinitbuf	qvoronoi/user.h	457;"	d
qh_MERGEapex	qvoronoi/merge.h	78;"	d
qh_MERGEridge	qvoronoi/poly.h	57;"	d
qh_MINradius	qvoronoi/io.h	35;"	d
qh_NOupper	qvoronoi/libqhull.h	158;"	d
qh_OPTIONline	qvoronoi/user.h	78;"	d
qh_ORIENTclock	qvoronoi/user.h	287;"	d
qh_PRINT	qvoronoi/libqhull.h	/^  qh_PRINTEND} qh_PRINT;$/;"	t	typeref:enum:__anon2
qh_PRINTEND	qvoronoi/libqhull.h	/^  qh_PRINTEND} qh_PRINT;$/;"	e	enum:__anon2
qh_PRINTarea	qvoronoi/libqhull.h	/^  qh_PRINTarea, qh_PRINTaverage,           \/* 'Fa' 'FV' 'Fc' 'FC' *\/$/;"	e	enum:__anon2
qh_PRINTaverage	qvoronoi/libqhull.h	/^  qh_PRINTarea, qh_PRINTaverage,           \/* 'Fa' 'FV' 'Fc' 'FC' *\/$/;"	e	enum:__anon2
qh_PRINTcentrums	qvoronoi/libqhull.h	/^  qh_PRINTcoplanars, qh_PRINTcentrums,$/;"	e	enum:__anon2
qh_PRINTcoplanars	qvoronoi/libqhull.h	/^  qh_PRINTcoplanars, qh_PRINTcentrums,$/;"	e	enum:__anon2
qh_PRINTextremes	qvoronoi/libqhull.h	/^  qh_PRINTvertices, qh_PRINTvneighbors, qh_PRINTextremes,$/;"	e	enum:__anon2
qh_PRINTfacets	qvoronoi/libqhull.h	/^  qh_PRINTfacets, qh_PRINTfacets_xridge,   \/* 'f' 'FF' 'G' 'FI' 'Fi' 'Fn' *\/$/;"	e	enum:__anon2
qh_PRINTfacets_xridge	qvoronoi/libqhull.h	/^  qh_PRINTfacets, qh_PRINTfacets_xridge,   \/* 'f' 'FF' 'G' 'FI' 'Fi' 'Fn' *\/$/;"	e	enum:__anon2
qh_PRINTgeom	qvoronoi/libqhull.h	/^  qh_PRINTgeom, qh_PRINTids, qh_PRINTinner, qh_PRINTneighbors,$/;"	e	enum:__anon2
qh_PRINTids	qvoronoi/libqhull.h	/^  qh_PRINTgeom, qh_PRINTids, qh_PRINTinner, qh_PRINTneighbors,$/;"	e	enum:__anon2
qh_PRINTincidences	qvoronoi/libqhull.h	/^  qh_PRINTincidences, qh_PRINTmathematica, qh_PRINTmerges, qh_PRINToff,$/;"	e	enum:__anon2
qh_PRINTinner	qvoronoi/libqhull.h	/^  qh_PRINTgeom, qh_PRINTids, qh_PRINTinner, qh_PRINTneighbors,$/;"	e	enum:__anon2
qh_PRINTmaple	qvoronoi/libqhull.h	/^  qh_PRINTnormals, qh_PRINTouter, qh_PRINTmaple, \/* 'n' 'Fo' 'i' 'm' 'Fm' 'FM', 'o' *\/$/;"	e	enum:__anon2
qh_PRINTmathematica	qvoronoi/libqhull.h	/^  qh_PRINTincidences, qh_PRINTmathematica, qh_PRINTmerges, qh_PRINToff,$/;"	e	enum:__anon2
qh_PRINTmerges	qvoronoi/libqhull.h	/^  qh_PRINTincidences, qh_PRINTmathematica, qh_PRINTmerges, qh_PRINToff,$/;"	e	enum:__anon2
qh_PRINTneighbors	qvoronoi/libqhull.h	/^  qh_PRINTgeom, qh_PRINTids, qh_PRINTinner, qh_PRINTneighbors,$/;"	e	enum:__anon2
qh_PRINTnone	qvoronoi/libqhull.h	/^typedef enum {qh_PRINTnone= 0,$/;"	e	enum:__anon2
qh_PRINTnormals	qvoronoi/libqhull.h	/^  qh_PRINTnormals, qh_PRINTouter, qh_PRINTmaple, \/* 'n' 'Fo' 'i' 'm' 'Fm' 'FM', 'o' *\/$/;"	e	enum:__anon2
qh_PRINToff	qvoronoi/libqhull.h	/^  qh_PRINTincidences, qh_PRINTmathematica, qh_PRINTmerges, qh_PRINToff,$/;"	e	enum:__anon2
qh_PRINToptions	qvoronoi/libqhull.h	/^  qh_PRINToptions, qh_PRINTpointintersect, \/* 'FO' 'Fp' 'FP' 'p' 'FQ' 'FS' *\/$/;"	e	enum:__anon2
qh_PRINTouter	qvoronoi/libqhull.h	/^  qh_PRINTnormals, qh_PRINTouter, qh_PRINTmaple, \/* 'n' 'Fo' 'i' 'm' 'Fm' 'FM', 'o' *\/$/;"	e	enum:__anon2
qh_PRINTpointintersect	qvoronoi/libqhull.h	/^  qh_PRINToptions, qh_PRINTpointintersect, \/* 'FO' 'Fp' 'FP' 'p' 'FQ' 'FS' *\/$/;"	e	enum:__anon2
qh_PRINTpointnearest	qvoronoi/libqhull.h	/^  qh_PRINTpointnearest, qh_PRINTpoints, qh_PRINTqhull, qh_PRINTsize,$/;"	e	enum:__anon2
qh_PRINTpoints	qvoronoi/libqhull.h	/^  qh_PRINTpointnearest, qh_PRINTpoints, qh_PRINTqhull, qh_PRINTsize,$/;"	e	enum:__anon2
qh_PRINTqhull	qvoronoi/libqhull.h	/^  qh_PRINTpointnearest, qh_PRINTpoints, qh_PRINTqhull, qh_PRINTsize,$/;"	e	enum:__anon2
qh_PRINTsize	qvoronoi/libqhull.h	/^  qh_PRINTpointnearest, qh_PRINTpoints, qh_PRINTqhull, qh_PRINTsize,$/;"	e	enum:__anon2
qh_PRINTsummary	qvoronoi/libqhull.h	/^  qh_PRINTsummary, qh_PRINTtriangles,      \/* 'Fs' 'Ft' 'Fv' 'FN' 'Fx' *\/$/;"	e	enum:__anon2
qh_PRINTtriangles	qvoronoi/libqhull.h	/^  qh_PRINTsummary, qh_PRINTtriangles,      \/* 'Fs' 'Ft' 'Fv' 'FN' 'Fx' *\/$/;"	e	enum:__anon2
qh_PRINTvertices	qvoronoi/libqhull.h	/^  qh_PRINTvertices, qh_PRINTvneighbors, qh_PRINTextremes,$/;"	e	enum:__anon2
qh_PRINTvneighbors	qvoronoi/libqhull.h	/^  qh_PRINTvertices, qh_PRINTvneighbors, qh_PRINTextremes,$/;"	e	enum:__anon2
qh_QHpointer	qvoronoi/user.h	602;"	d
qh_QUICKhelp	qvoronoi/user.h	633;"	d
qh_RANDOMint	qvoronoi/user.h	249;"	d
qh_RANDOMint	qvoronoi/user.h	258;"	d
qh_RANDOMint	qvoronoi/user.h	263;"	d
qh_RANDOMint	qvoronoi/user.h	268;"	d
qh_RANDOMint	qvoronoi/user.h	273;"	d
qh_RANDOMmax	qvoronoi/user.h	248;"	d
qh_RANDOMmax	qvoronoi/user.h	254;"	d
qh_RANDOMmax	qvoronoi/user.h	256;"	d
qh_RANDOMmax	qvoronoi/user.h	262;"	d
qh_RANDOMmax	qvoronoi/user.h	267;"	d
qh_RANDOMmax	qvoronoi/user.h	272;"	d
qh_RANDOMseed_	qvoronoi/user.h	250;"	d
qh_RANDOMseed_	qvoronoi/user.h	259;"	d
qh_RANDOMseed_	qvoronoi/user.h	264;"	d
qh_RANDOMseed_	qvoronoi/user.h	269;"	d
qh_RANDOMseed_	qvoronoi/user.h	274;"	d
qh_RANDOMtype	qvoronoi/user.h	245;"	d
qh_RATIOnearinside	qvoronoi/user.h	761;"	d
qh_REAL_1	qvoronoi/user.h	139;"	d
qh_REAL_1	qvoronoi/user.h	149;"	d
qh_REAL_2n	qvoronoi/user.h	140;"	d
qh_REAL_2n	qvoronoi/user.h	150;"	d
qh_REAL_3n	qvoronoi/user.h	141;"	d
qh_REAL_3n	qvoronoi/user.h	151;"	d
qh_REALdigits	qvoronoi/user.h	138;"	d
qh_REALdigits	qvoronoi/user.h	148;"	d
qh_RESETvisible	qvoronoi/libqhull.h	161;"	d
qh_RIDGE	qvoronoi/io.h	/^qh_RIDGE;$/;"	t	typeref:enum:__anon4
qh_RIDGEall	qvoronoi/io.h	/^    qh_RIDGEall = 0, qh_RIDGEinner, qh_RIDGEouter$/;"	e	enum:__anon4
qh_RIDGEinner	qvoronoi/io.h	/^    qh_RIDGEall = 0, qh_RIDGEinner, qh_RIDGEouter$/;"	e	enum:__anon4
qh_RIDGEouter	qvoronoi/io.h	/^    qh_RIDGEall = 0, qh_RIDGEinner, qh_RIDGEouter$/;"	e	enum:__anon4
qh_SEARCHdist	qvoronoi/user.h	775;"	d
qh_SECticks	qvoronoi/user.h	190;"	d
qh_SECticks	qvoronoi/user.h	194;"	d
qh_SECticks	qvoronoi/user.h	198;"	d
qh_SECticks	qvoronoi/user.h	202;"	d
qh_SECticks	qvoronoi/user.h	207;"	d
qh_TRACEshort	qvoronoi/mem.h	46;"	d
qh_True	qvoronoi/libqhull.h	112;"	d
qh_USEfindbestnew	qvoronoi/user.h	790;"	d
qh_VERIFYdirect	qvoronoi/user.h	390;"	d
qh_WARNnarrow	qvoronoi/user.h	834;"	d
qh_WHITESPACE	qvoronoi/io.h	52;"	d
qh_WIDEcoplanar	qvoronoi/user.h	806;"	d
qh_ZEROdelaunay	qvoronoi/user.h	853;"	d
qh_addhash	qvoronoi/poly2.cu	/^void qh_addhash(void* newelem, setT *hashtable, int hashsize, int hash) {$/;"	f
qh_addpoint	qvoronoi/libqhull.cu	/^boolT qh_addpoint(pointT *furthest, facetT *facet, boolT checkdist) {$/;"	f
qh_all_merges	qvoronoi/merge.cu	/^void qh_all_merges(boolT othermerge, boolT vneighbors) {$/;"	f
qh_allstatA	qvoronoi/stat.cu	/^void qh_allstatA(void) {$/;"	f
qh_allstatB	qvoronoi/stat.cu	/^void qh_allstatB(void) {$/;"	f
qh_allstatC	qvoronoi/stat.cu	/^void qh_allstatC(void) {$/;"	f
qh_allstatD	qvoronoi/stat.cu	/^void qh_allstatD(void) {$/;"	f
qh_allstatE	qvoronoi/stat.cu	/^void qh_allstatE(void) {$/;"	f
qh_allstatE2	qvoronoi/stat.cu	/^void qh_allstatE2(void) {$/;"	f
qh_allstatF	qvoronoi/stat.cu	/^void qh_allstatF(void) {$/;"	f
qh_allstatG	qvoronoi/stat.cu	/^void qh_allstatG(void) {$/;"	f
qh_allstatH	qvoronoi/stat.cu	/^void qh_allstatH(void) {$/;"	f
qh_allstatI	qvoronoi/stat.cu	/^void qh_allstatI(void) {$/;"	f
qh_allstatistics	qvoronoi/stat.cu	/^void qh_allstatistics(void) {$/;"	f
qh_appendfacet	qvoronoi/poly.cu	/^void qh_appendfacet(facetT *facet) {$/;"	f
qh_appendmergeset	qvoronoi/merge.cu	/^void qh_appendmergeset(facetT *facet, facetT *neighbor, mergeType mergetype, realT *angle) {$/;"	f
qh_appendprint	qvoronoi/global.cu	/^void qh_appendprint(qh_PRINT format) {$/;"	f
qh_appendvertex	qvoronoi/poly.cu	/^void qh_appendvertex(vertexT *vertex) {$/;"	f
qh_argv_to_command	qvoronoi/qhrandom.cu	/^int qh_argv_to_command(int argc, char *argv[], char* command, int max_size) {$/;"	f
qh_argv_to_command_size	qvoronoi/qhrandom.cu	/^int qh_argv_to_command_size(int argc, char *argv[]) {$/;"	f
qh_attachnewfacets	qvoronoi/poly.cu	/^void qh_attachnewfacets(void ) {$/;"	f
qh_backnormal	qvoronoi/geom.cu	/^void qh_backnormal(realT **rows, int numrow, int numcol, boolT sign,$/;"	f
qh_basevertices	qvoronoi/merge.cu	/^setT *qh_basevertices(facetT *samecycle) {$/;"	f
qh_build_withrestart	qvoronoi/libqhull.cu	/^void qh_build_withrestart(void) {$/;"	f
qh_buildhull	qvoronoi/libqhull.cu	/^void qh_buildhull(void) {$/;"	f
qh_buildtracing	qvoronoi/libqhull.cu	/^void qh_buildtracing(pointT *furthest, facetT *facet) {$/;"	f
qh_check_bestdist	qvoronoi/poly2.cu	/^void qh_check_bestdist(void) {$/;"	f
qh_check_maxout	qvoronoi/poly2.cu	/^void qh_check_maxout(void) {$/;"	f
qh_check_output	qvoronoi/poly2.cu	/^void qh_check_output(void) {$/;"	f
qh_check_point	qvoronoi/poly2.cu	/^void qh_check_point(pointT *point, facetT *facet, realT *maxoutside, realT *maxdist, facetT **errfacet1, facetT **errfacet2) {$/;"	f
qh_check_points	qvoronoi/poly2.cu	/^void qh_check_points(void) {$/;"	f
qh_checkconnect	qvoronoi/merge.cu	/^void qh_checkconnect(void \/* qh newfacet_list *\/) {$/;"	f
qh_checkconvex	qvoronoi/poly2.cu	/^void qh_checkconvex(facetT *facetlist, int fault) {$/;"	f
qh_checkfacet	qvoronoi/poly2.cu	/^void qh_checkfacet(facetT *facet, boolT newmerge, boolT *waserrorp) {$/;"	f
qh_checkflags	qvoronoi/global.cu	/^void qh_checkflags(char *command, char *hiddenflags) {$/;"	f
qh_checkflipped	qvoronoi/poly.cu	/^boolT qh_checkflipped(facetT *facet, realT *distp, boolT allerror) {$/;"	f
qh_checkflipped_all	qvoronoi/poly2.cu	/^void qh_checkflipped_all(facetT *facetlist) {$/;"	f
qh_checkpolygon	qvoronoi/poly2.cu	/^void qh_checkpolygon(facetT *facetlist) {$/;"	f
qh_checkvertex	qvoronoi/poly2.cu	/^void qh_checkvertex(vertexT *vertex) {$/;"	f
qh_checkzero	qvoronoi/merge.cu	/^boolT qh_checkzero(boolT testall) {$/;"	f
qh_clear_outputflags	qvoronoi/global.cu	/^void qh_clear_outputflags(void) {$/;"	f
qh_clearcenters	qvoronoi/poly2.cu	/^void qh_clearcenters(qh_CENTER type) {$/;"	f
qh_clock	qvoronoi/global.cu	/^unsigned long qh_clock(void) {$/;"	f
qh_collectstatistics	qvoronoi/stat.cu	/^void    qh_collectstatistics(void) {}$/;"	f
qh_collectstatistics	qvoronoi/stat.cu	/^void qh_collectstatistics(void) {$/;"	f
qh_compare_facetarea	qvoronoi/io.cu	/^int qh_compare_facetarea(const void *p1, const void *p2) {$/;"	f
qh_compare_facetmerge	qvoronoi/io.cu	/^int qh_compare_facetmerge(const void *p1, const void *p2) {$/;"	f
qh_compare_facetvisit	qvoronoi/io.cu	/^int qh_compare_facetvisit(const void *p1, const void *p2) {$/;"	f
qh_compare_vertexpoint	qvoronoi/io.cu	/^int qh_compare_vertexpoint(const void *p1, const void *p2) {$/;"	f
qh_compareangle	qvoronoi/merge.cu	/^int qh_compareangle(const void *p1, const void *p2) {$/;"	f
qh_comparemerge	qvoronoi/merge.cu	/^int qh_comparemerge(const void *p1, const void *p2) {$/;"	f
qh_comparevisit	qvoronoi/merge.cu	/^int qh_comparevisit(const void *p1, const void *p2) {$/;"	f
qh_copyfilename	qvoronoi/io.cu	/^void qh_copyfilename(char *filename, int size, const char* source, int length) {$/;"	f
qh_copynonconvex	qvoronoi/merge.cu	/^void qh_copynonconvex(ridgeT *atridge) {$/;"	f
qh_copypoints	qvoronoi/geom2.cu	/^coordT *qh_copypoints(coordT *points, int numpoints, int dimension) {$/;"	f
qh_countfacets	qvoronoi/io.cu	/^void qh_countfacets(facetT *facetlist, setT *facets, boolT printall,$/;"	f
qh_createsimplex	qvoronoi/poly2.cu	/^void qh_createsimplex(setT *vertices) {$/;"	f
qh_crossproduct	qvoronoi/geom2.cu	/^void qh_crossproduct(int dim, realT vecA[3], realT vecB[3], realT vecC[3]){$/;"	f
qh_degen_redundant_facet	qvoronoi/merge.cu	/^void qh_degen_redundant_facet(facetT *facet) {$/;"	f
qh_degen_redundant_neighbors	qvoronoi/merge.cu	/^void qh_degen_redundant_neighbors(facetT *facet, facetT *delfacet) {$/;"	f
qh_deletevisible	qvoronoi/poly.cu	/^void qh_deletevisible(void \/*qh visible_list*\/) {$/;"	f
qh_delfacet	qvoronoi/poly.cu	/^void qh_delfacet(facetT *facet) {$/;"	f
qh_delridge	qvoronoi/poly2.cu	/^void qh_delridge(ridgeT *ridge) {$/;"	f
qh_delvertex	qvoronoi/poly2.cu	/^void qh_delvertex(vertexT *vertex) {$/;"	f
qh_determinant	qvoronoi/geom2.cu	/^realT qh_determinant(realT **rows, int dim, boolT *nearzero) {$/;"	f
qh_detjoggle	qvoronoi/geom2.cu	/^realT qh_detjoggle(pointT *points, int numpoints, int dimension) {$/;"	f
qh_detroundoff	qvoronoi/geom2.cu	/^void qh_detroundoff(void) {$/;"	f
qh_detsimplex	qvoronoi/geom2.cu	/^realT qh_detsimplex(pointT *apex, setT *points, int dim, boolT *nearzero) {$/;"	f
qh_detvnorm	qvoronoi/io.cu	/^pointT *qh_detvnorm(vertexT *vertex, vertexT *vertexA, setT *centers, realT *offsetp) {$/;"	f
qh_detvridge	qvoronoi/io.cu	/^setT *qh_detvridge(vertexT *vertex) {$/;"	f
qh_detvridge3	qvoronoi/io.cu	/^setT *qh_detvridge3 (vertexT *atvertex, vertexT *vertex) {$/;"	f
qh_distnorm	qvoronoi/geom2.cu	/^realT qh_distnorm(int dim, pointT *point, pointT *normal, realT *offsetp) {$/;"	f
qh_distplane	qvoronoi/geom.cu	/^void qh_distplane(pointT *point, facetT *facet, realT *dist) {$/;"	f
qh_distround	qvoronoi/geom2.cu	/^realT qh_distround(int dimension, realT maxabs, realT maxsumabs) {$/;"	f
qh_divzero	qvoronoi/geom2.cu	/^realT qh_divzero(realT numer, realT denom, realT mindenom1, boolT *zerodiv) {$/;"	f
qh_eachvoronoi	qvoronoi/io.cu	/^int qh_eachvoronoi(FILE *fp, printvridgeT printvridge, vertexT *atvertex, boolT visitall, qh_RIDGE innerouter, boolT inorder) {$/;"	f
qh_eachvoronoi_all	qvoronoi/io.cu	/^int qh_eachvoronoi_all(FILE *fp, printvridgeT printvridge, boolT isUpper, qh_RIDGE innerouter, boolT inorder) {$/;"	f
qh_errexit	qvoronoi/user.cu	/^void qh_errexit(int exitcode, facetT *facet, ridgeT *ridge) {$/;"	f
qh_errexit2	qvoronoi/libqhull.cu	/^void qh_errexit2(int exitcode, facetT *facet, facetT *otherfacet) {$/;"	f
qh_errexit_rbox	qvoronoi/rboxlib.cu	/^void qh_errexit_rbox(int exitcode)$/;"	f
qh_errprint	qvoronoi/user.cu	/^void qh_errprint(const char *string, facetT *atfacet, facetT *otherfacet, ridgeT *atridge, vertexT *atvertex) {$/;"	f
qh_exit	qvoronoi/usermem.cu	/^void qh_exit(int exitcode) {$/;"	f
qh_facet2point	qvoronoi/io.cu	/^void qh_facet2point(facetT *facet, pointT **point0, pointT **point1, realT *mindist) {$/;"	f
qh_facet3vertex	qvoronoi/poly2.cu	/^setT *qh_facet3vertex(facetT *facet) {$/;"	f
qh_facetarea	qvoronoi/geom2.cu	/^realT qh_facetarea(facetT *facet) {$/;"	f
qh_facetarea_simplex	qvoronoi/geom2.cu	/^realT qh_facetarea_simplex(int dim, coordT *apex, setT *vertices,$/;"	f
qh_facetcenter	qvoronoi/geom2.cu	/^pointT *qh_facetcenter(setT *vertices) {$/;"	f
qh_facetintersect	qvoronoi/poly.cu	/^setT *qh_facetintersect(facetT *facetA, facetT *facetB,$/;"	f
qh_facetvertices	qvoronoi/io.cu	/^setT *qh_facetvertices(facetT *facetlist, setT *facets, boolT allfacets) {$/;"	f
qh_find_newvertex	qvoronoi/merge.cu	/^vertexT *qh_find_newvertex(vertexT *oldvertex, setT *vertices, setT *ridges) {$/;"	f
qh_findbest	qvoronoi/geom.cu	/^facetT *qh_findbest(pointT *point, facetT *startfacet,$/;"	f
qh_findbest_test	qvoronoi/merge.cu	/^void qh_findbest_test(boolT testcentrum, facetT *facet, facetT *neighbor,$/;"	f
qh_findbestfacet	qvoronoi/poly2.cu	/^facetT *qh_findbestfacet(pointT *point, boolT bestoutside,$/;"	f
qh_findbesthorizon	qvoronoi/geom.cu	/^facetT *qh_findbesthorizon(boolT ischeckmax, pointT* point, facetT *startfacet, boolT noupper, realT *bestdist, int *numpart) {$/;"	f
qh_findbestlower	qvoronoi/poly2.cu	/^facetT *qh_findbestlower(facetT *upperfacet, pointT *point, realT *bestdistp, int *numpart) {$/;"	f
qh_findbestneighbor	qvoronoi/merge.cu	/^facetT *qh_findbestneighbor(facetT *facet, realT *distp, realT *mindistp, realT *maxdistp) {$/;"	f
qh_findbestnew	qvoronoi/geom.cu	/^facetT *qh_findbestnew(pointT *point, facetT *startfacet,$/;"	f
qh_findfacet_all	qvoronoi/poly2.cu	/^facetT *qh_findfacet_all(pointT *point, realT *bestdist, boolT *isoutside,$/;"	f
qh_findgood	qvoronoi/poly2.cu	/^int qh_findgood(facetT *facetlist, int goodhorizon) {$/;"	f
qh_findgood_all	qvoronoi/poly2.cu	/^void qh_findgood_all(facetT *facetlist) {$/;"	f
qh_findgooddist	qvoronoi/geom2.cu	/^facetT *qh_findgooddist(pointT *point, facetT *facetA, realT *distp,$/;"	f
qh_findhorizon	qvoronoi/libqhull.cu	/^void qh_findhorizon(pointT *point, facetT *facet, int *goodvisible, int *goodhorizon) {$/;"	f
qh_flippedmerges	qvoronoi/merge.cu	/^void qh_flippedmerges(facetT *facetlist, boolT *wasmerge) {$/;"	f
qh_forcedmerges	qvoronoi/merge.cu	/^void qh_forcedmerges(boolT *wasmerge) {$/;"	f
qh_fprintf	qvoronoi/userprintf.cu	/^void qh_fprintf(FILE *fp, int msgcode, const char *fmt, ... ) {$/;"	f
qh_fprintf_rbox	qvoronoi/userprintf_rbox.cu	/^void qh_fprintf_rbox(FILE *fp, int msgcode, const char *fmt, ... ) {$/;"	f
qh_free	qvoronoi/usermem.cu	/^void qh_free(void *mem) {$/;"	f
qh_freebuffers	qvoronoi/global.cu	/^void qh_freebuffers(void) {$/;"	f
qh_freebuild	qvoronoi/global.cu	/^void qh_freebuild(boolT allmem) {$/;"	f
qh_freeqhull	qvoronoi/global.cu	/^void qh_freeqhull(boolT allmem) {$/;"	f
qh_freeqhull2	qvoronoi/global.cu	/^void qh_freeqhull2(boolT allmem) {$/;"	f
qh_freestatistics	qvoronoi/stat.cu	/^void qh_freestatistics(void) {$/;"	f
qh_furthestnext	qvoronoi/poly2.cu	/^void qh_furthestnext(void \/* qh facet_list *\/) {$/;"	f
qh_furthestout	qvoronoi/poly2.cu	/^void qh_furthestout(facetT *facet) {$/;"	f
qh_gausselim	qvoronoi/geom.cu	/^void qh_gausselim(realT **rows, int numrow, int numcol, boolT *sign, boolT *nearzero) {$/;"	f
qh_geomplanes	qvoronoi/io.cu	/^void qh_geomplanes(facetT *facet, realT *outerplane, realT *innerplane) {$/;"	f
qh_getangle	qvoronoi/geom.cu	/^realT qh_getangle(pointT *vect1, pointT *vect2) {$/;"	f
qh_getarea	qvoronoi/geom2.cu	/^void qh_getarea(facetT *facetlist) {$/;"	f
qh_getcenter	qvoronoi/geom.cu	/^pointT *qh_getcenter(setT *vertices) {$/;"	f
qh_getcentrum	qvoronoi/geom.cu	/^pointT *qh_getcentrum(facetT *facet) {$/;"	f
qh_getdistance	qvoronoi/geom.cu	/^realT qh_getdistance(facetT *facet, facetT *neighbor, realT *mindist, realT *maxdist) {$/;"	f
qh_gethash	qvoronoi/poly.cu	/^int qh_gethash(int hashsize, setT *set, int size, int firstindex, void *skipelem) {$/;"	f
qh_getmergeset	qvoronoi/merge.cu	/^void qh_getmergeset(facetT *facetlist) {$/;"	f
qh_getmergeset_initial	qvoronoi/merge.cu	/^void qh_getmergeset_initial(facetT *facetlist) {$/;"	f
qh_gram_schmidt	qvoronoi/geom2.cu	/^boolT qh_gram_schmidt(int dim, realT **row) {$/;"	f
qh_hashridge	qvoronoi/merge.cu	/^void qh_hashridge(setT *hashtable, int hashsize, ridgeT *ridge, vertexT *oldvertex) {$/;"	f
qh_hashridge_find	qvoronoi/merge.cu	/^ridgeT *qh_hashridge_find(setT *hashtable, int hashsize, ridgeT *ridge,$/;"	f
qh_infiniteloop	qvoronoi/poly2.cu	/^void qh_infiniteloop(facetT *facet) {$/;"	f
qh_init_A	qvoronoi/global.cu	/^void qh_init_A(FILE *infile, FILE *outfile, FILE *errfile, int argc, char *argv[]) {$/;"	f
qh_init_B	qvoronoi/global.cu	/^void qh_init_B(coordT *points, int numpoints, int dim, boolT ismalloc) {$/;"	f
qh_init_qhull_command	qvoronoi/global.cu	/^void qh_init_qhull_command(int argc, char *argv[]) {$/;"	f
qh_initbuild	qvoronoi/poly2.cu	/^void qh_initbuild( void) {$/;"	f
qh_initflags	qvoronoi/global.cu	/^void qh_initflags(char *command) {$/;"	f
qh_initialhull	qvoronoi/poly2.cu	/^void qh_initialhull(setT *vertices) {$/;"	f
qh_initialvertices	qvoronoi/poly2.cu	/^setT *qh_initialvertices(int dim, setT *maxpoints, pointT *points, int numpoints) {$/;"	f
qh_initqhull_buffers	qvoronoi/global.cu	/^void qh_initqhull_buffers(void) {$/;"	f
qh_initqhull_globals	qvoronoi/global.cu	/^void qh_initqhull_globals(coordT *points, int numpoints, int dim, boolT ismalloc) {$/;"	f
qh_initqhull_mem	qvoronoi/global.cu	/^void qh_initqhull_mem(void) {$/;"	f
qh_initqhull_outputflags	qvoronoi/global.cu	/^void qh_initqhull_outputflags(void) {$/;"	f
qh_initqhull_start	qvoronoi/global.cu	/^void qh_initqhull_start(FILE *infile, FILE *outfile, FILE *errfile) {$/;"	f
qh_initqhull_start2	qvoronoi/global.cu	/^void qh_initqhull_start2(FILE *infile, FILE *outfile, FILE *errfile) {$/;"	f
qh_initstatistics	qvoronoi/stat.cu	/^void qh_initstatistics(void) {$/;"	f
qh_initthresholds	qvoronoi/global.cu	/^void qh_initthresholds(char *command) {$/;"	f
qh_intcompare	qvoronoi/mem.cu	/^static int qh_intcompare(const void *i, const void *j) {$/;"	f	file:
qh_inthresholds	qvoronoi/geom2.cu	/^boolT qh_inthresholds(coordT *normal, realT *angle) {$/;"	f
qh_isvertex	qvoronoi/poly2.cu	/^vertexT *qh_isvertex(pointT *point, setT *vertices) {$/;"	f
qh_joggleinput	qvoronoi/geom2.cu	/^void qh_joggleinput(void) {$/;"	f
qh_makenew_nonsimplicial	qvoronoi/poly.cu	/^facetT *qh_makenew_nonsimplicial(facetT *visible, vertexT *apex, int *numnew) {$/;"	f
qh_makenew_simplicial	qvoronoi/poly.cu	/^facetT *qh_makenew_simplicial(facetT *visible, vertexT *apex, int *numnew) {$/;"	f
qh_makenewfacet	qvoronoi/poly.cu	/^facetT *qh_makenewfacet(setT *vertices, boolT toporient,facetT *horizon) {$/;"	f
qh_makenewfacets	qvoronoi/poly2.cu	/^vertexT *qh_makenewfacets(pointT *point \/*visible_list*\/) {$/;"	f
qh_makenewplanes	qvoronoi/poly.cu	/^void qh_makenewplanes(void \/* newfacet_list *\/) {$/;"	f
qh_makeridges	qvoronoi/merge.cu	/^void qh_makeridges(facetT *facet) {$/;"	f
qh_malloc	qvoronoi/usermem.cu	/^void *qh_malloc(size_t size) {$/;"	f
qh_mark_dupridges	qvoronoi/merge.cu	/^void qh_mark_dupridges(facetT *facetlist) {$/;"	f
qh_markkeep	qvoronoi/io.cu	/^void qh_markkeep(facetT *facetlist) {$/;"	f
qh_markvoronoi	qvoronoi/io.cu	/^setT *qh_markvoronoi(facetT *facetlist, setT *facets, boolT printall, boolT *isLowerp, int *numcentersp) {$/;"	f
qh_matchduplicates	qvoronoi/poly2.cu	/^void qh_matchduplicates(facetT *atfacet, int atskip, int hashsize, int *hashcount) {$/;"	f
qh_matchneighbor	qvoronoi/poly.cu	/^void qh_matchneighbor(facetT *newfacet, int newskip, int hashsize, int *hashcount) {$/;"	f
qh_matchnewfacets	qvoronoi/poly.cu	/^void qh_matchnewfacets(void \/* qh newfacet_list *\/) {$/;"	f
qh_matchvertices	qvoronoi/poly.cu	/^boolT qh_matchvertices(int firstindex, setT *verticesA, int skipA,$/;"	f
qh_maxabsval	qvoronoi/geom2.cu	/^realT *qh_maxabsval(realT *normal, int dim) {$/;"	f
qh_maxmin	qvoronoi/geom2.cu	/^setT *qh_maxmin(pointT *points, int numpoints, int dimension) {$/;"	f
qh_maxouter	qvoronoi/geom2.cu	/^realT qh_maxouter(void) {$/;"	f
qh_maxsimplex	qvoronoi/geom2.cu	/^void qh_maxsimplex(int dim, setT *maxpoints, pointT *points, int numpoints, setT **simplex) {$/;"	f
qh_maydropneighbor	qvoronoi/merge.cu	/^void qh_maydropneighbor(facetT *facet) {$/;"	f
qh_memalloc	qvoronoi/mem.cu	/^void *qh_memalloc(int insize) {$/;"	f
qh_memalloc_	qvoronoi/mem.h	159;"	d
qh_memalloc_	qvoronoi/mem.h	162;"	d
qh_memalloc_	qvoronoi/mem.h	167;"	d
qh_memfree	qvoronoi/mem.cu	/^void qh_memfree(void *object, int insize) {$/;"	f
qh_memfree_	qvoronoi/mem.h	188;"	d
qh_memfree_	qvoronoi/mem.h	191;"	d
qh_memfree_	qvoronoi/mem.h	196;"	d
qh_memfreeshort	qvoronoi/mem.cu	/^void qh_memfreeshort(int *curlong, int *totlong) {$/;"	f
qh_meminit	qvoronoi/mem.cu	/^void qh_meminit(FILE *ferr) {$/;"	f
qh_meminitbuffers	qvoronoi/mem.cu	/^void qh_meminitbuffers(int tracelevel, int alignment, int numsizes, int bufsize, int bufinit) {$/;"	f
qh_memsetup	qvoronoi/mem.cu	/^void qh_memsetup(void) {$/;"	f
qh_memsize	qvoronoi/mem.cu	/^void qh_memsize(int size) {$/;"	f
qh_memstatistics	qvoronoi/mem.cu	/^void qh_memstatistics(FILE *fp) {$/;"	f
qh_memtotal	qvoronoi/mem.cu	/^void qh_memtotal(int *totlong, int *curlong, int *totshort, int *curshort, int *maxlong, int *totbuffer) {$/;"	f
qh_merge_degenredundant	qvoronoi/merge.cu	/^int qh_merge_degenredundant(void) {$/;"	f
qh_merge_nonconvex	qvoronoi/merge.cu	/^void qh_merge_nonconvex(facetT *facet1, facetT *facet2, mergeType mergetype) {$/;"	f
qh_mergecycle	qvoronoi/merge.cu	/^void qh_mergecycle(facetT *samecycle, facetT *newfacet) {$/;"	f
qh_mergecycle_all	qvoronoi/merge.cu	/^void qh_mergecycle_all(facetT *facetlist, boolT *wasmerge) {$/;"	f
qh_mergecycle_facets	qvoronoi/merge.cu	/^void qh_mergecycle_facets(facetT *samecycle, facetT *newfacet) {$/;"	f
qh_mergecycle_neighbors	qvoronoi/merge.cu	/^void qh_mergecycle_neighbors(facetT *samecycle, facetT *newfacet) {$/;"	f
qh_mergecycle_ridges	qvoronoi/merge.cu	/^void qh_mergecycle_ridges(facetT *samecycle, facetT *newfacet) {$/;"	f
qh_mergecycle_vneighbors	qvoronoi/merge.cu	/^void qh_mergecycle_vneighbors(facetT *samecycle, facetT *newfacet) {$/;"	f
qh_mergefacet	qvoronoi/merge.cu	/^void qh_mergefacet(facetT *facet1, facetT *facet2, realT *mindist, realT *maxdist, boolT mergeapex) {$/;"	f
qh_mergefacet2d	qvoronoi/merge.cu	/^void qh_mergefacet2d(facetT *facet1, facetT *facet2) {$/;"	f
qh_mergeneighbors	qvoronoi/merge.cu	/^void qh_mergeneighbors(facetT *facet1, facetT *facet2) {$/;"	f
qh_mergeridges	qvoronoi/merge.cu	/^void qh_mergeridges(facetT *facet1, facetT *facet2) {$/;"	f
qh_mergesimplex	qvoronoi/merge.cu	/^void qh_mergesimplex(facetT *facet1, facetT *facet2, boolT mergeapex) {$/;"	f
qh_mergevertex_del	qvoronoi/merge.cu	/^void qh_mergevertex_del(vertexT *vertex, facetT *facet1, facetT *facet2) {$/;"	f
qh_mergevertex_neighbors	qvoronoi/merge.cu	/^void qh_mergevertex_neighbors(facetT *facet1, facetT *facet2) {$/;"	f
qh_mergevertices	qvoronoi/merge.cu	/^void qh_mergevertices(setT *vertices1, setT **vertices2) {$/;"	f
qh_minabsval	qvoronoi/geom2.cu	/^realT qh_minabsval(realT *normal, int dim) {$/;"	f
qh_mindiff	qvoronoi/geom2.cu	/^int qh_mindiff(realT *vecA, realT *vecB, int dim) {$/;"	f
qh_nearcoplanar	qvoronoi/poly2.cu	/^void qh_nearcoplanar(void \/* qh.facet_list *\/) {$/;"	f
qh_nearvertex	qvoronoi/poly2.cu	/^vertexT *qh_nearvertex(facetT *facet, pointT *point, realT *bestdistp) {$/;"	f
qh_neighbor_intersections	qvoronoi/merge.cu	/^setT *qh_neighbor_intersections(vertexT *vertex) {$/;"	f
qh_new_qhull	qvoronoi/user.cu	/^int qh_new_qhull(int dim, int numpoints, coordT *points, boolT ismalloc,$/;"	f
qh_newfacet	qvoronoi/poly.cu	/^facetT *qh_newfacet(void) {$/;"	f
qh_newhashtable	qvoronoi/poly2.cu	/^int qh_newhashtable(int newsize) {$/;"	f
qh_newridge	qvoronoi/poly.cu	/^ridgeT *qh_newridge(void) {$/;"	f
qh_newstats	qvoronoi/stat.cu	/^boolT qh_newstats(int idx, int *nextindex) {$/;"	f
qh_newvertex	qvoronoi/poly2.cu	/^vertexT *qh_newvertex(pointT *point) {$/;"	f
qh_newvertices	qvoronoi/merge.cu	/^void qh_newvertices(setT *vertices) {$/;"	f
qh_nextfurthest	qvoronoi/libqhull.cu	/^pointT *qh_nextfurthest(facetT **visible) {$/;"	f
qh_nextridge3d	qvoronoi/poly2.cu	/^ridgeT *qh_nextridge3d(ridgeT *atridge, facetT *facet, vertexT **vertexp) {$/;"	f
qh_normalize	qvoronoi/geom.cu	/^void qh_normalize(coordT *normal, int dim, boolT toporient) {$/;"	f
qh_normalize2	qvoronoi/geom.cu	/^void qh_normalize2 (coordT *normal, int dim, boolT toporient,$/;"	f
qh_nostatistic	qvoronoi/stat.cu	/^boolT qh_nostatistic(int i) {$/;"	f
qh_option	qvoronoi/global.cu	/^void qh_option(const char *option, int *i, realT *r) {$/;"	f
qh_order_vertexneighbors	qvoronoi/io.cu	/^void qh_order_vertexneighbors(vertexT *vertex) {$/;"	f
qh_orientoutside	qvoronoi/geom2.cu	/^boolT qh_orientoutside(facetT *facet) {$/;"	f
qh_outcoplanar	qvoronoi/poly2.cu	/^void qh_outcoplanar(void \/* facet_list *\/) {$/;"	f
qh_outerinner	qvoronoi/geom2.cu	/^void qh_outerinner(facetT *facet, realT *outerplane, realT *innerplane) {$/;"	f
qh_partitionall	qvoronoi/libqhull.cu	/^void qh_partitionall(setT *vertices, pointT *points, int numpoints){$/;"	f
qh_partitioncoplanar	qvoronoi/libqhull.cu	/^void qh_partitioncoplanar(pointT *point, facetT *facet, realT *dist) {$/;"	f
qh_partitionpoint	qvoronoi/libqhull.cu	/^void qh_partitionpoint(pointT *point, facetT *facet) {$/;"	f
qh_partitionvisible	qvoronoi/libqhull.cu	/^void qh_partitionvisible(\/*visible_list*\/ boolT allpoints, int *numoutside) {$/;"	f
qh_point	qvoronoi/poly2.cu	/^pointT *qh_point(int id) {$/;"	f
qh_point_add	qvoronoi/poly2.cu	/^void qh_point_add(setT *set, pointT *point, void *elem) {$/;"	f
qh_pointdist	qvoronoi/geom2.cu	/^coordT qh_pointdist(pointT *point1, pointT *point2, int dim) {$/;"	f
qh_pointfacet	qvoronoi/poly2.cu	/^setT *qh_pointfacet(void \/*qh facet_list*\/) {$/;"	f
qh_pointid	qvoronoi/poly.cu	/^int qh_pointid(pointT *point) {$/;"	f
qh_pointvertex	qvoronoi/poly2.cu	/^setT *qh_pointvertex(void \/*qh facet_list*\/) {$/;"	f
qh_postmerge	qvoronoi/merge.cu	/^void qh_postmerge(const char *reason, realT maxcentrum, realT maxangle,$/;"	f
qh_precision	qvoronoi/libqhull.cu	/^void qh_precision(const char *reason) {$/;"	f
qh_premerge	qvoronoi/merge.cu	/^void qh_premerge(vertexT *apex, realT maxcentrum, realT maxangle) {$/;"	f
qh_prepare_output	qvoronoi/io.cu	/^void qh_prepare_output(void) {$/;"	f
qh_prependfacet	qvoronoi/poly2.cu	/^void qh_prependfacet(facetT *facet, facetT **facetlist) {$/;"	f
qh_printafacet	qvoronoi/io.cu	/^void qh_printafacet(FILE *fp, qh_PRINT format, facetT *facet, boolT printall) {$/;"	f
qh_printallstatistics	qvoronoi/stat.cu	/^void    qh_printallstatistics(FILE *fp, char *string) {};$/;"	f
qh_printallstatistics	qvoronoi/stat.cu	/^void qh_printallstatistics(FILE *fp, const char *string) {$/;"	f
qh_printbegin	qvoronoi/io.cu	/^void qh_printbegin(FILE *fp, qh_PRINT format, facetT *facetlist, setT *facets, boolT printall) {$/;"	f
qh_printcenter	qvoronoi/io.cu	/^void qh_printcenter(FILE *fp, qh_PRINT format, const char *string, facetT *facet) {$/;"	f
qh_printcentrum	qvoronoi/io.cu	/^void qh_printcentrum(FILE *fp, facetT *facet, realT radius) {$/;"	f
qh_printend	qvoronoi/io.cu	/^void qh_printend(FILE *fp, qh_PRINT format, facetT *facetlist, setT *facets, boolT printall) {$/;"	f
qh_printend4geom	qvoronoi/io.cu	/^void qh_printend4geom(FILE *fp, facetT *facet, int *nump, boolT printall) {$/;"	f
qh_printextremes	qvoronoi/io.cu	/^void qh_printextremes(FILE *fp, facetT *facetlist, setT *facets, boolT printall) {$/;"	f
qh_printextremes_2d	qvoronoi/io.cu	/^void qh_printextremes_2d(FILE *fp, facetT *facetlist, setT *facets, boolT printall) {$/;"	f
qh_printextremes_d	qvoronoi/io.cu	/^void qh_printextremes_d(FILE *fp, facetT *facetlist, setT *facets, boolT printall) {$/;"	f
qh_printfacet	qvoronoi/io.cu	/^void qh_printfacet(FILE *fp, facetT *facet) {$/;"	f
qh_printfacet2geom	qvoronoi/io.cu	/^void qh_printfacet2geom(FILE *fp, facetT *facet, realT color[3]) {$/;"	f
qh_printfacet2geom_points	qvoronoi/io.cu	/^void qh_printfacet2geom_points(FILE *fp, pointT *point1, pointT *point2,$/;"	f
qh_printfacet2math	qvoronoi/io.cu	/^void qh_printfacet2math(FILE *fp, facetT *facet, qh_PRINT format, int notfirst) {$/;"	f
qh_printfacet3geom_nonsimplicial	qvoronoi/io.cu	/^void qh_printfacet3geom_nonsimplicial(FILE *fp, facetT *facet, realT color[3]) {$/;"	f
qh_printfacet3geom_points	qvoronoi/io.cu	/^void qh_printfacet3geom_points(FILE *fp, setT *points, facetT *facet, realT offset, realT color[3]) {$/;"	f
qh_printfacet3geom_simplicial	qvoronoi/io.cu	/^void qh_printfacet3geom_simplicial(FILE *fp, facetT *facet, realT color[3]) {$/;"	f
qh_printfacet3math	qvoronoi/io.cu	/^void qh_printfacet3math(FILE *fp, facetT *facet, qh_PRINT format, int notfirst) {$/;"	f
qh_printfacet3vertex	qvoronoi/io.cu	/^void qh_printfacet3vertex(FILE *fp, facetT *facet, qh_PRINT format) {$/;"	f
qh_printfacet4geom_nonsimplicial	qvoronoi/io.cu	/^void qh_printfacet4geom_nonsimplicial(FILE *fp, facetT *facet, realT color[3]) {$/;"	f
qh_printfacet4geom_simplicial	qvoronoi/io.cu	/^void qh_printfacet4geom_simplicial(FILE *fp, facetT *facet, realT color[3]) {$/;"	f
qh_printfacetNvertex_nonsimplicial	qvoronoi/io.cu	/^void qh_printfacetNvertex_nonsimplicial(FILE *fp, facetT *facet, int id, qh_PRINT format) {$/;"	f
qh_printfacetNvertex_simplicial	qvoronoi/io.cu	/^void qh_printfacetNvertex_simplicial(FILE *fp, facetT *facet, qh_PRINT format) {$/;"	f
qh_printfacetheader	qvoronoi/io.cu	/^void qh_printfacetheader(FILE *fp, facetT *facet) {$/;"	f
qh_printfacetlist	qvoronoi/user.cu	/^void qh_printfacetlist(facetT *facetlist, setT *facets, boolT printall) {$/;"	f
qh_printfacetridges	qvoronoi/io.cu	/^void qh_printfacetridges(FILE *fp, facetT *facet) {$/;"	f
qh_printfacets	qvoronoi/io.cu	/^void qh_printfacets(FILE *fp, qh_PRINT format, facetT *facetlist, setT *facets, boolT printall) {$/;"	f
qh_printhashtable	qvoronoi/poly2.cu	/^void qh_printhashtable(FILE *fp) {$/;"	f
qh_printhelp_degenerate	qvoronoi/user.cu	/^void qh_printhelp_degenerate(FILE *fp) {$/;"	f
qh_printhelp_narrowhull	qvoronoi/user.cu	/^void qh_printhelp_narrowhull(FILE *fp, realT minangle) {$/;"	f
qh_printhelp_singular	qvoronoi/user.cu	/^void qh_printhelp_singular(FILE *fp) {$/;"	f
qh_printhyperplaneintersection	qvoronoi/io.cu	/^void qh_printhyperplaneintersection(FILE *fp, facetT *facet1, facetT *facet2,$/;"	f
qh_printline3geom	qvoronoi/io.cu	/^void qh_printline3geom(FILE *fp, pointT *pointA, pointT *pointB, realT color[3]) {$/;"	f
qh_printlists	qvoronoi/poly2.cu	/^void qh_printlists(void) {$/;"	f
qh_printmatrix	qvoronoi/geom2.cu	/^void qh_printmatrix(FILE *fp, const char *string, realT **rows, int numrow, int numcol) {$/;"	f
qh_printneighborhood	qvoronoi/io.cu	/^void qh_printneighborhood(FILE *fp, qh_PRINT format, facetT *facetA, facetT *facetB, boolT printall) {$/;"	f
qh_printpoint	qvoronoi/io.cu	/^void qh_printpoint(FILE *fp, const char *string, pointT *point) {$/;"	f
qh_printpoint3	qvoronoi/io.cu	/^void qh_printpoint3 (FILE *fp, pointT *point) {$/;"	f
qh_printpointid	qvoronoi/io.cu	/^void qh_printpointid(FILE *fp, const char *string, int dim, pointT *point, int id) {$/;"	f
qh_printpoints	qvoronoi/geom2.cu	/^void qh_printpoints(FILE *fp, const char *string, setT *points) {$/;"	f
qh_printpoints_out	qvoronoi/io.cu	/^void qh_printpoints_out(FILE *fp, facetT *facetlist, setT *facets, boolT printall) {$/;"	f
qh_printpointvect	qvoronoi/io.cu	/^void qh_printpointvect(FILE *fp, pointT *point, coordT *normal, pointT *center, realT radius, realT color[3]) {$/;"	f
qh_printpointvect2	qvoronoi/io.cu	/^void qh_printpointvect2 (FILE *fp, pointT *point, coordT *normal, pointT *center, realT radius) {$/;"	f
qh_printridge	qvoronoi/io.cu	/^void qh_printridge(FILE *fp, ridgeT *ridge) {$/;"	f
qh_printspheres	qvoronoi/io.cu	/^void qh_printspheres(FILE *fp, setT *vertices, realT radius) {$/;"	f
qh_printstatistics	qvoronoi/stat.cu	/^void    qh_printstatistics(FILE *fp, char *string) {}$/;"	f
qh_printstatistics	qvoronoi/stat.cu	/^void qh_printstatistics(FILE *fp, const char *string) {$/;"	f
qh_printstatlevel	qvoronoi/stat.cu	/^void qh_printstatlevel(FILE *fp, int id, int start) {$/;"	f
qh_printstats	qvoronoi/stat.cu	/^void qh_printstats(FILE *fp, int idx, int *nextindex) {$/;"	f
qh_printsummary	qvoronoi/libqhull.cu	/^void qh_printsummary(FILE *fp) {$/;"	f
qh_printvdiagram	qvoronoi/io.cu	/^void qh_printvdiagram(FILE *fp, qh_PRINT format, facetT *facetlist, setT *facets, boolT printall) {$/;"	f
qh_printvdiagram2	qvoronoi/io.cu	/^int qh_printvdiagram2 (FILE *fp, printvridgeT printvridge, setT *vertices, qh_RIDGE innerouter, boolT inorder) {$/;"	f
qh_printvertex	qvoronoi/io.cu	/^void qh_printvertex(FILE *fp, vertexT *vertex) {$/;"	f
qh_printvertexlist	qvoronoi/io.cu	/^void qh_printvertexlist(FILE *fp, const char* string, facetT *facetlist,$/;"	f
qh_printvertices	qvoronoi/io.cu	/^void qh_printvertices(FILE *fp, const char* string, setT *vertices) {$/;"	f
qh_printvneighbors	qvoronoi/io.cu	/^void qh_printvneighbors(FILE *fp, facetT* facetlist, setT *facets, boolT printall) {$/;"	f
qh_printvnorm	qvoronoi/io.cu	/^void qh_printvnorm(FILE *fp, vertexT *vertex, vertexT *vertexA, setT *centers, boolT unbounded) {$/;"	f
qh_printvoronoi	qvoronoi/io.cu	/^void qh_printvoronoi(FILE *fp, qh_PRINT format, facetT *facetlist, setT *facets, boolT printall) {$/;"	f
qh_printvridge	qvoronoi/io.cu	/^void qh_printvridge(FILE *fp, vertexT *vertex, vertexT *vertexA, setT *centers, boolT unbounded) {$/;"	f
qh_produce_output	qvoronoi/io.cu	/^void qh_produce_output(void) {$/;"	f
qh_produce_output2	qvoronoi/io.cu	/^void qh_produce_output2(void) {$/;"	f
qh_projectdim3	qvoronoi/io.cu	/^void qh_projectdim3 (pointT *source, pointT *destination) {$/;"	f
qh_projectinput	qvoronoi/geom2.cu	/^void qh_projectinput(void) {$/;"	f
qh_projectpoint	qvoronoi/geom.cu	/^pointT *qh_projectpoint(pointT *point, facetT *facet, realT dist) {$/;"	f
qh_projectpoints	qvoronoi/geom2.cu	/^void qh_projectpoints(signed char *project, int n, realT *points,$/;"	f
qh_prompt2	qvoronoi/qvoronoi.cu	/^char qh_prompt2[]= "\\n\\$/;"	v
qh_prompt3	qvoronoi/qvoronoi.cu	/^char qh_prompt3[]= "\\n\\$/;"	v
qh_prompta	qvoronoi/qvoronoi.cu	/^char qh_prompta[]= "\\n\\$/;"	v
qh_promptb	qvoronoi/qvoronoi.cu	/^char qh_promptb[]= "\\$/;"	v
qh_promptc	qvoronoi/qvoronoi.cu	/^char qh_promptc[]= "\\$/;"	v
qh_promptd	qvoronoi/qvoronoi.cu	/^char qh_promptd[]= "\\$/;"	v
qh_prompte	qvoronoi/qvoronoi.cu	/^char qh_prompte[]= "\\$/;"	v
qh_qh	qvoronoi/global.cu	/^qhT *qh_qh= NULL;       \/* pointer to all global variables *\/$/;"	v
qh_qh	qvoronoi/global.cu	/^qhT qh_qh;              \/* all global variables.$/;"	v
qh_qhstat	qvoronoi/stat.cu	/^qhstatT *qh_qhstat=NULL;  \/* global data structure *\/$/;"	v
qh_qhstat	qvoronoi/stat.cu	/^qhstatT qh_qhstat;   \/* add "={0}" if this causes a compiler error *\/$/;"	v
qh_qhull	qvoronoi/libqhull.cu	/^void qh_qhull(void) {$/;"	f
qh_rand	qvoronoi/qhrandom.cu	/^int qh_rand( void) {$/;"	f
qh_rand_a	qvoronoi/qhrandom.cu	143;"	d	file:
qh_rand_m	qvoronoi/qhrandom.cu	144;"	d	file:
qh_rand_q	qvoronoi/qhrandom.cu	145;"	d	file:
qh_rand_r	qvoronoi/qhrandom.cu	146;"	d	file:
qh_rand_seed	qvoronoi/qhrandom.cu	/^int qh_rand_seed= 1;  \/* define as global variable instead of using qh *\/$/;"	v
qh_randomfactor	qvoronoi/qhrandom.cu	/^realT qh_randomfactor(realT scale, realT offset) {$/;"	f
qh_randommatrix	qvoronoi/qhrandom.cu	/^void qh_randommatrix(realT *buffer, int dim, realT **rows) {$/;"	f
qh_rboxpoints	qvoronoi/rboxlib.cu	/^int qh_rboxpoints(FILE* fout, FILE* ferr, char* rbox_command) {$/;"	f
qh_readfeasible	qvoronoi/io.cu	/^int qh_readfeasible(int dim, const char *curline) {$/;"	f
qh_readpoints	qvoronoi/io.cu	/^coordT *qh_readpoints(int *numpoints, int *dimension, boolT *ismalloc) {$/;"	f
qh_reducevertices	qvoronoi/merge.cu	/^boolT qh_reducevertices(void) {$/;"	f
qh_redundant_vertex	qvoronoi/merge.cu	/^vertexT *qh_redundant_vertex(vertexT *vertex) {$/;"	f
qh_remove_extravertices	qvoronoi/merge.cu	/^boolT qh_remove_extravertices(facetT *facet) {$/;"	f
qh_removefacet	qvoronoi/poly.cu	/^void qh_removefacet(facetT *facet) {$/;"	f
qh_removevertex	qvoronoi/poly.cu	/^void qh_removevertex(vertexT *vertex) {$/;"	f
qh_rename_sharedvertex	qvoronoi/merge.cu	/^vertexT *qh_rename_sharedvertex(vertexT *vertex, facetT *facet) {$/;"	f
qh_renameridgevertex	qvoronoi/merge.cu	/^void qh_renameridgevertex(ridgeT *ridge, vertexT *oldvertex, vertexT *newvertex) {$/;"	f
qh_renamevertex	qvoronoi/merge.cu	/^void qh_renamevertex(vertexT *oldvertex, vertexT *newvertex, setT *ridges, facetT *oldfacet, facetT *neighborA) {$/;"	f
qh_resetlists	qvoronoi/poly2.cu	/^void qh_resetlists(boolT stats, boolT resetVisible \/*qh newvertex_list newfacet_list visible_list*\/) {$/;"	f
qh_restore_qhull	qvoronoi/global.cu	/^void qh_restore_qhull(qhT **oldqh) {$/;"	f
qh_rotateinput	qvoronoi/geom2.cu	/^void qh_rotateinput(realT **rows) {$/;"	f
qh_rotatepoints	qvoronoi/geom2.cu	/^void qh_rotatepoints(realT *points, int numpoints, int dim, realT **row) {$/;"	f
qh_save_qhull	qvoronoi/global.cu	/^qhT *qh_save_qhull(void) {$/;"	f
qh_scaleinput	qvoronoi/geom2.cu	/^void qh_scaleinput(void) {$/;"	f
qh_scalelast	qvoronoi/geom2.cu	/^void qh_scalelast(coordT *points, int numpoints, int dim, coordT low,$/;"	f
qh_scalepoints	qvoronoi/geom2.cu	/^void qh_scalepoints(pointT *points, int numpoints, int dim,$/;"	f
qh_setaddnth	qvoronoi/qset.cu	/^void qh_setaddnth(setT **setp, int nth, void *newelem) {$/;"	f
qh_setaddsorted	qvoronoi/qset.cu	/^void qh_setaddsorted(setT **setp, void *newelem) {$/;"	f
qh_setappend	qvoronoi/qset.cu	/^void qh_setappend(setT **setp, void *newelem) {$/;"	f
qh_setappend2ndlast	qvoronoi/qset.cu	/^void qh_setappend2ndlast(setT **setp, void *newelem) {$/;"	f
qh_setappend_set	qvoronoi/qset.cu	/^void qh_setappend_set(setT **setp, setT *setA) {$/;"	f
qh_setcheck	qvoronoi/qset.cu	/^void qh_setcheck(setT *set, const char *tname, unsigned id) {$/;"	f
qh_setcompact	qvoronoi/qset.cu	/^void qh_setcompact(setT *set) {$/;"	f
qh_setcopy	qvoronoi/qset.cu	/^setT *qh_setcopy(setT *set, int extra) {$/;"	f
qh_setdel	qvoronoi/qset.cu	/^void *qh_setdel(setT *set, void *oldelem) {$/;"	f
qh_setdelaunay	qvoronoi/geom2.cu	/^void qh_setdelaunay(int dim, int count, pointT *points) {$/;"	f
qh_setdellast	qvoronoi/qset.cu	/^void *qh_setdellast(setT *set) {$/;"	f
qh_setdelnth	qvoronoi/qset.cu	/^void *qh_setdelnth(setT *set, int nth) {$/;"	f
qh_setdelnthsorted	qvoronoi/qset.cu	/^void *qh_setdelnthsorted(setT *set, int nth) {$/;"	f
qh_setdelsorted	qvoronoi/qset.cu	/^void *qh_setdelsorted(setT *set, void *oldelem) {$/;"	f
qh_setduplicate	qvoronoi/qset.cu	/^setT *qh_setduplicate(setT *set, int elemsize) {$/;"	f
qh_setendpointer	qvoronoi/qset.cu	/^void **qh_setendpointer(setT *set) {$/;"	f
qh_setequal	qvoronoi/qset.cu	/^int qh_setequal(setT *setA, setT *setB) {$/;"	f
qh_setequal_except	qvoronoi/qset.cu	/^int qh_setequal_except(setT *setA, void *skipelemA, setT *setB, void *skipelemB) {$/;"	f
qh_setequal_skip	qvoronoi/qset.cu	/^int qh_setequal_skip(setT *setA, int skipA, setT *setB, int skipB) {$/;"	f
qh_setfacetplane	qvoronoi/geom.cu	/^void qh_setfacetplane(facetT *facet) {$/;"	f
qh_setfeasible	qvoronoi/io.cu	/^void qh_setfeasible(int dim) {$/;"	f
qh_setfree	qvoronoi/qset.cu	/^void qh_setfree(setT **setp) {$/;"	f
qh_setfree2	qvoronoi/qset.cu	/^void qh_setfree2 (setT **setp, int elemsize) {$/;"	f
qh_setfreelong	qvoronoi/qset.cu	/^void qh_setfreelong(setT **setp) {$/;"	f
qh_sethalfspace	qvoronoi/geom2.cu	/^boolT qh_sethalfspace(int dim, coordT *coords, coordT **nextp,$/;"	f
qh_sethalfspace_all	qvoronoi/geom2.cu	/^coordT *qh_sethalfspace_all(int dim, int count, coordT *halfspaces, pointT *feasible) {$/;"	f
qh_sethyperplane_det	qvoronoi/geom.cu	/^void qh_sethyperplane_det(int dim, coordT **rows, coordT *point0,$/;"	f
qh_sethyperplane_gauss	qvoronoi/geom.cu	/^void qh_sethyperplane_gauss(int dim, coordT **rows, pointT *point0,$/;"	f
qh_setin	qvoronoi/qset.cu	/^int qh_setin(setT *set, void *setelem) {$/;"	f
qh_setindex	qvoronoi/qset.cu	/^int qh_setindex(setT *set, void *atelem) {$/;"	f
qh_setlarger	qvoronoi/qset.cu	/^void qh_setlarger(setT **oldsetp) {$/;"	f
qh_setlast	qvoronoi/qset.cu	/^void *qh_setlast(setT *set) {$/;"	f
qh_setnew	qvoronoi/qset.cu	/^setT *qh_setnew(int setsize) {$/;"	f
qh_setnew_delnthsorted	qvoronoi/qset.cu	/^setT *qh_setnew_delnthsorted(setT *set, int size, int nth, int prepend) {$/;"	f
qh_setprint	qvoronoi/qset.cu	/^void qh_setprint(FILE *fp, const char* string, setT *set) {$/;"	f
qh_setreplace	qvoronoi/qset.cu	/^void qh_setreplace(setT *set, void *oldelem, void *newelem) {$/;"	f
qh_setsize	qvoronoi/qset.cu	/^int qh_setsize(setT *set) {$/;"	f
qh_settemp	qvoronoi/qset.cu	/^setT *qh_settemp(int setsize) {$/;"	f
qh_settempfree	qvoronoi/qset.cu	/^void qh_settempfree(setT **set) {$/;"	f
qh_settempfree_all	qvoronoi/qset.cu	/^void qh_settempfree_all(void) {$/;"	f
qh_settemppop	qvoronoi/qset.cu	/^setT *qh_settemppop(void) {$/;"	f
qh_settemppush	qvoronoi/qset.cu	/^void qh_settemppush(setT *set) {$/;"	f
qh_settruncate	qvoronoi/qset.cu	/^void qh_settruncate(setT *set, int size) {$/;"	f
qh_setunique	qvoronoi/qset.cu	/^int qh_setunique(setT **set, void *elem) {$/;"	f
qh_setvoronoi_all	qvoronoi/poly2.cu	/^void qh_setvoronoi_all(void) {$/;"	f
qh_setzero	qvoronoi/qset.cu	/^void qh_setzero(setT *set, int idx, int size) {$/;"	f
qh_sharpnewfacets	qvoronoi/geom2.cu	/^boolT qh_sharpnewfacets() {$/;"	f
qh_skipfacet	qvoronoi/io.cu	/^boolT qh_skipfacet(facetT *facet) {$/;"	f
qh_skipfilename	qvoronoi/io.cu	/^char *qh_skipfilename(char *filename) {$/;"	f
qh_srand	qvoronoi/qhrandom.cu	/^void qh_srand( int seed) {$/;"	f
qh_stddev	qvoronoi/stat.cu	/^realT qh_stddev(int num, realT tot, realT tot2, realT *ave) {$/;"	f
qh_strtod	qvoronoi/qhrandom.cu	/^double qh_strtod(const char *s, char **endp) {$/;"	f
qh_strtol	qvoronoi/qhrandom.cu	/^int qh_strtol(const char *s, char **endp) {$/;"	f
qh_test_appendmerge	qvoronoi/merge.cu	/^boolT qh_test_appendmerge(facetT *facet, facetT *neighbor) {$/;"	f
qh_test_vneighbors	qvoronoi/merge.cu	/^boolT qh_test_vneighbors(void \/* qh newfacet_list *\/) {$/;"	f
qh_tracemerge	qvoronoi/merge.cu	/^void qh_tracemerge(facetT *facet1, facetT *facet2) {$/;"	f
qh_tracemerging	qvoronoi/merge.cu	/^void qh_tracemerging(void) {$/;"	f
qh_triangulate	qvoronoi/poly2.cu	/^void qh_triangulate(void \/*qh facet_list*\/) {$/;"	f
qh_triangulate	qvoronoi/poly2.cu	/^void qh_triangulate(void) {$/;"	f
qh_triangulate_facet	qvoronoi/poly2.cu	/^void qh_triangulate_facet(facetT *facetA, vertexT **first_vertex) {$/;"	f
qh_triangulate_link	qvoronoi/poly2.cu	/^void qh_triangulate_link(facetT *oldfacetA, facetT *facetA, facetT *oldfacetB, facetT *facetB) {$/;"	f
qh_triangulate_mirror	qvoronoi/poly2.cu	/^void qh_triangulate_mirror(facetT *facetA, facetT *facetB) {$/;"	f
qh_triangulate_null	qvoronoi/poly2.cu	/^void qh_triangulate_null(facetT *facetA) {$/;"	f
qh_updatetested	qvoronoi/merge.cu	/^void qh_updatetested(facetT *facet1, facetT *facet2) {$/;"	f
qh_updatevertices	qvoronoi/poly.cu	/^void qh_updatevertices(void \/*qh newvertex_list, newfacet_list, visible_list*\/) {$/;"	f
qh_user_memsizes	qvoronoi/user.cu	/^void qh_user_memsizes(void) {$/;"	f
qh_version	qvoronoi/global.cu	/^const char *qh_version = "2012.1 2012\/02\/18";$/;"	v
qh_vertexintersect	qvoronoi/poly2.cu	/^void qh_vertexintersect(setT **vertexsetA,setT *vertexsetB) {$/;"	f
qh_vertexintersect_new	qvoronoi/poly2.cu	/^setT *qh_vertexintersect_new(setT *vertexsetA,setT *vertexsetB) {$/;"	f
qh_vertexneighbors	qvoronoi/poly2.cu	/^void qh_vertexneighbors(void \/*qh facet_list*\/) {$/;"	f
qh_vertexridges	qvoronoi/merge.cu	/^setT *qh_vertexridges(vertexT *vertex) {$/;"	f
qh_vertexridges_facet	qvoronoi/merge.cu	/^void qh_vertexridges_facet(vertexT *vertex, facetT *facet, setT **ridges) {$/;"	f
qh_vertexsubset	qvoronoi/poly2.cu	/^boolT qh_vertexsubset(setT *vertexsetA, setT *vertexsetB) {$/;"	f
qh_voronoi_center	qvoronoi/geom2.cu	/^pointT *qh_voronoi_center(int dim, setT *points) {$/;"	f
qh_willdelete	qvoronoi/merge.cu	/^void qh_willdelete(facetT *facet, facetT *replace) {$/;"	f
qhmem	qvoronoi/mem.cu	/^qhmemT qhmem= {0,0,0,0,0,0,0,0,0,0,0,$/;"	v
qhmemT	qvoronoi/mem.h	/^struct qhmemT {               \/* global memory management variables *\/$/;"	s
qhmemT	qvoronoi/mem.h	/^typedef struct qhmemT qhmemT;$/;"	t	typeref:struct:qhmemT
qhmem_ERRmem	qvoronoi/mem.h	62;"	d
qhmem_ERRqhull	qvoronoi/mem.h	63;"	d
qhstat	qvoronoi/stat.h	489;"	d
qhstat	qvoronoi/stat.h	492;"	d
qhstat	qvoronoi/stat.h	495;"	d
qhstat	qvoronoi/stat.h	498;"	d
qhstatT	qvoronoi/libqhull.h	/^typedef struct qhstatT qhstatT;    \/* defined in stat.h *\/$/;"	t	typeref:struct:qhstatT
qhstatT	qvoronoi/stat.h	/^struct qhstatT {$/;"	s
qhstatT	qvoronoi/stat.h	/^typedef struct qhstatT qhstatT;$/;"	t	typeref:struct:qhstatT
qhull	qvoronoi/libqhull.h	/^  char qhull[sizeof("qhull")]; \/* "qhull" for checking ownership while debugging *\/$/;"	m	struct:qhT
qhullUnused	qvoronoi/qhull_a.h	/^inline void qhullUnused(T &x) { (void)x; }$/;"	f
qhull_command	qvoronoi/libqhull.h	/^  char  qhull_command[256];\/* command line that invoked this program *\/$/;"	m	struct:qhT
qhull_commandsiz2	qvoronoi/libqhull.h	/^  int   qhull_commandsiz2; \/*    size of qhull_command at qh_clear_outputflags *\/$/;"	m	struct:qhT
qhull_inuse	qvoronoi/global.cu	/^int qhull_inuse= 0; \/* not used *\/$/;"	v
qhull_optionlen	qvoronoi/libqhull.h	/^  int   qhull_optionlen;  \/*    length of last line *\/$/;"	m	struct:qhT
qhull_options	qvoronoi/libqhull.h	/^  char  qhull_options[512];\/* descriptive list of options *\/$/;"	m	struct:qhT
qhull_optionsiz	qvoronoi/libqhull.h	/^  int   qhull_optionsiz;  \/*    size of qhull_options at qh_build_withrestart *\/$/;"	m	struct:qhT
qhull_optionsiz2	qvoronoi/libqhull.h	/^  int   qhull_optionsiz2; \/*    size of qhull_options at qh_clear_outputflags *\/$/;"	m	struct:qhT
qvoronoi	qvoronoi/qvoronoi.cu	/^void qvoronoi(int argc, char *argv[], FILE* input, FILE* output) {$/;"	f
r	qvoronoi/stat.h	/^    realT r;$/;"	m	union:intrealT
rand_int32	mtrand.h	/^inline unsigned long MTRand_int32::rand_int32() { \/\/ generate 32 bit random int$/;"	f	class:MTRand_int32
rand_int32	random/mtrand.h	/^inline uint32_t MTRand_int32::rand_int32() { \/\/ generate 32 bit random int$/;"	f	class:MTRand_int32
randperm	GrainsIndicator.cu	/^void randperm(int n,int perm[])$/;"	f
rbox	qvoronoi/rboxlib.cu	/^rboxT rbox;$/;"	v
rboxT	qvoronoi/rboxlib.cu	/^struct rboxT {$/;"	s	file:
rboxT	qvoronoi/rboxlib.cu	/^typedef struct rboxT rboxT;$/;"	t	typeref:struct:rboxT	file:
rbox_command	qvoronoi/libqhull.h	/^  char  rbox_command[256]; \/* command line that produced the input points *\/$/;"	m	struct:qhT
rbox_inuse	qvoronoi/rboxlib.cu	/^int rbox_inuse= 0;$/;"	v
realT	qvoronoi/user.h	134;"	d
realT	qvoronoi/user.h	144;"	d
redundant	qvoronoi/libqhull.h	/^  flagT    redundant:1;  \/* True if facet is redundant (degen_mergeset) *\/$/;"	m	struct:facetT
replace	qvoronoi/libqhull.h	/^   facetT *replace;     \/*  replacement facet if ->visible and NEWfacets$/;"	m	union:facetT::__anon3
restartexit	qvoronoi/libqhull.h	/^  jmp_buf restartexit;    \/* restart label for qh_errexit, defined by setjmp() *\/$/;"	m	struct:qhT
rgrain_scaling	Parameters_input.cu	/^double rgrain_scaling;$/;"	v
rgrain_size	Parameters_input.cu	/^double rgrain_size;$/;"	v
ridgeT	qvoronoi/libqhull.h	/^struct ridgeT {$/;"	s
ridgeT	qvoronoi/libqhull.h	/^typedef struct ridgeT ridgeT;$/;"	t	typeref:struct:ridgeT
ridgeT	qvoronoi/mem.cu	/^typedef struct ridgeT ridgeT;$/;"	t	typeref:struct:ridgeT	file:
ridgeT	qvoronoi/qset.cu	/^typedef struct ridgeT ridgeT;$/;"	t	typeref:struct:ridgeT	file:
ridge_id	qvoronoi/libqhull.h	/^  unsigned ridge_id:24;   \/* ID of next, new ridge from newridge() *\/$/;"	m	struct:qhT
ridgeoutnum	qvoronoi/libqhull.h	/^  int   ridgeoutnum;      \/* number of ridges for 4OFF output (qh_printbegin,etc) *\/$/;"	m	struct:qhT
ridges	qvoronoi/libqhull.h	/^  setT    *ridges;      \/* explicit ridges for nonsimplicial facets.$/;"	m	struct:facetT
right	clipper/clipper.h	/^struct IntRect { cInt left; cInt top; cInt right; cInt bottom; };$/;"	m	struct:ClipperLib::IntRect
roundi	qvoronoi/rboxlib.cu	/^int roundi( double a) {$/;"	f
rrt_cor	LLG_CUDA.cu	/^double *rrt_cor = NULL;$/;"	v
run_id	qvoronoi/libqhull.h	/^  int   run_id;           \/* non-zero, random identifier for this instance of qhull *\/$/;"	m	struct:qhT
sBL	Parameters_input.cu	/^double sBL; \/\/shortest bit length$/;"	v
same_dist	granular_media.cu	/^enum grain_bnd_t {same_dist=0, same_scaling=1};$/;"	e	enum:grain_bnd_t	file:
same_scaling	granular_media.cu	/^enum grain_bnd_t {same_dist=0, same_scaling=1};$/;"	e	enum:grain_bnd_t	file:
samecycle	qvoronoi/libqhull.h	/^   facetT *samecycle;   \/*  cycle of facets from the same visible\/horizon intersection,$/;"	m	union:facetT::__anon3
seed	mtrand.cu	/^void MTRand_int32::seed(const unsigned long* array, int size) { \/\/ init by array$/;"	f	class:MTRand_int32
seed	mtrand.cu	/^void MTRand_int32::seed(unsigned long s) {  \/\/ init by 32 bit seed$/;"	f	class:MTRand_int32
seed	random/mtrand.cu	/^void MTRand_int32::seed(const uint32_t* array, int size) { \/\/ init by array$/;"	f	class:MTRand_int32
seed	random/mtrand.cu	/^void MTRand_int32::seed(uint32_t s) {  \/\/ init by 32 bit seed$/;"	f	class:MTRand_int32
seen	qvoronoi/libqhull.h	/^  flagT    seen:1;      \/* used to perform operations only once *\/$/;"	m	struct:ridgeT
seen	qvoronoi/libqhull.h	/^  flagT    seen:1;      \/* used to perform operations only once *\/$/;"	m	struct:vertexT
seen	qvoronoi/libqhull.h	/^  flagT    seen:1;      \/* used to perform operations only once, like visitid *\/$/;"	m	struct:facetT
seen2	qvoronoi/libqhull.h	/^  flagT    seen2:1;     \/* another seen flag *\/$/;"	m	struct:vertexT
seen2	qvoronoi/libqhull.h	/^  flagT    seen2:1;     \/* used to perform operations only once, like visitid *\/$/;"	m	struct:facetT
setT	qvoronoi/libqhull.h	/^typedef struct setT setT;          \/* defined in qset.h *\/$/;"	t	typeref:struct:setT
setT	qvoronoi/mem.h	/^typedef struct setT setT;          \/* defined in qset.h *\/$/;"	t	typeref:struct:setT
setT	qvoronoi/qset.h	/^struct setT {$/;"	s
setT	qvoronoi/qset.h	/^typedef struct setT setT;   \/* a set is a sorted or unsorted array of pointers *\/$/;"	t	typeref:struct:setT
set_state	random/mtrand.cu	/^void MTRand_int32::set_state(std::vector<uint32_t>& iostate, int32_t& iop) {$/;"	f	class:MTRand_int32
setelemT	qvoronoi/qset.h	/^typedef union setelemT setelemT;$/;"	t	typeref:union:setelemT
setelemT	qvoronoi/qset.h	/^union setelemT {$/;"	u
sfNc	Parameters_input.cu	/^int sfNc; \/\/number of the shortest field cycle (sfCNt)$/;"	v
sfcNt	Parameters_input.cu	/^int sfcNt; \/\/number of time steps of the shortest field cycle (sfcNt, derived)$/;"	v
sigHc_Calc	MiscFunctions.cu	/^bool sigHc_Calc(vector <vector<double> > & M1_z_SingleGrain_field, double* Happl1_sweep, int count, int NumOfGrains, vector<vector<coor2d_t> > & grain_coor){$/;"	f
simplicial	qvoronoi/libqhull.h	/^  flagT    simplicial:1;\/* True if simplicial facet, ->ridges may be implicit *\/$/;"	m	struct:facetT
sizetable	qvoronoi/mem.h	/^  int     *sizetable;         \/* size of each freelist *\/$/;"	m	struct:qhmemT
sro	GrainsIndicator.cu	/^enum voronoi_t {normal=0, sro=1};$/;"	e	enum:voronoi_t	file:
sro_media	sro_media.cu	/^void sro_media(vec2d_t media_size, int num_large_grains, double grain_size, double grain_scaling, double domain_bnd_qfactor, std::vector<vec2d_t>& seed_array, std::vector <std::vector < vec2d_t> > &  vertex_array){$/;"	f
state	mtrand.cu	/^unsigned long MTRand_int32::state[n] = {0x0UL};$/;"	m	class:MTRand_int32	file:
state	mtrand.h	/^  static unsigned long state[n]; \/\/ state vector array$/;"	m	class:MTRand_int32
state	random/mtrand.cu	/^uint32_t MTRand_int32::state[n] = {0x0UL};$/;"	m	class:MTRand_int32	file:
state	random/mtrand.h	/^  static uint32_t state[n]; \/\/ state vector array$/;"	m	class:MTRand_int32
statistics	qvoronoi/stat.h	/^enum statistics {     \/* alphabetical after Z\/W *\/$/;"	g
statistics	qvoronoi/stat.h	/^enum statistics {     \/* for zzdef etc. macros *\/$/;"	g
stats	qvoronoi/stat.h	/^  intrealT   stats[ZEND];     \/* integer and real statistics *\/$/;"	m	struct:qhstatT
std_Aex	Parameters.h	/^static double  *std_Ku = NULL, *std_Aex = NULL, *std_Tc = NULL;$/;"	v
std_Ku	Parameters.h	/^static double  *std_Ku = NULL, *std_Aex = NULL, *std_Tc = NULL;$/;"	v
std_Tc	Parameters.h	/^static double  *std_Ku = NULL, *std_Aex = NULL, *std_Tc = NULL;$/;"	v
temp_malloc	qvoronoi/libqhull.h	/^  coordT *temp_malloc;    \/* malloc'd input array for points *\/$/;"	m	struct:qhT
tempi	qvoronoi/stat.h	/^  int        tempi;$/;"	m	struct:qhstatT
tempr	qvoronoi/stat.h	/^  realT      tempr;$/;"	m	struct:qhstatT
tempstack	qvoronoi/mem.h	/^  setT    *tempstack;         \/* stack of temporary memory, managed by users *\/$/;"	m	struct:qhmemT
tested	qvoronoi/libqhull.h	/^  flagT    tested:1;    \/* True if facet convexity has been tested (false after merge *\/$/;"	m	struct:facetT
tested	qvoronoi/libqhull.h	/^  flagT    tested:1;    \/* True when ridge is tested for convexity *\/$/;"	m	struct:ridgeT
theta	Parameters.h	/^static double theta = 0, phi = 0;$/;"	v
theta0	LLG_CUDA.cu	/^double *theta0 = NULL;$/;"	v
top	clipper/clipper.h	/^struct IntRect { cInt left; cInt top; cInt right; cInt bottom; };$/;"	m	struct:ClipperLib::IntRect
top	qvoronoi/libqhull.h	/^  facetT  *top;         \/* top facet this ridge is part of *\/$/;"	m	struct:ridgeT
toporient	qvoronoi/libqhull.h	/^  flagT    toporient:1; \/* True if created with top orientation$/;"	m	struct:facetT
totarea	qvoronoi/libqhull.h	/^  realT totarea;          \/* 'FA': total facet area computed by qh_getarea, hasAreaVolume *\/$/;"	m	struct:qhT
totbuffer	qvoronoi/mem.h	/^  int      totbuffer;         \/* total short memory buffers minus buffer links *\/$/;"	m	struct:qhmemT
totdropped	qvoronoi/mem.h	/^  int      totdropped;        \/* total dropped memory at end of short memory buffers (e.g., freesize) *\/$/;"	m	struct:qhmemT
totfree	qvoronoi/mem.h	/^  int      totfree;           \/* total size of free, short memory on freelists *\/$/;"	m	struct:qhmemT
totlarger	qvoronoi/mem.h	/^  int      totlarger;         \/* total copied by setlarger *\/$/;"	m	struct:qhmemT
totlong	qvoronoi/mem.h	/^  int      totlong;           \/* total size of long memory in use *\/$/;"	m	struct:qhmemT
totshort	qvoronoi/mem.h	/^  int      totshort;          \/* total size of short memory in use *\/$/;"	m	struct:qhmemT
totunused	qvoronoi/mem.h	/^  int      totunused;         \/* total unused short memory (estimated, short size - request size of first allocations) *\/$/;"	m	struct:qhmemT
totvol	qvoronoi/libqhull.h	/^  realT totvol;           \/* 'FA': total volume computed by qh_getarea, hasAreaVolume *\/$/;"	m	struct:qhT
trace0	qvoronoi/qhull_a.h	79;"	d
trace0	qvoronoi/qhull_a.h	86;"	d
trace1	qvoronoi/qhull_a.h	80;"	d
trace1	qvoronoi/qhull_a.h	87;"	d
trace2	qvoronoi/qhull_a.h	81;"	d
trace2	qvoronoi/qhull_a.h	88;"	d
trace3	qvoronoi/qhull_a.h	82;"	d
trace3	qvoronoi/qhull_a.h	89;"	d
trace4	qvoronoi/qhull_a.h	83;"	d
trace4	qvoronoi/qhull_a.h	90;"	d
trace5	qvoronoi/qhull_a.h	84;"	d
trace5	qvoronoi/qhull_a.h	91;"	d
tracefacet	qvoronoi/libqhull.h	/^  facetT *tracefacet;     \/*   set in newfacet\/mergefacet, undone in delfacet*\/$/;"	m	struct:qhT
tracefacet_id	qvoronoi/libqhull.h	/^  unsigned tracefacet_id;  \/* set at init, then can print whenever *\/$/;"	m	struct:qhT
tracevertex	qvoronoi/libqhull.h	/^  vertexT *tracevertex;     \/*   set in newvertex, undone in delvertex*\/$/;"	m	struct:qhT
tracevertex_id	qvoronoi/libqhull.h	/^  unsigned tracevertex_id;  \/* set at buildtracing, can print whenever *\/$/;"	m	struct:qhT
tricoplanar	qvoronoi/libqhull.h	/^  flagT    tricoplanar:1; \/* True if TRIangulate and simplicial and coplanar with a neighbor *\/$/;"	m	struct:facetT
triowner	qvoronoi/libqhull.h	/^   facetT *triowner;    \/* owner facet for ->tricoplanar, !isarea facets w\/ ->keepcentrum *\/$/;"	m	union:facetT::__anon3
trivisible	qvoronoi/libqhull.h	/^   facetT *trivisible;  \/* visible facet for ->tricoplanar facets during qh_triangulate() *\/$/;"	m	union:facetT::__anon3
twiddle	mtrand.h	/^inline unsigned long MTRand_int32::twiddle(unsigned long u, unsigned long v) {$/;"	f	class:MTRand_int32
twiddle	random/mtrand.h	/^inline uint32_t MTRand_int32::twiddle(uint32_t u, uint32_t v) {$/;"	f	class:MTRand_int32
two_pi	clipper/clipper.cu	/^static double const two_pi = pi *2;$/;"	m	namespace:ClipperLib	file:
type	qvoronoi/merge.h	/^  mergeType type;$/;"	m	struct:mergeT
type	qvoronoi/stat.h	/^  char       type[ZEND];      \/* type, see ztypes above *\/$/;"	m	struct:qhstatT
ulong64	clipper/clipper.h	/^  typedef unsigned long long ulong64;$/;"	t	namespace:ClipperLib
upper_bound	qvoronoi/libqhull.h	/^  realT *upper_bound;     \/* scale point[k] to new upper bound *\/$/;"	m	struct:qhT
upper_threshold	qvoronoi/libqhull.h	/^  realT *upper_threshold; \/* don't print if facet->normal[k]>=upper_threshold[k]$/;"	m	struct:qhT
upperdelaunay	qvoronoi/libqhull.h	/^  flagT    upperdelaunay:1; \/* True if facet is upper envelope of Delaunay triangulation *\/$/;"	m	struct:facetT
v	Parameters_input.cu	/^double v; \/\/head velocity [cm\/s]$/;"	v
vec2d_t	MiscFunctions.h	/^struct vec2d_t{$/;"	s
vec2d_t	voronoi.h	/^struct vec2d_t{$/;"	s
vertexT	qvoronoi/libqhull.h	/^struct vertexT {$/;"	s
vertexT	qvoronoi/libqhull.h	/^typedef struct vertexT vertexT;$/;"	t	typeref:struct:vertexT
vertex_id	qvoronoi/libqhull.h	/^  unsigned vertex_id:24;  \/* ID of next, new vertex from newvertex() *\/$/;"	m	struct:qhT
vertex_list	qvoronoi/libqhull.h	/^  vertexT *vertex_list;     \/* list of all vertices, to vertex_tail *\/$/;"	m	struct:qhT
vertex_tail	qvoronoi/libqhull.h	/^  vertexT  *vertex_tail;    \/*      end of vertex_list (dummy vertex) *\/$/;"	m	struct:qhT
vertex_visit	qvoronoi/libqhull.h	/^  unsigned int vertex_visit:31; \/* unique ID for searching vertices, reset with qh_buildtracing *\/$/;"	m	struct:qhT
vertices	qvoronoi/libqhull.h	/^  setT    *vertices;    \/* vertices belonging to this ridge, inverse sorted by ID$/;"	m	struct:ridgeT
vertices	qvoronoi/libqhull.h	/^  setT    *vertices;    \/* vertices for this facet, inverse sorted by ID$/;"	m	struct:facetT
visible	qvoronoi/libqhull.h	/^  flagT    visible:1;   \/* True if visible facet (will be deleted) *\/$/;"	m	struct:facetT
visible_list	qvoronoi/libqhull.h	/^  facetT *visible_list;   \/* list of visible facets preceeding newfacet_list,$/;"	m	struct:qhT
visit_id	qvoronoi/libqhull.h	/^  unsigned int visit_id;  \/* unique ID for searching neighborhoods, *\/$/;"	m	struct:qhT
visitid	qvoronoi/libqhull.h	/^  unsigned visitid:31;  \/* for use with qh vertex_visit, size must match *\/$/;"	m	struct:vertexT
visitid	qvoronoi/libqhull.h	/^  unsigned visitid;     \/* visit_id, for visiting all neighbors,$/;"	m	struct:facetT
voronoi_seed	random.cu	/^	int voronoi_seed=1234;$/;"	m	namespace:mtrandom	file:
voronoi_seed	random/random.cu	/^	int voronoi_seed=1951218893;$/;"	m	namespace:mtrandom	file:
voronoi_t	GrainsIndicator.cu	/^enum voronoi_t {normal=0, sro=1};$/;"	g	file:
vridges	qvoronoi/stat.h	/^  int        vridges;         \/* index for Voronoi ridges *\/$/;"	m	struct:qhstatT
w	random.cu	/^	double x1,x2,w;$/;"	m	namespace:mtrandom	file:
w	random/random.cu	/^	double x1,x2,w;$/;"	m	namespace:mtrandom	file:
wadd	qvoronoi/stat.h	/^enum ztypes {zdoc,zinc,zadd,zmax,zmin,ZTYPEreal,wadd,wmax,wmin,ZTYPEend};$/;"	e	enum:ztypes
wadd_	qvoronoi/stat.h	399;"	d
wadd_	qvoronoi/stat.h	402;"	d
watch100	Parameters.h	/^static double  *watch100 = NULL, *watch2 = NULL, *watch3 = NULL, *watch4 = NULL, *watch5 = NULL;$/;"	v
watch100_int	Parameters.h	/^static int     *watch100_int = NULL, *watch2_int = NULL, *watch3_int = NULL;$/;"	v
watch2	Parameters.h	/^static double  *watch100 = NULL, *watch2 = NULL, *watch3 = NULL, *watch4 = NULL, *watch5 = NULL;$/;"	v
watch2_int	Parameters.h	/^static int     *watch100_int = NULL, *watch2_int = NULL, *watch3_int = NULL;$/;"	v
watch3	Parameters.h	/^static double  *watch100 = NULL, *watch2 = NULL, *watch3 = NULL, *watch4 = NULL, *watch5 = NULL;$/;"	v
watch3_int	Parameters.h	/^static int     *watch100_int = NULL, *watch2_int = NULL, *watch3_int = NULL;$/;"	v
watch4	Parameters.h	/^static double  *watch100 = NULL, *watch2 = NULL, *watch3 = NULL, *watch4 = NULL, *watch5 = NULL;$/;"	v
watch5	Parameters.h	/^static double  *watch100 = NULL, *watch2 = NULL, *watch3 = NULL, *watch4 = NULL, *watch5 = NULL;$/;"	v
what	clipper/clipper.h	/^    virtual const char* what() const throw() {return m_descr.c_str();}$/;"	f	class:ClipperLib::clipperException
wmax	qvoronoi/stat.h	/^enum ztypes {zdoc,zinc,zadd,zmax,zmin,ZTYPEreal,wadd,wmax,wmin,ZTYPEend};$/;"	e	enum:ztypes
wmax_	qvoronoi/stat.h	430;"	d
wmax_	qvoronoi/stat.h	433;"	d
wmin	qvoronoi/stat.h	/^enum ztypes {zdoc,zinc,zadd,zmax,zmin,ZTYPEreal,wadd,wmax,wmin,ZTYPEend};$/;"	e	enum:ztypes
wmin_	qvoronoi/stat.h	444;"	d
wmin_	qvoronoi/stat.h	447;"	d
wtab	random.cu	/^static const double wtab[128] = {$/;"	m	namespace:mtrandom	file:
wtab	random/random.cu	/^static const double wtab[128] = {$/;"	m	namespace:mtrandom	file:
wval_	qvoronoi/stat.h	415;"	d
wval_	qvoronoi/stat.h	418;"	d
wwadd_	qvoronoi/stat.h	396;"	d
wwmax_	qvoronoi/stat.h	427;"	d
wwval_	qvoronoi/stat.h	412;"	d
x	MiscFunctions.h	/^	int x;$/;"	m	struct:coor2d_t
x	MiscFunctions.h	/^  double x;$/;"	m	struct:vec2d_t
x	voronoi.h	/^  double x;$/;"	m	struct:vec2d_t
x1	random.cu	/^	double x1,x2,w;$/;"	m	namespace:mtrandom	file:
x1	random/random.cu	/^	double x1,x2,w;$/;"	m	namespace:mtrandom	file:
x2	random.cu	/^	double x1,x2,w;$/;"	m	namespace:mtrandom	file:
x2	random/random.cu	/^	double x1,x2,w;$/;"	m	namespace:mtrandom	file:
y	MiscFunctions.h	/^	int y;$/;"	m	struct:coor2d_t
y	MiscFunctions.h	/^  double y;$/;"	m	struct:vec2d_t
y	voronoi.h	/^  double y;$/;"	m	struct:vec2d_t
ytab	random.cu	/^static const double ytab[128] = {$/;"	m	namespace:mtrandom	file:
ytab	random/random.cu	/^static const double ytab[128] = {$/;"	m	namespace:mtrandom	file:
zadd	qvoronoi/stat.h	/^enum ztypes {zdoc,zinc,zadd,zmax,zmin,ZTYPEreal,wadd,wmax,wmin,ZTYPEend};$/;"	e	enum:ztypes
zadd_	qvoronoi/stat.h	398;"	d
zadd_	qvoronoi/stat.h	401;"	d
zdef_	qvoronoi/stat.h	370;"	d
zdef_	qvoronoi/stat.h	373;"	d
zdoc	qvoronoi/stat.h	/^enum ztypes {zdoc,zinc,zadd,zmax,zmin,ZTYPEreal,wadd,wmax,wmin,ZTYPEend};$/;"	e	enum:ztypes
zinc	qvoronoi/stat.h	/^enum ztypes {zdoc,zinc,zadd,zmax,zmin,ZTYPEreal,wadd,wmax,wmin,ZTYPEend};$/;"	e	enum:ztypes
zinc_	qvoronoi/stat.h	384;"	d
zinc_	qvoronoi/stat.h	386;"	d
zmax	qvoronoi/stat.h	/^enum ztypes {zdoc,zinc,zadd,zmax,zmin,ZTYPEreal,wadd,wmax,wmin,ZTYPEend};$/;"	e	enum:ztypes
zmax_	qvoronoi/stat.h	429;"	d
zmax_	qvoronoi/stat.h	432;"	d
zmin	qvoronoi/stat.h	/^enum ztypes {zdoc,zinc,zadd,zmax,zmin,ZTYPEreal,wadd,wmax,wmin,ZTYPEend};$/;"	e	enum:ztypes
zmin_	qvoronoi/stat.h	443;"	d
zmin_	qvoronoi/stat.h	446;"	d
ztypes	qvoronoi/stat.h	/^enum ztypes {zdoc,zinc,zadd,zmax,zmin,ZTYPEreal,wadd,wmax,wmin,ZTYPEend};$/;"	g
zval_	qvoronoi/stat.h	414;"	d
zval_	qvoronoi/stat.h	417;"	d
zzadd_	qvoronoi/stat.h	395;"	d
zzdef_	qvoronoi/stat.h	367;"	d
zzinc_	qvoronoi/stat.h	382;"	d
zzval_	qvoronoi/stat.h	411;"	d
~Clipper	clipper/clipper.cu	/^Clipper::~Clipper() \/\/destructor$/;"	f	class:ClipperLib::Clipper
~ClipperBase	clipper/clipper.cu	/^ClipperBase::~ClipperBase() \/\/destructor$/;"	f	class:ClipperLib::ClipperBase
~ClipperOffset	clipper/clipper.cu	/^ClipperOffset::~ClipperOffset()$/;"	f	class:ClipperLib::ClipperOffset
~MTRand	mtrand.h	/^  ~MTRand() {}$/;"	f	class:MTRand
~MTRand	random/mtrand.h	/^  ~MTRand() {}$/;"	f	class:MTRand
~MTRand53	mtrand.h	/^  ~MTRand53() {}$/;"	f	class:MTRand53
~MTRand53	random/mtrand.h	/^  ~MTRand53() {}$/;"	f	class:MTRand53
~MTRand_closed	mtrand.h	/^  ~MTRand_closed() {}$/;"	f	class:MTRand_closed
~MTRand_closed	random/mtrand.h	/^  ~MTRand_closed() {}$/;"	f	class:MTRand_closed
~MTRand_int32	mtrand.h	/^  virtual ~MTRand_int32() {} \/\/ destructor$/;"	f	class:MTRand_int32
~MTRand_int32	random/mtrand.h	/^  virtual ~MTRand_int32() {} \/\/ destructor$/;"	f	class:MTRand_int32
~MTRand_open	mtrand.h	/^  ~MTRand_open() {}$/;"	f	class:MTRand_open
~MTRand_open	random/mtrand.h	/^  ~MTRand_open() {}$/;"	f	class:MTRand_open
~PolyNode	clipper/clipper.h	/^    virtual ~PolyNode(){};$/;"	f	class:ClipperLib::PolyNode
~PolyTree	clipper/clipper.h	/^    ~PolyTree(){Clear();};$/;"	f	class:ClipperLib::PolyTree
~clipperException	clipper/clipper.h	/^    virtual ~clipperException() throw() {}$/;"	f	class:ClipperLib::clipperException
